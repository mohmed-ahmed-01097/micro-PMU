
new8_Update0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  00020014  2**0
                  CONTENTS
  1 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000043f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001d8  08004580  08004580  00014580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800475c  0800475c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  08004760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  8 .bss          0001a230  20000014  20000014  00020014  2**2
                  ALLOC
  9 ._user_heap_stack 00000c00  2001a244  2001a244  00020014  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 11 .debug_info   00006435  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000016b7  00000000  00000000  00026479  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002587  00000000  00000000  00027b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000308  00000000  00000000  0002a0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  0002a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002340  00000000  00000000  0002aee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001abf  00000000  00000000  0002d220  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0002ecdf  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000b44  00000000  00000000  0002ed5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004568 	.word	0x08004568

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004568 	.word	0x08004568

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	0000      	movs	r0, r0
	...

08000ba0 <LookUp_Init>:

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Initialization of Look Up tables **/
void LookUp_Init(void){
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	4d5d      	ldr	r5, [pc, #372]	; (8000d18 <LookUp_Init+0x178>)
 8000ba4:	ed2d 8b02 	vpush	{d8}
 8000ba8:	a157      	add	r1, pc, #348	; (adr r1, 8000d08 <LookUp_Init+0x168>)
 8000baa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bae:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8000d1c <LookUp_Init+0x17c>
 8000bb2:	f5a5 6600 	sub.w	r6, r5, #2048	; 0x800
	for(uint16_t i = READ_SAMPLEn ; i-- ; --float_ptr){
 8000bb6:	f240 14ff 	movw	r4, #511	; 0x1ff
 8000bba:	e007      	b.n	8000bcc <LookUp_Init+0x2c>
 8000bbc:	f7ff fc68 	bl	8000490 <__aeabi_f2d>
 8000bc0:	ec41 0b10 	vmov	d0, r0, r1
 8000bc4:	f002 fc8c 	bl	80034e0 <sin>
 8000bc8:	ec51 0b10 	vmov	r0, r1, d0
 8000bcc:	3c01      	subs	r4, #1
 8000bce:	b2a4      	uxth	r4, r4
		*float_ptr = sin(2*PI*i / READ_SAMPLEn);
 8000bd0:	f7ff ff94 	bl	8000afc <__aeabi_d2f>
 8000bd4:	ee07 4a90 	vmov	s15, r4
 8000bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bdc:	f845 0d04 	str.w	r0, [r5, #-4]!
 8000be0:	ee67 7a88 	vmul.f32	s15, s15, s16
	for(uint16_t i = READ_SAMPLEn ; i-- ; --float_ptr){
 8000be4:	42b5      	cmp	r5, r6
 8000be6:	ee17 0a90 	vmov	r0, s15
 8000bea:	d1e7      	bne.n	8000bbc <LookUp_Init+0x1c>
 8000bec:	4d4c      	ldr	r5, [pc, #304]	; (8000d20 <LookUp_Init+0x180>)
 8000bee:	ed9f 8a4b 	vldr	s16, [pc, #300]	; 8000d1c <LookUp_Init+0x17c>
 8000bf2:	f5a5 6600 	sub.w	r6, r5, #2048	; 0x800
 8000bf6:	a146      	add	r1, pc, #280	; (adr r1, 8000d10 <LookUp_Init+0x170>)
 8000bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bfc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8000c00:	e007      	b.n	8000c12 <LookUp_Init+0x72>
 8000c02:	f7ff fc45 	bl	8000490 <__aeabi_f2d>
 8000c06:	ec41 0b10 	vmov	d0, r0, r1
 8000c0a:	f002 fc25 	bl	8003458 <cos>
 8000c0e:	ec51 0b10 	vmov	r0, r1, d0
	for(uint16_t i = READ_SAMPLEn ; i-- ; --float_ptr){
 8000c12:	3c01      	subs	r4, #1
 8000c14:	b2a4      	uxth	r4, r4
		*float_ptr = cos(2*PI*i / READ_SAMPLEn);
 8000c16:	f7ff ff71 	bl	8000afc <__aeabi_d2f>
 8000c1a:	ee07 4a90 	vmov	s15, r4
 8000c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c22:	f845 0d04 	str.w	r0, [r5, #-4]!
 8000c26:	ee67 7a88 	vmul.f32	s15, s15, s16
	for(uint16_t i = READ_SAMPLEn ; i-- ; --float_ptr){
 8000c2a:	42ae      	cmp	r6, r5
 8000c2c:	ee17 0a90 	vmov	r0, s15
 8000c30:	d1e7      	bne.n	8000c02 <LookUp_Init+0x62>
 8000c32:	eddf 4a3c 	vldr	s9, [pc, #240]	; 8000d24 <LookUp_Init+0x184>
		float b = i * Delta_t;
 8000c36:	ed9f 4a3c 	vldr	s8, [pc, #240]	; 8000d28 <LookUp_Init+0x188>
	for(uint16_t i = READ_SAMPLEn ; i-- ; --float_ptr){
 8000c3a:	eeb0 6a64 	vmov.f32	s12, s9
 8000c3e:	eef0 5a64 	vmov.f32	s11, s9
 8000c42:	eeb0 5a64 	vmov.f32	s10, s9
 8000c46:	f240 13ff 	movw	r3, #511	; 0x1ff
		float b = i * Delta_t;
 8000c4a:	ee07 3a90 	vmov	s15, r3
 8000c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c52:	3b01      	subs	r3, #1
 8000c54:	ee67 7a84 	vmul.f32	s15, s15, s8
	for(uint16_t i = READ_SAMPLEn; i-- ; ){
 8000c58:	1c5a      	adds	r2, r3, #1
		sum_b1 += step_b ;		step_b = step_b * b;
 8000c5a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8000c5e:	ee35 5a27 	vadd.f32	s10, s10, s15
		sum_b2 += step_b; 		step_b = step_b * b;
 8000c62:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8000c66:	ee75 5aa6 	vadd.f32	s11, s11, s13
		sum_b3 += step_b; 		step_b = step_b * b;
 8000c6a:	ee36 6a07 	vadd.f32	s12, s12, s14
		sum_b4 += step_b;
 8000c6e:	eee7 4a87 	vfma.f32	s9, s15, s14
	for(uint16_t i = READ_SAMPLEn; i-- ; ){
 8000c72:	d1ea      	bne.n	8000c4a <LookUp_Init+0xaa>
		determinant += (mat_m[0][i]*(mat_m[1][(i+1)%3]*mat_m[2][(i+2)%3] - mat_m[1][(i+2)%3]*mat_m[2][(i+1)%3]));
 8000c74:	ee66 6a46 	vnmul.f32	s13, s12, s12
 8000c78:	ee24 7ac5 	vnmul.f32	s14, s9, s10
 8000c7c:	eee5 6aa4 	vfma.f32	s13, s11, s9
	Set_sin(&SIN_ARRAY[READ_SAMPLEn-1]);
	Set_cos(&COS_ARRAY[READ_SAMPLEn-1]);

	Set_MAT_J();

}
 8000c80:	ecbd 8b02 	vpop	{d8}
		determinant += (mat_m[0][i]*(mat_m[1][(i+1)%3]*mat_m[2][(i+2)%3] - mat_m[1][(i+2)%3]*mat_m[2][(i+1)%3]));
 8000c84:	eddf 2a29 	vldr	s5, [pc, #164]	; 8000d2c <LookUp_Init+0x18c>
	        	mat_i[i*3+j] = ((mat_m[(i+1)%3][(j+1)%3] * mat_m[(i+2)%3][(j+2)%3]) - (mat_m[(i+1)%3][(j+2)%3]*mat_m[(i+2)%3][(j+1)%3]))/ determinant;
 8000c88:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <LookUp_Init+0x190>)
		determinant += (mat_m[0][i]*(mat_m[1][(i+1)%3]*mat_m[2][(i+2)%3] - mat_m[1][(i+2)%3]*mat_m[2][(i+1)%3]));
 8000c8a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8000c8e:	ee65 7ae5 	vnmul.f32	s15, s11, s11
 8000c92:	ee26 3aa2 	vmul.f32	s6, s13, s5
 8000c96:	eef0 3a67 	vmov.f32	s7, s15
 8000c9a:	eee5 3a06 	vfma.f32	s7, s10, s12
 8000c9e:	eea7 3a05 	vfma.f32	s6, s14, s10
 8000ca2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8000ca6:	eea5 3aa3 	vfma.f32	s6, s11, s7
	        	mat_i[i*3+j] = ((mat_m[(i+1)%3][(j+1)%3] * mat_m[(i+2)%3][(j+2)%3]) - (mat_m[(i+1)%3][(j+2)%3]*mat_m[(i+2)%3][(j+1)%3]))/ determinant;
 8000caa:	ee22 6ac6 	vnmul.f32	s12, s5, s12
 8000cae:	ee82 4a03 	vdiv.f32	s8, s4, s6
 8000cb2:	ee25 3a45 	vnmul.f32	s6, s10, s10
 8000cb6:	eea5 6a25 	vfma.f32	s12, s10, s11
 8000cba:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8000cbe:	eeb0 5a43 	vmov.f32	s10, s6
 8000cc2:	eea5 5aa2 	vfma.f32	s10, s11, s5
 8000cc6:	eef0 4a67 	vmov.f32	s9, s15
 8000cca:	ee64 5a23 	vmul.f32	s11, s8, s7
 8000cce:	ee66 7a04 	vmul.f32	s15, s12, s8
 8000cd2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8000cd6:	ee25 5a04 	vmul.f32	s10, s10, s8
 8000cda:	ee24 6a84 	vmul.f32	s12, s9, s8
 8000cde:	ee66 6a84 	vmul.f32	s13, s13, s8
 8000ce2:	ed83 5a08 	vstr	s10, [r3, #32]
 8000ce6:	edc3 7a07 	vstr	s15, [r3, #28]
 8000cea:	edc3 5a06 	vstr	s11, [r3, #24]
 8000cee:	edc3 7a05 	vstr	s15, [r3, #20]
 8000cf2:	ed83 6a04 	vstr	s12, [r3, #16]
 8000cf6:	ed83 7a03 	vstr	s14, [r3, #12]
 8000cfa:	edc3 5a02 	vstr	s11, [r3, #8]
 8000cfe:	ed83 7a01 	vstr	s14, [r3, #4]
 8000d02:	edc3 6a00 	vstr	s13, [r3]
}
 8000d06:	bd70      	pop	{r4, r5, r6, pc}
 8000d08:	31518c40 	.word	0x31518c40
 8000d0c:	bf8921bf 	.word	0xbf8921bf
 8000d10:	1787c54a 	.word	0x1787c54a
 8000d14:	3fefff62 	.word	0x3fefff62
 8000d18:	20015080 	.word	0x20015080
 8000d1c:	3c490fdb 	.word	0x3c490fdb
 8000d20:	20000830 	.word	0x20000830
 8000d24:	00000000 	.word	0x00000000
 8000d28:	3823d70a 	.word	0x3823d70a
 8000d2c:	44000000 	.word	0x44000000
 8000d30:	200150d8 	.word	0x200150d8

08000d34 <uPMU_Process_Mode>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Read Process **/
void uPMU_Process_Mode(volatile Channel_Typedef* data, const uint16_t sample){
 8000d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d38:	ed2d 8b0a 	vpush	{d8-d12}
	float sin_f = SIN_ARRAY[sample];
	float cos_f = COS_ARRAY[sample];

	DFT_Typedef*    value   = DFT_PHASOR;
	OUTPUT_Typedef* out_sum = SUM_PHASOR;
	Phasor_Typedef* result  = OUT_ARRAY[Read_Buffer][sample];
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <uPMU_Process_Mode+0x68>)
	float sin_f = SIN_ARRAY[sample];
 8000d3e:	4d18      	ldr	r5, [pc, #96]	; (8000da0 <uPMU_Process_Mode+0x6c>)
	Phasor_Typedef* result  = OUT_ARRAY[Read_Buffer][sample];
 8000d40:	781b      	ldrb	r3, [r3, #0]
	float cos_f = COS_ARRAY[sample];
 8000d42:	4c18      	ldr	r4, [pc, #96]	; (8000da4 <uPMU_Process_Mode+0x70>)
	Phasor_Typedef* result  = OUT_ARRAY[Read_Buffer][sample];
 8000d44:	4e18      	ldr	r6, [pc, #96]	; (8000da8 <uPMU_Process_Mode+0x74>)
		value->A.Real += ((data->A - data_0->A) * cos_f);

		value->V.Imag += ((data->V - data_0->V) * sin_f);
		value->A.Imag += ((data->A - data_0->A) * sin_f);

		result->V.Absl = (value->V.Real * value->V.Real + value->V.Imag * value->V.Imag) * FACTOR;
 8000d46:	ed9f 4a19 	vldr	s8, [pc, #100]	; 8000dac <uPMU_Process_Mode+0x78>
 8000d4a:	ed9f 3a19 	vldr	s6, [pc, #100]	; 8000db0 <uPMU_Process_Mode+0x7c>
 8000d4e:	eddf 3a19 	vldr	s7, [pc, #100]	; 8000db4 <uPMU_Process_Mode+0x80>
			temp  = temp * step * TAN_F[i];
 8000d52:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8000db8 <uPMU_Process_Mode+0x84>
 8000d56:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000dbc <uPMU_Process_Mode+0x88>
 8000d5a:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8000dc0 <uPMU_Process_Mode+0x8c>
 8000d5e:	eddf 1a19 	vldr	s3, [pc, #100]	; 8000dc4 <uPMU_Process_Mode+0x90>
 8000d62:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8000dc8 <uPMU_Process_Mode+0x94>
 8000d66:	eddf 2a19 	vldr	s5, [pc, #100]	; 8000dcc <uPMU_Process_Mode+0x98>
 8000d6a:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <uPMU_Process_Mode+0x9c>)
 8000d6c:	f8df c068 	ldr.w	ip, [pc, #104]	; 8000dd8 <uPMU_Process_Mode+0xa4>
	float sin_f = SIN_ARRAY[sample];
 8000d70:	008f      	lsls	r7, r1, #2
	Phasor_Typedef* result  = OUT_ARRAY[Read_Buffer][sample];
 8000d72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000d76:	eb07 0901 	add.w	r9, r7, r1
 8000d7a:	035b      	lsls	r3, r3, #13
 8000d7c:	eb03 1309 	add.w	r3, r3, r9, lsl #4
 8000d80:	eb06 0903 	add.w	r9, r6, r3
	float sin_f = SIN_ARRAY[sample];
 8000d84:	443d      	add	r5, r7
	float cos_f = COS_ARRAY[sample];
 8000d86:	443c      	add	r4, r7
	float sin_f = SIN_ARRAY[sample];
 8000d88:	edd5 4a00 	vldr	s9, [r5]
	float cos_f = COS_ARRAY[sample];
 8000d8c:	ed94 5a00 	vldr	s10, [r4]
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <uPMU_Process_Mode+0xa0>)
 8000d92:	f109 0e10 	add.w	lr, r9, #16
 8000d96:	f100 0814 	add.w	r8, r0, #20
 8000d9a:	e087      	b.n	8000eac <uPMU_Process_Mode+0x178>
 8000d9c:	2001a100 	.word	0x2001a100
 8000da0:	20014880 	.word	0x20014880
 8000da4:	20000030 	.word	0x20000030
 8000da8:	20000880 	.word	0x20000880
 8000dac:	2a31ee4d 	.word	0x2a31ee4d
 8000db0:	42652ee0 	.word	0x42652ee0
 8000db4:	3b360b61 	.word	0x3b360b61
 8000db8:	3eaaaaab 	.word	0x3eaaaaab
 8000dbc:	3e4ccccd 	.word	0x3e4ccccd
 8000dc0:	3e124925 	.word	0x3e124925
 8000dc4:	3de38e39 	.word	0x3de38e39
 8000dc8:	3dba2e8c 	.word	0x3dba2e8c
 8000dcc:	3d9d89d9 	.word	0x3d9d89d9
 8000dd0:	20000840 	.word	0x20000840
 8000dd4:	20015098 	.word	0x20015098
 8000dd8:	2001a22c 	.word	0x2001a22c
 8000ddc:	00000000 	.word	0x00000000
 8000de0:	43b40000 	.word	0x43b40000
 8000de4:	3fc75923 	.word	0x3fc75923
 8000de8:	3d888889 	.word	0x3d888889
 8000dec:	3d70f0f1 	.word	0x3d70f0f1
 8000df0:	3d430c31 	.word	0x3d430c31
 8000df4:	3d579436 	.word	0x3d579436
 8000df8:	40490fdb 	.word	0x40490fdb
 8000dfc:	3fc90fdb 	.word	0x3fc90fdb
		angle = PI_2 * (y != 0);
 8000e00:	eef5 8a40 	vcmp.f32	s17, #0.0
 8000e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e08:	f040 81de 	bne.w	80011c8 <uPMU_Process_Mode+0x494>
 8000e0c:	ed5f 8a0d 	vldr	s17, [pc, #-52]	; 8000ddc <uPMU_Process_Mode+0xa8>
	if (x == 0){
 8000e10:	eeb5 7a40 	vcmp.f32	s14, #0.0
		angle = PI_2 * (y != 0);
 8000e14:	eef0 7a68 	vmov.f32	s15, s17
	if (x == 0){
 8000e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		result->A.Absl = (value->A.Real * value->A.Real + value->A.Imag * value->A.Imag) * FACTOR;

		result->V.Angl = Get_atan(-value->V.Imag, value->V.Real);
 8000e1c:	ed4e 7a03 	vstr	s15, [lr, #-12]
	if (x == 0){
 8000e20:	f040 8138 	bne.w	8001094 <uPMU_Process_Mode+0x360>
		angle = PI_2 * (y != 0);
 8000e24:	eef5 6a40 	vcmp.f32	s13, #0.0
 8000e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2c:	f040 81da 	bne.w	80011e4 <uPMU_Process_Mode+0x4b0>
 8000e30:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8000ddc <uPMU_Process_Mode+0xa8>
 8000e34:	eef0 7a47 	vmov.f32	s15, s14
	if(angle_f < 0){
 8000e38:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		result->A.Angl = Get_atan(-value->A.Imag, value->A.Real);
 8000e40:	ed4e 7a01 	vstr	s15, [lr, #-4]
		angle_f += 360;
 8000e44:	bf48      	it	mi
 8000e46:	ed5f 7a1a 	vldrmi	s15, [pc, #-104]	; 8000de0 <uPMU_Process_Mode+0xac>

		out_sum->V.Absl += result->V.Absl;
 8000e4a:	ed13 8a04 	vldr	s16, [r3, #-16]
		out_sum->A.Absl += result->A.Absl;
 8000e4e:	ed53 6a02 	vldr	s13, [r3, #-8]
		angle_f += 360;
 8000e52:	bf48      	it	mi
 8000e54:	ee78 8aa7 	vaddmi.f32	s17, s17, s15
	if(angle_f < 0){
 8000e58:	eeb5 7ac0 	vcmpe.f32	s14, #0.0

		out_sum->V.Angl += Adjust_Angle(result->V.Angl  * DEGREE);
 8000e5c:	ed53 7a03 	vldr	s15, [r3, #-12]
	if(angle_f < 0){
 8000e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		out_sum->V.Angl += Adjust_Angle(result->V.Angl  * DEGREE);
 8000e64:	ee77 8aa8 	vadd.f32	s17, s15, s17
		angle_f += 360;
 8000e68:	bf48      	it	mi
 8000e6a:	ed5f 7a23 	vldrmi	s15, [pc, #-140]	; 8000de0 <uPMU_Process_Mode+0xac>
		out_sum->V.Angl += Adjust_Angle(result->V.Angl  * DEGREE);
 8000e6e:	ed43 8a03 	vstr	s17, [r3, #-12]
		angle_f += 360;
 8000e72:	bf48      	it	mi
 8000e74:	ee37 7a27 	vaddmi.f32	s14, s14, s15
		out_sum->A.Angl += Adjust_Angle(result->A.Angl  * DEGREE);
 8000e78:	ed53 7a01 	vldr	s15, [r3, #-4]
		out_sum->V.Absl += result->V.Absl;
 8000e7c:	ee78 5a25 	vadd.f32	s11, s16, s11
		out_sum->A.Absl += result->A.Absl;
 8000e80:	ee36 6a86 	vadd.f32	s12, s13, s12
		out_sum->A.Angl += Adjust_Angle(result->A.Angl  * DEGREE);
 8000e84:	ee37 7a87 	vadd.f32	s14, s15, s14
	for(uint8_t i = ADC_CHANNELn; i-- ;  ++value, ++data, ++data_0, ++result, ++out_sum){
 8000e88:	3004      	adds	r0, #4
 8000e8a:	4540      	cmp	r0, r8
		out_sum->V.Absl += result->V.Absl;
 8000e8c:	ed43 5a04 	vstr	s11, [r3, #-16]
		out_sum->A.Absl += result->A.Absl;
 8000e90:	ed03 6a02 	vstr	s12, [r3, #-8]
		out_sum->A.Angl += Adjust_Angle(result->A.Angl  * DEGREE);
 8000e94:	ed03 7a01 	vstr	s14, [r3, #-4]
 8000e98:	f102 0210 	add.w	r2, r2, #16
 8000e9c:	f10c 0c04 	add.w	ip, ip, #4
 8000ea0:	f10e 0e10 	add.w	lr, lr, #16
 8000ea4:	f103 0310 	add.w	r3, r3, #16
	for(uint8_t i = ADC_CHANNELn; i-- ;  ++value, ++data, ++data_0, ++result, ++out_sum){
 8000ea8:	f000 81aa 	beq.w	8001200 <uPMU_Process_Mode+0x4cc>
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000eac:	8807      	ldrh	r7, [r0, #0]
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000eae:	8844      	ldrh	r4, [r0, #2]
		value->V.Imag += ((data->V - data_0->V) * sin_f);
 8000eb0:	8806      	ldrh	r6, [r0, #0]
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000eb2:	f93c bc04 	ldrsh.w	fp, [ip, #-4]
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000eb6:	8845      	ldrh	r5, [r0, #2]
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000eb8:	f93c ac02 	ldrsh.w	sl, [ip, #-2]
		value->V.Imag += ((data->V - data_0->V) * sin_f);
 8000ebc:	ed52 8a03 	vldr	s17, [r2, #-12]
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000ec0:	ed52 6a01 	vldr	s13, [r2, #-4]
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000ec4:	ed12 9a04 	vldr	s18, [r2, #-16]
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000ec8:	ed12 7a02 	vldr	s14, [r2, #-8]
		value->V.Imag += ((data->V - data_0->V) * sin_f);
 8000ecc:	b236      	sxth	r6, r6
 8000ece:	eba6 060b 	sub.w	r6, r6, fp
 8000ed2:	ee07 6a90 	vmov	s15, r6
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000ed6:	b22d      	sxth	r5, r5
 8000ed8:	eba5 050a 	sub.w	r5, r5, sl
		value->V.Imag += ((data->V - data_0->V) * sin_f);
 8000edc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000ee0:	b23f      	sxth	r7, r7
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000ee2:	ee07 5a90 	vmov	s15, r5
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000ee6:	b224      	sxth	r4, r4
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000ee8:	eba7 050b 	sub.w	r5, r7, fp
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000eec:	eba4 040a 	sub.w	r4, r4, sl
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000ef0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000ef4:	ee06 5a10 	vmov	s12, r5
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000ef8:	ee07 4a90 	vmov	s15, r4
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000efc:	eee4 6aa5 	vfma.f32	s13, s9, s11
		value->V.Imag += ((data->V - data_0->V) * sin_f);
 8000f00:	eee4 8a88 	vfma.f32	s17, s9, s16
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000f04:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000f0c:	eea5 9a06 	vfma.f32	s18, s10, s12
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000f10:	eea5 7a27 	vfma.f32	s14, s10, s15
		result->V.Absl = (value->V.Real * value->V.Real + value->V.Imag * value->V.Imag) * FACTOR;
 8000f14:	ee68 5aa8 	vmul.f32	s11, s17, s17
		result->A.Absl = (value->A.Real * value->A.Real + value->A.Imag * value->A.Imag) * FACTOR;
 8000f18:	ee26 6aa6 	vmul.f32	s12, s13, s13
		result->V.Absl = (value->V.Real * value->V.Real + value->V.Imag * value->V.Imag) * FACTOR;
 8000f1c:	eee9 5a09 	vfma.f32	s11, s18, s18
		result->A.Absl = (value->A.Real * value->A.Real + value->A.Imag * value->A.Imag) * FACTOR;
 8000f20:	eea7 6a07 	vfma.f32	s12, s14, s14
		result->V.Absl = (value->V.Real * value->V.Real + value->V.Imag * value->V.Imag) * FACTOR;
 8000f24:	ee65 5a84 	vmul.f32	s11, s11, s8
		result->A.Absl = (value->A.Real * value->A.Real + value->A.Imag * value->A.Imag) * FACTOR;
 8000f28:	ee26 6a04 	vmul.f32	s12, s12, s8
	if (x == 0){
 8000f2c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8000f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		value->V.Imag += ((data->V - data_0->V) * sin_f);
 8000f34:	ed42 8a03 	vstr	s17, [r2, #-12]
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000f38:	ed02 9a04 	vstr	s18, [r2, #-16]
		result->V.Absl = (value->V.Real * value->V.Real + value->V.Imag * value->V.Imag) * FACTOR;
 8000f3c:	ed4e 5a04 	vstr	s11, [lr, #-16]
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000f40:	ed42 6a01 	vstr	s13, [r2, #-4]
		result->A.Absl = (value->A.Real * value->A.Real + value->A.Imag * value->A.Imag) * FACTOR;
 8000f44:	ed0e 6a02 	vstr	s12, [lr, #-8]
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000f48:	ed02 7a02 	vstr	s14, [r2, #-8]
	if (x == 0){
 8000f4c:	f43f af58 	beq.w	8000e00 <uPMU_Process_Mode+0xcc>
		result->V.Angl = Get_atan(-value->V.Imag, value->V.Real);
 8000f50:	eeb1 8a68 	vneg.f32	s16, s17
		float taylor = y / x;
 8000f54:	eec8 7a09 	vdiv.f32	s15, s16, s18
		if(taylor > 1){
 8000f58:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8000f5c:	eef0 7ae7 	vabs.f32	s15, s15
 8000f60:	eef4 7ac8 	vcmpe.f32	s15, s16
 8000f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f68:	f340 8183 	ble.w	8001272 <uPMU_Process_Mode+0x53e>
			taylor = 1 / taylor;
 8000f6c:	eec8 7a27 	vdiv.f32	s15, s16, s15
 8000f70:	2503      	movs	r5, #3
			flag = 1;
 8000f72:	2401      	movs	r4, #1
		if(taylor > 0.5){
 8000f74:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8000f78:	eef4 7ac8 	vcmpe.f32	s15, s16
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	dd0a      	ble.n	8000f98 <uPMU_Process_Mode+0x264>
			taylor = (TAN_1 - taylor) / (1 + TAN_1 * taylor);
 8000f82:	ed1f 8a68 	vldr	s16, [pc, #-416]	; 8000de4 <uPMU_Process_Mode+0xb0>
 8000f86:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8000f8a:	eee7 9a88 	vfma.f32	s19, s15, s16
			flag = flag + 2;
 8000f8e:	462c      	mov	r4, r5
			taylor = (TAN_1 - taylor) / (1 + TAN_1 * taylor);
 8000f90:	ee38 8a67 	vsub.f32	s16, s16, s15
 8000f94:	eec8 7a29 	vdiv.f32	s15, s16, s19
		if(flag >= 2){
 8000f98:	2c01      	cmp	r4, #1
		float step = -taylor * taylor;
 8000f9a:	ee27 8ae7 	vnmul.f32	s16, s15, s15
			temp  = temp * step * TAN_F[i];
 8000f9e:	ee67 aa80 	vmul.f32	s21, s15, s0
 8000fa2:	ee28 ca20 	vmul.f32	s24, s16, s1
 8000fa6:	ee6a aa88 	vmul.f32	s21, s21, s16
 8000faa:	ee68 ba01 	vmul.f32	s23, s16, s2
 8000fae:	ee2c ca2a 	vmul.f32	s24, s24, s21
			angle = angle + temp;
 8000fb2:	ee77 7aaa 	vadd.f32	s15, s15, s21
			temp  = temp * step * TAN_F[i];
 8000fb6:	ee6b ba8c 	vmul.f32	s23, s23, s24
 8000fba:	ee68 aa21 	vmul.f32	s21, s16, s3
			angle = angle + temp;
 8000fbe:	ee77 7a8c 	vadd.f32	s15, s15, s24
			temp  = temp * step * TAN_F[i];
 8000fc2:	ee6a aaab 	vmul.f32	s21, s21, s23
 8000fc6:	ee28 ca02 	vmul.f32	s24, s16, s4
			angle = angle + temp;
 8000fca:	ee77 7aab 	vadd.f32	s15, s15, s23
			temp  = temp * step * TAN_F[i];
 8000fce:	ee2c ca2a 	vmul.f32	s24, s24, s21
 8000fd2:	ee68 ba22 	vmul.f32	s23, s16, s5
			angle = angle + temp;
 8000fd6:	ee77 7aaa 	vadd.f32	s15, s15, s21
			temp  = temp * step * TAN_F[i];
 8000fda:	ed5f aa7d 	vldr	s21, [pc, #-500]	; 8000de8 <uPMU_Process_Mode+0xb4>
 8000fde:	ed1f aa7d 	vldr	s20, [pc, #-500]	; 8000dec <uPMU_Process_Mode+0xb8>
 8000fe2:	ed5f 9a7c 	vldr	s19, [pc, #-496]	; 8000df4 <uPMU_Process_Mode+0xc0>
			angle = angle + temp;
 8000fe6:	ed1f ba7e 	vldr	s22, [pc, #-504]	; 8000df0 <uPMU_Process_Mode+0xbc>
			temp  = temp * step * TAN_F[i];
 8000fea:	ee6b ba8c 	vmul.f32	s23, s23, s24
 8000fee:	ee68 aa2a 	vmul.f32	s21, s16, s21
			angle = angle + temp;
 8000ff2:	ee77 7a8c 	vadd.f32	s15, s15, s24
			temp  = temp * step * TAN_F[i];
 8000ff6:	ee6a aaab 	vmul.f32	s21, s21, s23
 8000ffa:	ee28 aa0a 	vmul.f32	s20, s16, s20
			angle = angle + temp;
 8000ffe:	ee77 7aab 	vadd.f32	s15, s15, s23
			temp  = temp * step * TAN_F[i];
 8001002:	ee2a aa2a 	vmul.f32	s20, s20, s21
 8001006:	ee68 9a29 	vmul.f32	s19, s16, s19
			angle = angle + temp;
 800100a:	ee77 7aaa 	vadd.f32	s15, s15, s21
			temp  = temp * step * TAN_F[i];
 800100e:	ee69 9a8a 	vmul.f32	s19, s19, s20
			angle = angle + temp;
 8001012:	ee77 7a8a 	vadd.f32	s15, s15, s20
 8001016:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800101a:	ee77 7aa9 	vadd.f32	s15, s15, s19
 800101e:	eee8 7a29 	vfma.f32	s15, s16, s19
		if(flag >= 2){
 8001022:	d905      	bls.n	8001030 <uPMU_Process_Mode+0x2fc>
			angle = 1 - angle;
 8001024:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
			flag = flag - 2;
 8001028:	3c02      	subs	r4, #2
			angle = 1 - angle;
 800102a:	ee78 7a67 	vsub.f32	s15, s16, s15
			flag = flag - 2;
 800102e:	b2e4      	uxtb	r4, r4
		if(flag == 1){
 8001030:	2c01      	cmp	r4, #1
			angle = PI_2 - angle;
 8001032:	bf08      	it	eq
 8001034:	ed1f 8a8f 	vldreq	s16, [pc, #-572]	; 8000dfc <uPMU_Process_Mode+0xc8>
	if(x < 0){
 8001038:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
			angle = PI_2 - angle;
 800103c:	bf08      	it	eq
 800103e:	ee78 7a67 	vsubeq.f32	s15, s16, s15
	if(x < 0){
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001046:	f140 80c1 	bpl.w	80011cc <uPMU_Process_Mode+0x498>
			return (angle - PI);
 800104a:	ed1f 8a95 	vldr	s16, [pc, #-596]	; 8000df8 <uPMU_Process_Mode+0xc4>
		if(y < 0){
 800104e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			return (angle - PI);
 8001056:	bfcc      	ite	gt
 8001058:	ee77 7ac8 	vsubgt.f32	s15, s15, s16
			return (PI - angle);
 800105c:	ee78 7a67 	vsuble.f32	s15, s16, s15
 8001060:	f44f 74b4 	mov.w	r4, #360	; 0x168
 8001064:	ee27 9a83 	vmul.f32	s18, s15, s6
 8001068:	ee29 8a23 	vmul.f32	s16, s18, s7
	if (x == 0){
 800106c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8001070:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8001074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001078:	ee18 5a10 	vmov	r5, s16
 800107c:	fb04 f505 	mul.w	r5, r4, r5
 8001080:	ee08 5a90 	vmov	s17, r5
 8001084:	eeb8 8ae8 	vcvt.f32.s32	s16, s17
		result->V.Angl = Get_atan(-value->V.Imag, value->V.Real);
 8001088:	ed4e 7a03 	vstr	s15, [lr, #-12]
 800108c:	ee79 8a48 	vsub.f32	s17, s18, s16
	if (x == 0){
 8001090:	f43f aec8 	beq.w	8000e24 <uPMU_Process_Mode+0xf0>
		result->A.Angl = Get_atan(-value->A.Imag, value->A.Real);
 8001094:	eeb1 8a66 	vneg.f32	s16, s13
		float taylor = y / x;
 8001098:	eec8 7a07 	vdiv.f32	s15, s16, s14
		if(taylor > 1){
 800109c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80010a0:	eef0 7ae7 	vabs.f32	s15, s15
 80010a4:	eef4 7ac8 	vcmpe.f32	s15, s16
 80010a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ac:	f340 80de 	ble.w	800126c <uPMU_Process_Mode+0x538>
			taylor = 1 / taylor;
 80010b0:	eec8 7a27 	vdiv.f32	s15, s16, s15
 80010b4:	2503      	movs	r5, #3
			flag = 1;
 80010b6:	2401      	movs	r4, #1
		if(taylor > 0.5){
 80010b8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80010bc:	eef4 7ac8 	vcmpe.f32	s15, s16
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	dd0a      	ble.n	80010dc <uPMU_Process_Mode+0x3a8>
			taylor = (TAN_1 - taylor) / (1 + TAN_1 * taylor);
 80010c6:	ed1f 8ab9 	vldr	s16, [pc, #-740]	; 8000de4 <uPMU_Process_Mode+0xb0>
 80010ca:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80010ce:	eea7 9a88 	vfma.f32	s18, s15, s16
			flag = flag + 2;
 80010d2:	462c      	mov	r4, r5
			taylor = (TAN_1 - taylor) / (1 + TAN_1 * taylor);
 80010d4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80010d8:	eec8 7a09 	vdiv.f32	s15, s16, s18
		if(flag >= 2){
 80010dc:	2c01      	cmp	r4, #1
		float step = -taylor * taylor;
 80010de:	ee27 8ae7 	vnmul.f32	s16, s15, s15
			temp  = temp * step * TAN_F[i];
 80010e2:	ee27 aa80 	vmul.f32	s20, s15, s0
 80010e6:	ee68 ba20 	vmul.f32	s23, s16, s1
 80010ea:	ee2a aa08 	vmul.f32	s20, s20, s16
 80010ee:	ee28 ba01 	vmul.f32	s22, s16, s2
 80010f2:	ee6b ba8a 	vmul.f32	s23, s23, s20
			angle = angle + temp;
 80010f6:	ee77 7a8a 	vadd.f32	s15, s15, s20
			temp  = temp * step * TAN_F[i];
 80010fa:	ee2b ba2b 	vmul.f32	s22, s22, s23
 80010fe:	ee28 aa21 	vmul.f32	s20, s16, s3
			angle = angle + temp;
 8001102:	ee77 7aab 	vadd.f32	s15, s15, s23
			temp  = temp * step * TAN_F[i];
 8001106:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800110a:	ee68 ba02 	vmul.f32	s23, s16, s4
			angle = angle + temp;
 800110e:	ee77 7a8b 	vadd.f32	s15, s15, s22
			temp  = temp * step * TAN_F[i];
 8001112:	ee6b ba8a 	vmul.f32	s23, s23, s20
 8001116:	ee28 ba22 	vmul.f32	s22, s16, s5
			angle = angle + temp;
 800111a:	ee77 7a8a 	vadd.f32	s15, s15, s20
			temp  = temp * step * TAN_F[i];
 800111e:	ed1f aace 	vldr	s20, [pc, #-824]	; 8000de8 <uPMU_Process_Mode+0xb4>
 8001122:	ed5f 9ace 	vldr	s19, [pc, #-824]	; 8000dec <uPMU_Process_Mode+0xb8>
 8001126:	ed1f 9acd 	vldr	s18, [pc, #-820]	; 8000df4 <uPMU_Process_Mode+0xc0>
			angle = angle + temp;
 800112a:	ed5f aacf 	vldr	s21, [pc, #-828]	; 8000df0 <uPMU_Process_Mode+0xbc>
			temp  = temp * step * TAN_F[i];
 800112e:	ee2b ba2b 	vmul.f32	s22, s22, s23
 8001132:	ee28 aa0a 	vmul.f32	s20, s16, s20
			angle = angle + temp;
 8001136:	ee77 7aab 	vadd.f32	s15, s15, s23
			temp  = temp * step * TAN_F[i];
 800113a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800113e:	ee68 9a29 	vmul.f32	s19, s16, s19
			angle = angle + temp;
 8001142:	ee77 7a8b 	vadd.f32	s15, s15, s22
			temp  = temp * step * TAN_F[i];
 8001146:	ee69 9a8a 	vmul.f32	s19, s19, s20
 800114a:	ee28 9a09 	vmul.f32	s18, s16, s18
			angle = angle + temp;
 800114e:	ee77 7a8a 	vadd.f32	s15, s15, s20
			temp  = temp * step * TAN_F[i];
 8001152:	ee29 9a29 	vmul.f32	s18, s18, s19
			angle = angle + temp;
 8001156:	ee77 7aa9 	vadd.f32	s15, s15, s19
 800115a:	ee28 8a2a 	vmul.f32	s16, s16, s21
 800115e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8001162:	eee8 7a09 	vfma.f32	s15, s16, s18
		if(flag >= 2){
 8001166:	d905      	bls.n	8001174 <uPMU_Process_Mode+0x440>
			angle = 1 - angle;
 8001168:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
			flag = flag - 2;
 800116c:	3c02      	subs	r4, #2
			angle = 1 - angle;
 800116e:	ee78 7a67 	vsub.f32	s15, s16, s15
			flag = flag - 2;
 8001172:	b2e4      	uxtb	r4, r4
		if(flag == 1){
 8001174:	2c01      	cmp	r4, #1
			angle = PI_2 - angle;
 8001176:	bf08      	it	eq
 8001178:	ed1f 8ae0 	vldreq	s16, [pc, #-896]	; 8000dfc <uPMU_Process_Mode+0xc8>
	if(x < 0){
 800117c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
			angle = PI_2 - angle;
 8001180:	bf08      	it	eq
 8001182:	ee78 7a67 	vsubeq.f32	s15, s16, s15
	if(x < 0){
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	d52d      	bpl.n	80011e8 <uPMU_Process_Mode+0x4b4>
		if(y < 0){
 800118c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
			return (angle - PI);
 8001190:	ed1f 7ae7 	vldr	s14, [pc, #-924]	; 8000df8 <uPMU_Process_Mode+0xc4>
		if(y < 0){
 8001194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			return (angle - PI);
 8001198:	bfcc      	ite	gt
 800119a:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
			return (PI - angle);
 800119e:	ee77 7a67 	vsuble.f32	s15, s14, s15
 80011a2:	f44f 74b4 	mov.w	r4, #360	; 0x168
 80011a6:	ee67 6a83 	vmul.f32	s13, s15, s6
 80011aa:	ee26 7aa3 	vmul.f32	s14, s13, s7
 80011ae:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80011b2:	ee17 5a10 	vmov	r5, s14
 80011b6:	fb04 f505 	mul.w	r5, r4, r5
 80011ba:	ee07 5a10 	vmov	s14, r5
 80011be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80011c2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80011c6:	e637      	b.n	8000e38 <uPMU_Process_Mode+0x104>
		angle = PI_2 * (y != 0);
 80011c8:	ed5f 7af4 	vldr	s15, [pc, #-976]	; 8000dfc <uPMU_Process_Mode+0xc8>
	}else if(y < 0){
 80011cc:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80011d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		return (-angle);
 80011d4:	bfc8      	it	gt
 80011d6:	eef1 7a67 	vneggt.f32	s15, s15
 80011da:	ee27 9a83 	vmul.f32	s18, s15, s6
 80011de:	f44f 74b4 	mov.w	r4, #360	; 0x168
 80011e2:	e741      	b.n	8001068 <uPMU_Process_Mode+0x334>
		angle = PI_2 * (y != 0);
 80011e4:	eddf 7a24 	vldr	s15, [pc, #144]	; 8001278 <uPMU_Process_Mode+0x544>
	}else if(y < 0){
 80011e8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		return (-angle);
 80011f0:	bfc8      	it	gt
 80011f2:	eef1 7a67 	vneggt.f32	s15, s15
 80011f6:	ee67 6a83 	vmul.f32	s13, s15, s6
 80011fa:	f44f 74b4 	mov.w	r4, #360	; 0x168
 80011fe:	e7d4      	b.n	80011aa <uPMU_Process_Mode+0x476>
//		out_sum->V.Angl += result->V.Angl;
//		out_sum->A.Angl += result->A.Angl;

	}

    float b_1 = sample * Delta_t;
 8001200:	ee07 1a90 	vmov	s15, r1
    float b_2 = b_1 * b_1;
    //float J0 = mat_i[0] + mat_i[1] * b_1 + mat_i[2] * b_2;
    float J1 = mat_i[3] + mat_i[4] * b_1 + mat_i[5] * b_2;
    float J2 = mat_i[6] + mat_i[7] * b_1 + mat_i[8] * b_2;
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <uPMU_Process_Mode+0x548>)
    float b_1 = sample * Delta_t;
 8001206:	eddf 2a1e 	vldr	s5, [pc, #120]	; 8001280 <uPMU_Process_Mode+0x54c>
    float J1 = mat_i[3] + mat_i[4] * b_1 + mat_i[5] * b_2;
 800120a:	edd3 3a04 	vldr	s7, [r3, #16]
 800120e:	ed93 7a03 	vldr	s14, [r3, #12]
    float J2 = mat_i[6] + mat_i[7] * b_1 + mat_i[8] * b_2;
 8001212:	ed93 3a07 	vldr	s6, [r3, #28]
 8001216:	edd3 6a06 	vldr	s13, [r3, #24]
    float J1 = mat_i[3] + mat_i[4] * b_1 + mat_i[5] * b_2;
 800121a:	edd3 4a05 	vldr	s9, [r3, #20]
    float J2 = mat_i[6] + mat_i[7] * b_1 + mat_i[8] * b_2;
 800121e:	ed93 4a08 	vldr	s8, [r3, #32]

    SUM_F.Absl += (result_0->V.Angl * J1);
 8001222:	4a18      	ldr	r2, [pc, #96]	; (8001284 <uPMU_Process_Mode+0x550>)
 8001224:	ed99 5a01 	vldr	s10, [r9, #4]
    SUM_F.Angl += (result_0->V.Angl * J2);
 8001228:	edd2 5a01 	vldr	s11, [r2, #4]
    SUM_F.Absl += (result_0->V.Angl * J1);
 800122c:	ed92 6a00 	vldr	s12, [r2]
    float b_1 = sample * Delta_t;
 8001230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
//	SUM_F.Absl += (angle * J1);
//	SUM_F.Angl += (angle * J2);


	//time -= SysTick->VAL;
}
 8001234:	ecbd 8b0a 	vpop	{d8-d12}
    float b_1 = sample * Delta_t;
 8001238:	ee67 7aa2 	vmul.f32	s15, s15, s5
    float J1 = mat_i[3] + mat_i[4] * b_1 + mat_i[5] * b_2;
 800123c:	eea7 7aa3 	vfma.f32	s14, s15, s7
    float J2 = mat_i[6] + mat_i[7] * b_1 + mat_i[8] * b_2;
 8001240:	eee7 6a83 	vfma.f32	s13, s15, s6
    float b_2 = b_1 * b_1;
 8001244:	ee67 7aa7 	vmul.f32	s15, s15, s15
    float J1 = mat_i[3] + mat_i[4] * b_1 + mat_i[5] * b_2;
 8001248:	eea7 7aa4 	vfma.f32	s14, s15, s9
    float J2 = mat_i[6] + mat_i[7] * b_1 + mat_i[8] * b_2;
 800124c:	eee7 6a84 	vfma.f32	s13, s15, s8
    float J1 = mat_i[3] + mat_i[4] * b_1 + mat_i[5] * b_2;
 8001250:	eef0 7a47 	vmov.f32	s15, s14
    SUM_F.Angl += (result_0->V.Angl * J2);
 8001254:	eeb0 7a65 	vmov.f32	s14, s11
 8001258:	eea6 7a85 	vfma.f32	s14, s13, s10
    SUM_F.Absl += (result_0->V.Angl * J1);
 800125c:	eea7 6a85 	vfma.f32	s12, s15, s10
    SUM_F.Angl += (result_0->V.Angl * J2);
 8001260:	ed82 7a01 	vstr	s14, [r2, #4]
    SUM_F.Absl += (result_0->V.Angl * J1);
 8001264:	ed82 6a00 	vstr	s12, [r2]
}
 8001268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(taylor > 1){
 800126c:	2502      	movs	r5, #2
		uint8_t flag = 0;
 800126e:	2400      	movs	r4, #0
 8001270:	e722      	b.n	80010b8 <uPMU_Process_Mode+0x384>
		if(taylor > 1){
 8001272:	2502      	movs	r5, #2
		uint8_t flag = 0;
 8001274:	2400      	movs	r4, #0
 8001276:	e67d      	b.n	8000f74 <uPMU_Process_Mode+0x240>
 8001278:	3fc90fdb 	.word	0x3fc90fdb
 800127c:	200150d8 	.word	0x200150d8
 8001280:	3823d70a 	.word	0x3823d70a
 8001284:	20015080 	.word	0x20015080

08001288 <uPMU_Get_Result>:
	OUTPUT_Typedef* out_sum = SUM_PHASOR;
	OUTPUT_Typedef* out     = OUT_PHASOR;

	for(uint8_t i = ADC_CHANNELn; i-- ; ++out, ++out_sum){

		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001288:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <uPMU_Get_Result+0x158>)
 800128a:	eddf 7a56 	vldr	s15, [pc, #344]	; 80013e4 <uPMU_Get_Result+0x15c>
 800128e:	ed93 0a00 	vldr	s0, [r3]
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 8001292:	edd3 0a02 	vldr	s1, [r3, #8]

		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001296:	edd3 1a01 	vldr	s3, [r3, #4]
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 800129a:	edd3 2a03 	vldr	s5, [r3, #12]
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800129e:	ed93 7a06 	vldr	s14, [r3, #24]
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80012a2:	edd3 3a05 	vldr	s7, [r3, #20]
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80012a6:	ed93 4a07 	vldr	s8, [r3, #28]
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80012aa:	ed93 3a04 	vldr	s6, [r3, #16]
 80012ae:	edd3 4a08 	vldr	s9, [r3, #32]
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80012b2:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80012b6:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80012ba:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80012be:	494a      	ldr	r1, [pc, #296]	; (80013e8 <uPMU_Get_Result+0x160>)

		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}};

	}

	OUT_F.Angl  = SUM_F.Angl / PI;
 80012c0:	484a      	ldr	r0, [pc, #296]	; (80013ec <uPMU_Get_Result+0x164>)
	OUT_F.Absl  = FREQUENCY + SUM_F.Absl / PI2 + OUT_F.Angl * Freq_t;
 80012c2:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 80013f0 <uPMU_Get_Result+0x168>
 80012c6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80013f4 <uPMU_Get_Result+0x16c>
	OUT_F.Angl  = SUM_F.Angl / PI;
 80012ca:	ed9f 2a4b 	vldr	s4, [pc, #300]	; 80013f8 <uPMU_Get_Result+0x170>
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80012ce:	ee61 1aa7 	vmul.f32	s3, s3, s15
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80012d2:	ee62 2aa7 	vmul.f32	s5, s5, s15
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80012d6:	ee23 3a27 	vmul.f32	s6, s6, s15
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80012da:	ee27 7a27 	vmul.f32	s14, s14, s15
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80012de:	ee63 3aa7 	vmul.f32	s7, s7, s15
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80012e2:	ee24 4a27 	vmul.f32	s8, s8, s15
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80012e6:	ee64 4aa7 	vmul.f32	s9, s9, s15
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80012ea:	ee25 5a27 	vmul.f32	s10, s10, s15
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80012ee:	ee65 5aa7 	vmul.f32	s11, s11, s15
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80012f2:	ee26 6a27 	vmul.f32	s12, s12, s15
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80012f6:	ee20 0a27 	vmul.f32	s0, s0, s15
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80012fa:	ee60 0aa7 	vmul.f32	s1, s1, s15
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}};
 80012fe:	2200      	movs	r2, #0
void uPMU_Get_Result(void){
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001302:	edc1 1a01 	vstr	s3, [r1, #4]
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001306:	edc1 2a03 	vstr	s5, [r1, #12]
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 800130a:	ed81 3a04 	vstr	s6, [r1, #16]
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800130e:	ed81 7a06 	vstr	s14, [r1, #24]
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001312:	edc1 3a05 	vstr	s7, [r1, #20]
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001316:	ed81 4a07 	vstr	s8, [r1, #28]
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 800131a:	edc1 4a08 	vstr	s9, [r1, #32]
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800131e:	ed81 5a0a 	vstr	s10, [r1, #40]	; 0x28
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001322:	edc1 5a09 	vstr	s11, [r1, #36]	; 0x24
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001326:	ed81 6a0b 	vstr	s12, [r1, #44]	; 0x2c
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 800132a:	ed81 0a00 	vstr	s0, [r1]
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800132e:	edc1 0a02 	vstr	s1, [r1, #8]
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}};
 8001332:	615a      	str	r2, [r3, #20]
 8001334:	619a      	str	r2, [r3, #24]
 8001336:	61da      	str	r2, [r3, #28]
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
	OUT_F.Absl  = FREQUENCY + SUM_F.Absl / PI2 + OUT_F.Angl * Freq_t;
 8001342:	edd0 1a00 	vldr	s3, [r0]
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001346:	edd3 2a0c 	vldr	s5, [r3, #48]	; 0x30
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800134a:	ed93 3a0e 	vldr	s6, [r3, #56]	; 0x38
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 800134e:	edd3 3a0d 	vldr	s7, [r3, #52]	; 0x34
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001352:	ed93 4a0f 	vldr	s8, [r3, #60]	; 0x3c
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001356:	edd3 4a10 	vldr	s9, [r3, #64]	; 0x40
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800135a:	ed93 5a12 	vldr	s10, [r3, #72]	; 0x48
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 800135e:	edd3 5a11 	vldr	s11, [r3, #68]	; 0x44
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001362:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
	OUT_F.Angl  = SUM_F.Angl / PI;
 8001366:	ed90 7a01 	vldr	s14, [r0, #4]
 800136a:	f8df e090 	ldr.w	lr, [pc, #144]	; 80013fc <uPMU_Get_Result+0x174>
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}};
 800136e:	621a      	str	r2, [r3, #32]
	OUT_F.Absl  = FREQUENCY + SUM_F.Absl / PI2 + OUT_F.Angl * Freq_t;
 8001370:	eee1 6a81 	vfma.f32	s13, s3, s2

	SUM_F.Absl = 0;
 8001374:	2700      	movs	r7, #0
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}};
 8001376:	631a      	str	r2, [r3, #48]	; 0x30
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001378:	ee62 2aa7 	vmul.f32	s5, s5, s15
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800137c:	ee23 3a27 	vmul.f32	s6, s6, s15
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001380:	ee63 3aa7 	vmul.f32	s7, s7, s15
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001384:	ee24 4a27 	vmul.f32	s8, s8, s15
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001388:	ee64 4aa7 	vmul.f32	s9, s9, s15
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800138c:	ee25 5a27 	vmul.f32	s10, s10, s15
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001390:	ee65 5aa7 	vmul.f32	s11, s11, s15
	OUT_F.Angl  = SUM_F.Angl / PI;
 8001394:	ee27 7a02 	vmul.f32	s14, s14, s4
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001398:	ee66 7a27 	vmul.f32	s15, s12, s15
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 800139c:	edc1 2a0c 	vstr	s5, [r1, #48]	; 0x30
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80013a0:	ed81 3a0e 	vstr	s6, [r1, #56]	; 0x38
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80013a4:	edc1 3a0d 	vstr	s7, [r1, #52]	; 0x34
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80013a8:	ed81 4a0f 	vstr	s8, [r1, #60]	; 0x3c
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80013ac:	edc1 4a10 	vstr	s9, [r1, #64]	; 0x40
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}};
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80013b2:	ed81 5a12 	vstr	s10, [r1, #72]	; 0x48
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80013b6:	edc1 5a11 	vstr	s11, [r1, #68]	; 0x44
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80013ba:	edc1 7a13 	vstr	s15, [r1, #76]	; 0x4c
	OUT_F.Absl  = FREQUENCY + SUM_F.Absl / PI2 + OUT_F.Angl * Freq_t;
 80013be:	edce 6a00 	vstr	s13, [lr]
	OUT_F.Angl  = SUM_F.Angl / PI;
 80013c2:	ed8e 7a01 	vstr	s14, [lr, #4]
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}};
 80013c6:	625a      	str	r2, [r3, #36]	; 0x24
 80013c8:	629a      	str	r2, [r3, #40]	; 0x28
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80013cc:	635a      	str	r2, [r3, #52]	; 0x34
 80013ce:	639a      	str	r2, [r3, #56]	; 0x38
 80013d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80013d2:	645a      	str	r2, [r3, #68]	; 0x44
 80013d4:	649a      	str	r2, [r3, #72]	; 0x48
 80013d6:	64da      	str	r2, [r3, #76]	; 0x4c
	SUM_F.Absl = 0;
 80013d8:	6007      	str	r7, [r0, #0]
	SUM_F.Angl = 0;
 80013da:	6047      	str	r7, [r0, #4]
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	bf00      	nop
 80013e0:	20015088 	.word	0x20015088
 80013e4:	3b000000 	.word	0x3b000000
 80013e8:	2001a1d8 	.word	0x2001a1d8
 80013ec:	20015080 	.word	0x20015080
 80013f0:	3e22f983 	.word	0x3e22f983
 80013f4:	42480000 	.word	0x42480000
 80013f8:	3ea2f983 	.word	0x3ea2f983
 80013fc:	2001a23c 	.word	0x2001a23c

08001400 <uPMU_EXTIx_Init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** EXTI Configuration function **/
void uPMU_EXTIx_Init(uint8_t port, uint16_t bit, EXTI_Trigger_TypeDef triger){

	/* Check if the bit number if available*/
	if(bit > 22)
 8001400:	2916      	cmp	r1, #22
 8001402:	d830      	bhi.n	8001466 <uPMU_EXTIx_Init+0x66>
void uPMU_EXTIx_Init(uint8_t port, uint16_t bit, EXTI_Trigger_TypeDef triger){
 8001404:	b470      	push	{r4, r5, r6}
		return;

	/* Enable SYSCFG clock */
	RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 8001406:	4d2a      	ldr	r5, [pc, #168]	; (80014b0 <uPMU_EXTIx_Init+0xb0>)
 8001408:	088b      	lsrs	r3, r1, #2
 800140a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001412:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001416:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800141a:	646c      	str	r4, [r5, #68]	; 0x44

	/* Map port bit to EXTx */
	SYSCFG->EXTICR[bit >> 0x02] &= ~((uint32_t)0x0F) << (4 * (bit & 0x03));
 800141c:	f001 0403 	and.w	r4, r1, #3
 8001420:	689e      	ldr	r6, [r3, #8]
 8001422:	00a4      	lsls	r4, r4, #2
 8001424:	f06f 050f 	mvn.w	r5, #15
 8001428:	40a5      	lsls	r5, r4
 800142a:	4035      	ands	r5, r6
 800142c:	609d      	str	r5, [r3, #8]
	SYSCFG->EXTICR[bit >> 0x02] |=  ((uint32_t)port) << (4 * (bit & 0x03));
 800142e:	689d      	ldr	r5, [r3, #8]
 8001430:	fa00 f404 	lsl.w	r4, r0, r4
 8001434:	432c      	orrs	r4, r5

	switch(triger){
 8001436:	2a01      	cmp	r2, #1
	SYSCFG->EXTICR[bit >> 0x02] |=  ((uint32_t)port) << (4 * (bit & 0x03));
 8001438:	609c      	str	r4, [r3, #8]
	switch(triger){
 800143a:	d021      	beq.n	8001480 <uPMU_EXTIx_Init+0x80>
 800143c:	d32b      	bcc.n	8001496 <uPMU_EXTIx_Init+0x96>
 800143e:	2a02      	cmp	r2, #2
 8001440:	d012      	beq.n	8001468 <uPMU_EXTIx_Init+0x68>
 8001442:	2201      	movs	r2, #1
 8001444:	fa02 f101 	lsl.w	r1, r2, r1
 8001448:	43cc      	mvns	r4, r1
		EXTI->FTSR |=  (uint32_t)(1U << bit);
		break;
	}

	/* Clear Registers */
	EXTI->IMR &= ~(uint32_t)(1U << bit);
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <uPMU_EXTIx_Init+0xb4>)
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	4020      	ands	r0, r4
 8001450:	6018      	str	r0, [r3, #0]
	EXTI->EMR &= ~(uint32_t)(1U << bit);
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4022      	ands	r2, r4
 8001456:	605a      	str	r2, [r3, #4]

	/* Enable interrupt line */
	EXTI->IMR |=  (uint32_t)(1U << bit);
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
	/* Enable event line */
	EXTI->EMR |=  (uint32_t)(1U << bit);

}
 800145e:	bc70      	pop	{r4, r5, r6}
	EXTI->EMR |=  (uint32_t)(1U << bit);
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	4311      	orrs	r1, r2
 8001464:	6059      	str	r1, [r3, #4]
}
 8001466:	4770      	bx	lr
		EXTI->RTSR |=  (uint32_t)(1U << bit);
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <uPMU_EXTIx_Init+0xb4>)
 800146a:	2001      	movs	r0, #1
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	fa00 f101 	lsl.w	r1, r0, r1
 8001472:	430a      	orrs	r2, r1
 8001474:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |=  (uint32_t)(1U << bit);
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	430a      	orrs	r2, r1
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	43cc      	mvns	r4, r1
		break;
 800147e:	e7e4      	b.n	800144a <uPMU_EXTIx_Init+0x4a>
		EXTI->RTSR &= ~(uint32_t)(1U << bit);
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <uPMU_EXTIx_Init+0xb4>)
 8001482:	fa02 f101 	lsl.w	r1, r2, r1
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	43cc      	mvns	r4, r1
 800148a:	4022      	ands	r2, r4
 800148c:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |=  (uint32_t)(1U << bit);
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	430a      	orrs	r2, r1
 8001492:	60da      	str	r2, [r3, #12]
		break;
 8001494:	e7d9      	b.n	800144a <uPMU_EXTIx_Init+0x4a>
		EXTI->FTSR &= ~(uint32_t)(1U << bit);
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <uPMU_EXTIx_Init+0xb4>)
 8001498:	2201      	movs	r2, #1
 800149a:	fa02 f101 	lsl.w	r1, r2, r1
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	43cc      	mvns	r4, r1
 80014a2:	4022      	ands	r2, r4
 80014a4:	60da      	str	r2, [r3, #12]
		EXTI->RTSR |=  (uint32_t)(1U << bit);
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	609a      	str	r2, [r3, #8]
		break;
 80014ac:	e7cd      	b.n	800144a <uPMU_EXTIx_Init+0x4a>
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40013c00 	.word	0x40013c00

080014b8 <EXTI_Line_Check>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Check if the EXCTI Line is Pending and IT **/
FlagStatus EXTI_Line_Check(uint32_t EXTI_Line) {

	if ((EXTI->PR & EXTI_Line) && (EXTI->IMR & EXTI_Line)){
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <EXTI_Line_Check+0x18>)
 80014ba:	6953      	ldr	r3, [r2, #20]
 80014bc:	4003      	ands	r3, r0
 80014be:	d005      	beq.n	80014cc <EXTI_Line_Check+0x14>
 80014c0:	6813      	ldr	r3, [r2, #0]
 80014c2:	4218      	tst	r0, r3
 80014c4:	bf14      	ite	ne
 80014c6:	2001      	movne	r0, #1
 80014c8:	2000      	moveq	r0, #0
 80014ca:	4770      	bx	lr
 80014cc:	4618      	mov	r0, r3
		return SET;
	}
	return RESET;
}
 80014ce:	4770      	bx	lr
 80014d0:	40013c00 	.word	0x40013c00

080014d4 <EXTI_Clear_PendingBit>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Clear EXTI Pending Bit **/
void EXTI_Clear_PendingBit(uint32_t EXTI_Line){

	  EXTI->PR = EXTI_Line;
 80014d4:	4b01      	ldr	r3, [pc, #4]	; (80014dc <EXTI_Clear_PendingBit+0x8>)
 80014d6:	6158      	str	r0, [r3, #20]
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40013c00 	.word	0x40013c00

080014e0 <EXTI_Set_PendingBit>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Set EXTI Pending Bit **/
void EXTI_Set_PendingBit(uint32_t EXTI_Line){

	EXTI->SWIER |= EXTI_Line;
 80014e0:	4a02      	ldr	r2, [pc, #8]	; (80014ec <EXTI_Set_PendingBit+0xc>)
 80014e2:	6913      	ldr	r3, [r2, #16]
 80014e4:	4318      	orrs	r0, r3
 80014e6:	6110      	str	r0, [r2, #16]
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40013c00 	.word	0x40013c00

080014f0 <uPMU_GPIO_Init>:
#include "gpio.h"
#include "exti.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** uPM GPIO initialization  **/
void uPMU_GPIO_Init(void){
 80014f0:	b570      	push	{r4, r5, r6, lr}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Data Port Configuration function **/
void Data_Port_Init(GPIO_TypeDef* GPIOx, uint32_t RCC_AHB1ENR_GPIOx){

	/* Enable AHB1ENR GPIOx clock */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOx;
 80014f2:	4d76      	ldr	r5, [pc, #472]	; (80016cc <uPMU_GPIO_Init+0x1dc>)
 80014f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	632b      	str	r3, [r5, #48]	; 0x30
	asm("NOP");		/* wait to Enable */
 80014fc:	bf00      	nop

	/* GPIO Mode as Input*/
	GPIOx->MODER  = Mode_IN_ALL;
 80014fe:	4b74      	ldr	r3, [pc, #464]	; (80016d0 <uPMU_GPIO_Init+0x1e0>)
uint8_t GPIO_Bit_Init_Input(GPIO_TypeDef* GPIOx, uint32_t bit){

	bit *= 2;			/* wait to Enable*/

	/* GPIO Mode as Input*/
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 8001500:	4c74      	ldr	r4, [pc, #464]	; (80016d4 <uPMU_GPIO_Init+0x1e4>)
	GPIOx->MODER  = Mode_IN_ALL;
 8001502:	2600      	movs	r6, #0
 8001504:	601e      	str	r6, [r3, #0]
	GPIOx->PUPDR  = PUPDR_NO_ALL;
 8001506:	60de      	str	r6, [r3, #12]
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOx;
 8001508:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	632b      	str	r3, [r5, #48]	; 0x30
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001516:	6023      	str	r3, [r4, #0]
	GPIOx->MODER   |=  (Mode_IN		<<bit);
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	6023      	str	r3, [r4, #0]
	/* GPIO no Pull */
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 800151c:	68e3      	ldr	r3, [r4, #12]
 800151e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001522:	60e3      	str	r3, [r4, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 8001524:	68e3      	ldr	r3, [r4, #12]
 8001526:	60e3      	str	r3, [r4, #12]
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800152e:	6023      	str	r3, [r4, #0]
	GPIOx->MODER   |=  (Mode_IN		<<bit);
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	6023      	str	r3, [r4, #0]
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 8001534:	68e3      	ldr	r3, [r4, #12]
 8001536:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800153a:	60e3      	str	r3, [r4, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 800153c:	68e3      	ldr	r3, [r4, #12]
 800153e:	60e3      	str	r3, [r4, #12]
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001546:	6023      	str	r3, [r4, #0]
	GPIOx->MODER   |=  (Mode_IN		<<bit);
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	6023      	str	r3, [r4, #0]
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 800154c:	68e3      	ldr	r3, [r4, #12]
 800154e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001552:	60e3      	str	r3, [r4, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 8001554:	68e3      	ldr	r3, [r4, #12]
 8001556:	60e3      	str	r3, [r4, #12]
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800155e:	6023      	str	r3, [r4, #0]
	GPIOx->MODER   |=  (Mode_IN		<<bit);
 8001560:	6823      	ldr	r3, [r4, #0]
 8001562:	6023      	str	r3, [r4, #0]
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 8001564:	68e3      	ldr	r3, [r4, #12]
 8001566:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800156a:	60e3      	str	r3, [r4, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 800156c:	68e3      	ldr	r3, [r4, #12]
 800156e:	60e3      	str	r3, [r4, #12]
	uPMU_EXTIx_Init(EXTI_CONT_Port_Source, CON_ABUSY, EXTI_Falling);
 8001570:	2201      	movs	r2, #1
 8001572:	210b      	movs	r1, #11
 8001574:	2004      	movs	r0, #4
 8001576:	f7ff ff43 	bl	8001400 <uPMU_EXTIx_Init>
	uPMU_EXTIx_Init(EXTI_CONT_Port_Source, CON_BBUSY, EXTI_Falling);
 800157a:	2201      	movs	r2, #1
 800157c:	210c      	movs	r1, #12
 800157e:	2004      	movs	r0, #4
 8001580:	f7ff ff3e 	bl	8001400 <uPMU_EXTIx_Init>
uint8_t GPIO_Bit_Init_Output(GPIO_TypeDef* GPIOx, uint32_t bit){

	bit *= 2;			/* wait to Enable*/

	/* GPIO Mode as Output*/
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 8001584:	6823      	ldr	r3, [r4, #0]
	GPIOx->MODER   |=  (Mode_OUT	<<bit);

	/* GPIO Output Type as Push Pull */
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 8001586:	4a54      	ldr	r2, [pc, #336]	; (80016d8 <uPMU_GPIO_Init+0x1e8>)
 8001588:	4954      	ldr	r1, [pc, #336]	; (80016dc <uPMU_GPIO_Init+0x1ec>)
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 800158a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800158e:	6023      	str	r3, [r4, #0]
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001596:	6023      	str	r3, [r4, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 8001598:	6016      	str	r6, [r2, #0]

	/* GPIO Output Very Speed = 50MHz*/
	GPIOx->OSPEEDR |= (OSPEEDR_VERY	<<bit);
 800159a:	68a3      	ldr	r3, [r4, #8]
 800159c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80015a0:	60a3      	str	r3, [r4, #8]
	/* Check APB2ENR clock is Enable */
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 80015a2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80015a4:	0458      	lsls	r0, r3, #17
 80015a6:	d40b      	bmi.n	80015c0 <uPMU_GPIO_Init+0xd0>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 80015a8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 80015aa:	4a4d      	ldr	r2, [pc, #308]	; (80016e0 <uPMU_GPIO_Init+0x1f0>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b0:	646b      	str	r3, [r5, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 80015b2:	6a13      	ldr	r3, [r2, #32]
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 80015ba:	6a13      	ldr	r3, [r2, #32]
 80015bc:	05db      	lsls	r3, r3, #23
 80015be:	d5fc      	bpl.n	80015ba <uPMU_GPIO_Init+0xca>
	}

	/* GPIO no Pull */
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 80015c0:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <uPMU_GPIO_Init+0x1e4>)
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 80015c2:	4842      	ldr	r0, [pc, #264]	; (80016cc <uPMU_GPIO_Init+0x1dc>)
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80015ca:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 80015cc:	68da      	ldr	r2, [r3, #12]
 80015ce:	60da      	str	r2, [r3, #12]
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80015d6:	601a      	str	r2, [r3, #0]
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 80015d8:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 80015da:	310a      	adds	r1, #10
 80015dc:	0089      	lsls	r1, r1, #2
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 80015de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 80015e2:	2400      	movs	r4, #0
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 80015e4:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 80015e6:	600c      	str	r4, [r1, #0]
	GPIOx->OSPEEDR |= (OSPEEDR_VERY	<<bit);
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 80015ee:	609a      	str	r2, [r3, #8]
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 80015f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80015f2:	045a      	lsls	r2, r3, #17
 80015f4:	d40b      	bmi.n	800160e <uPMU_GPIO_Init+0x11e>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 80015f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 80015f8:	4a39      	ldr	r2, [pc, #228]	; (80016e0 <uPMU_GPIO_Init+0x1f0>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 80015fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fe:	6443      	str	r3, [r0, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001600:	6a13      	ldr	r3, [r2, #32]
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 8001608:	6a13      	ldr	r3, [r2, #32]
 800160a:	05dd      	lsls	r5, r3, #23
 800160c:	d5fc      	bpl.n	8001608 <uPMU_GPIO_Init+0x118>
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 800160e:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <uPMU_GPIO_Init+0x1e4>)
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 8001610:	482e      	ldr	r0, [pc, #184]	; (80016cc <uPMU_GPIO_Init+0x1dc>)
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001618:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	60da      	str	r2, [r3, #12]
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8001624:	601a      	str	r2, [r3, #0]
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 8001626:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 8001628:	2400      	movs	r4, #0
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 800162a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800162e:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 8001630:	614c      	str	r4, [r1, #20]
	GPIOx->OSPEEDR |= (OSPEEDR_VERY	<<bit);
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001638:	609a      	str	r2, [r3, #8]
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 800163a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800163c:	045e      	lsls	r6, r3, #17
 800163e:	d40b      	bmi.n	8001658 <uPMU_GPIO_Init+0x168>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 8001640:	6c43      	ldr	r3, [r0, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001642:	4a27      	ldr	r2, [pc, #156]	; (80016e0 <uPMU_GPIO_Init+0x1f0>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 8001644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001648:	6443      	str	r3, [r0, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 800164a:	6a13      	ldr	r3, [r2, #32]
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 8001652:	6a13      	ldr	r3, [r2, #32]
 8001654:	05d8      	lsls	r0, r3, #23
 8001656:	d5fc      	bpl.n	8001652 <uPMU_GPIO_Init+0x162>
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <uPMU_GPIO_Init+0x1e4>)
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 800165a:	481c      	ldr	r0, [pc, #112]	; (80016cc <uPMU_GPIO_Init+0x1dc>)
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8001662:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	60da      	str	r2, [r3, #12]
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800166e:	601a      	str	r2, [r3, #0]
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 8001670:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 8001672:	2400      	movs	r4, #0
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 8001674:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001678:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 800167a:	f841 4c04 	str.w	r4, [r1, #-4]
	GPIOx->OSPEEDR |= (OSPEEDR_VERY	<<bit);
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8001684:	609a      	str	r2, [r3, #8]
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 8001686:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001688:	045c      	lsls	r4, r3, #17
 800168a:	d40b      	bmi.n	80016a4 <uPMU_GPIO_Init+0x1b4>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 800168c:	6c43      	ldr	r3, [r0, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <uPMU_GPIO_Init+0x1f0>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6443      	str	r3, [r0, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001696:	6a13      	ldr	r3, [r2, #32]
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 800169e:	6a13      	ldr	r3, [r2, #32]
 80016a0:	05db      	lsls	r3, r3, #23
 80016a2:	d5fc      	bpl.n	800169e <uPMU_GPIO_Init+0x1ae>
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <uPMU_GPIO_Init+0x1e4>)
	ODR_CON_RST_BITBAND = SET;
 80016a6:	490f      	ldr	r1, [pc, #60]	; (80016e4 <uPMU_GPIO_Init+0x1f4>)
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 80016a8:	68da      	ldr	r2, [r3, #12]
	ODR_CON_CV_BITBAND = SET;
 80016aa:	4d0f      	ldr	r5, [pc, #60]	; (80016e8 <uPMU_GPIO_Init+0x1f8>)
	ODR_CON_CS_BITBAND = SET;
 80016ac:	4c0f      	ldr	r4, [pc, #60]	; (80016ec <uPMU_GPIO_Init+0x1fc>)
	ODR_CON_SE_BITBAND = SET;
 80016ae:	4810      	ldr	r0, [pc, #64]	; (80016f0 <uPMU_GPIO_Init+0x200>)
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 80016b0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80016b4:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	60da      	str	r2, [r3, #12]
	ODR_CON_CV_BITBAND = SET;
 80016ba:	2301      	movs	r3, #1
	ODR_CON_RST_BITBAND = RESET;
 80016bc:	2200      	movs	r2, #0
	ODR_CON_CV_BITBAND = SET;
 80016be:	602b      	str	r3, [r5, #0]
	ODR_CON_RST_BITBAND = SET;
 80016c0:	600b      	str	r3, [r1, #0]
	ODR_CON_CS_BITBAND = SET;
 80016c2:	6023      	str	r3, [r4, #0]
	ODR_CON_SE_BITBAND = SET;
 80016c4:	6003      	str	r3, [r0, #0]
	ODR_CON_RST_BITBAND = RESET;
 80016c6:	600a      	str	r2, [r1, #0]
}
 80016c8:	bd70      	pop	{r4, r5, r6, pc}
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020800 	.word	0x40020800
 80016d4:	40021000 	.word	0x40021000
 80016d8:	424200a0 	.word	0x424200a0
 80016dc:	10908020 	.word	0x10908020
 80016e0:	40013800 	.word	0x40013800
 80016e4:	424202bc 	.word	0x424202bc
 80016e8:	424202a4 	.word	0x424202a4
 80016ec:	424202a0 	.word	0x424202a0
 80016f0:	424202a8 	.word	0x424202a8

080016f4 <OnBoard_Init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** LED initialization function **/
void GPIO_Init_LED(Led_TypeDef led){

	/* Enable AHB1ENR clock */
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 80016f4:	4967      	ldr	r1, [pc, #412]	; (8001894 <OnBoard_Init+0x1a0>)
	led *= 2;		/* wait to Enable */

	/* Configure the GPIO_LED pin */
	/* GPIO Mode as Output*/
	LED_GPIO_PORT->MODER   &= ~(Mode_AN		<<led);
 80016f6:	4b68      	ldr	r3, [pc, #416]	; (8001898 <OnBoard_Init+0x1a4>)
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 80016f8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);

	/* GPIO Output Type as Push Pull */
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 80016fa:	4868      	ldr	r0, [pc, #416]	; (800189c <OnBoard_Init+0x1a8>)
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 80016fc:	f042 0208 	orr.w	r2, r2, #8
void OnBoard_Init(void){
 8001700:	b510      	push	{r4, lr}
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 8001702:	630a      	str	r2, [r1, #48]	; 0x30
	LED_GPIO_PORT->MODER   &= ~(Mode_AN		<<led);
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800170a:	601a      	str	r2, [r3, #0]
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 800170c:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 800170e:	2400      	movs	r4, #0
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 8001710:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001714:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 8001716:	6004      	str	r4, [r0, #0]

	/* GPIO Output Very Speed = 50MHz*/
	LED_GPIO_PORT->OSPEEDR |= (OSPEEDR_VERY	<<led);
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
 800171e:	609a      	str	r2, [r3, #8]
	/* Check APB2ENR clock is Enable */
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 8001720:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8001722:	045c      	lsls	r4, r3, #17
 8001724:	d40b      	bmi.n	800173e <OnBoard_Init+0x4a>
		/* Enable APB2ENR clock */
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 8001726:	6c4b      	ldr	r3, [r1, #68]	; 0x44
		/* Enable Compensation cell */
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001728:	4a5d      	ldr	r2, [pc, #372]	; (80018a0 <OnBoard_Init+0x1ac>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 800172a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172e:	644b      	str	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001730:	6a13      	ldr	r3, [r2, #32]
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
		/* wait Compensation cell to be Ready */
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 8001738:	6a13      	ldr	r3, [r2, #32]
 800173a:	05d9      	lsls	r1, r3, #23
 800173c:	d5fc      	bpl.n	8001738 <OnBoard_Init+0x44>
	}

	/* GPIO no Pull */
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 800173e:	4b56      	ldr	r3, [pc, #344]	; (8001898 <OnBoard_Init+0x1a4>)
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 8001740:	4954      	ldr	r1, [pc, #336]	; (8001894 <OnBoard_Init+0x1a0>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 8001742:	68da      	ldr	r2, [r3, #12]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 8001744:	4857      	ldr	r0, [pc, #348]	; (80018a4 <OnBoard_Init+0x1b0>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 8001746:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800174a:	60da      	str	r2, [r3, #12]
	LED_GPIO_PORT->PUPDR   |=  (PUPDR_PU		<<led);
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001752:	60da      	str	r2, [r3, #12]
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 8001754:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001756:	f042 0208 	orr.w	r2, r2, #8
 800175a:	630a      	str	r2, [r1, #48]	; 0x30
	LED_GPIO_PORT->MODER   &= ~(Mode_AN		<<led);
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001762:	601a      	str	r2, [r3, #0]
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 8001764:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 8001766:	2400      	movs	r4, #0
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 8001768:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800176c:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 800176e:	6004      	str	r4, [r0, #0]
	LED_GPIO_PORT->OSPEEDR |= (OSPEEDR_VERY	<<led);
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8001776:	609a      	str	r2, [r3, #8]
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 8001778:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800177a:	0458      	lsls	r0, r3, #17
 800177c:	d40b      	bmi.n	8001796 <OnBoard_Init+0xa2>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 800177e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001780:	4a47      	ldr	r2, [pc, #284]	; (80018a0 <OnBoard_Init+0x1ac>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 8001782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001786:	644b      	str	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001788:	6a13      	ldr	r3, [r2, #32]
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 8001790:	6a13      	ldr	r3, [r2, #32]
 8001792:	05dc      	lsls	r4, r3, #23
 8001794:	d5fc      	bpl.n	8001790 <OnBoard_Init+0x9c>
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 8001796:	4b40      	ldr	r3, [pc, #256]	; (8001898 <OnBoard_Init+0x1a4>)
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 8001798:	493e      	ldr	r1, [pc, #248]	; (8001894 <OnBoard_Init+0x1a0>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 800179a:	68da      	ldr	r2, [r3, #12]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 800179c:	4842      	ldr	r0, [pc, #264]	; (80018a8 <OnBoard_Init+0x1b4>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 800179e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017a2:	60da      	str	r2, [r3, #12]
	LED_GPIO_PORT->PUPDR   |=  (PUPDR_PU		<<led);
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80017aa:	60da      	str	r2, [r3, #12]
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 80017ac:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80017ae:	f042 0208 	orr.w	r2, r2, #8
 80017b2:	630a      	str	r2, [r1, #48]	; 0x30
	LED_GPIO_PORT->MODER   &= ~(Mode_AN		<<led);
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017ba:	601a      	str	r2, [r3, #0]
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 80017bc:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 80017be:	2400      	movs	r4, #0
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 80017c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017c4:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 80017c6:	6004      	str	r4, [r0, #0]
	LED_GPIO_PORT->OSPEEDR |= (OSPEEDR_VERY	<<led);
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80017ce:	609a      	str	r2, [r3, #8]
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 80017d0:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80017d2:	045b      	lsls	r3, r3, #17
 80017d4:	d40b      	bmi.n	80017ee <OnBoard_Init+0xfa>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 80017d6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 80017d8:	4a31      	ldr	r2, [pc, #196]	; (80018a0 <OnBoard_Init+0x1ac>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 80017da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017de:	644b      	str	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 80017e0:	6a13      	ldr	r3, [r2, #32]
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 80017e8:	6a13      	ldr	r3, [r2, #32]
 80017ea:	05d9      	lsls	r1, r3, #23
 80017ec:	d5fc      	bpl.n	80017e8 <OnBoard_Init+0xf4>
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <OnBoard_Init+0x1a4>)
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 80017f0:	4928      	ldr	r1, [pc, #160]	; (8001894 <OnBoard_Init+0x1a0>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 80017f2:	68da      	ldr	r2, [r3, #12]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 80017f4:	482d      	ldr	r0, [pc, #180]	; (80018ac <OnBoard_Init+0x1b8>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 80017f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017fa:	60da      	str	r2, [r3, #12]
	LED_GPIO_PORT->PUPDR   |=  (PUPDR_PU		<<led);
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001802:	60da      	str	r2, [r3, #12]
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 8001804:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001806:	f042 0208 	orr.w	r2, r2, #8
 800180a:	630a      	str	r2, [r1, #48]	; 0x30
	LED_GPIO_PORT->MODER   &= ~(Mode_AN		<<led);
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8001812:	601a      	str	r2, [r3, #0]
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 8001814:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 8001816:	2400      	movs	r4, #0
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 8001818:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800181c:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 800181e:	6004      	str	r4, [r0, #0]
	LED_GPIO_PORT->OSPEEDR |= (OSPEEDR_VERY	<<led);
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001826:	609a      	str	r2, [r3, #8]
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 8001828:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800182a:	0458      	lsls	r0, r3, #17
 800182c:	d40b      	bmi.n	8001846 <OnBoard_Init+0x152>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 800182e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001830:	4a1b      	ldr	r2, [pc, #108]	; (80018a0 <OnBoard_Init+0x1ac>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 8001832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001836:	644b      	str	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001838:	6a13      	ldr	r3, [r2, #32]
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 8001840:	6a13      	ldr	r3, [r2, #32]
 8001842:	05db      	lsls	r3, r3, #23
 8001844:	d5fc      	bpl.n	8001840 <OnBoard_Init+0x14c>
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 8001846:	4a14      	ldr	r2, [pc, #80]	; (8001898 <OnBoard_Init+0x1a4>)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** BUTTON initialization function **/
void GPIO_Init_BUTTON(Button_TypeDef button, uint16_t IRQx){

	/* Enable BUTTON_GPIO_PORT AHB1ENR Clock */
	RCC->AHB1ENR   |= BUTTON_GPIO_RCC_AHB1ENR ;
 8001848:	4812      	ldr	r0, [pc, #72]	; (8001894 <OnBoard_Init+0x1a0>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 800184a:	68d1      	ldr	r1, [r2, #12]
	button *= 2;			/* wait to Enable*/

	/* GPIO Mode as Input*/
	BUTTON_GPIO_PORT->MODER   &= ~(Mode_AN		<<button);
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <OnBoard_Init+0x1bc>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 800184e:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8001852:	60d1      	str	r1, [r2, #12]
	LED_GPIO_PORT->PUPDR   |=  (PUPDR_PU		<<led);
 8001854:	68d1      	ldr	r1, [r2, #12]
 8001856:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800185a:	60d1      	str	r1, [r2, #12]
	RCC->AHB1ENR   |= BUTTON_GPIO_RCC_AHB1ENR ;
 800185c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	6302      	str	r2, [r0, #48]	; 0x30
	BUTTON_GPIO_PORT->MODER   &= ~(Mode_AN		<<button);
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	f022 0203 	bic.w	r2, r2, #3
 800186a:	601a      	str	r2, [r3, #0]
	BUTTON_GPIO_PORT->MODER   |=  (Mode_IN		<<button);
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	601a      	str	r2, [r3, #0]
	/* GPIO no Pull */
	BUTTON_GPIO_PORT->PUPDR   &= ~(PUPDR_RST	<<button);
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	f022 0203 	bic.w	r2, r2, #3
 8001876:	60da      	str	r2, [r3, #12]
	BUTTON_GPIO_PORT->PUPDR   |=  (PUPDR_NO		<<button);
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	60da      	str	r2, [r3, #12]

	/*get back button pin number*/
	button /= 2;

	/* EXTI0 Configuration */
	uPMU_EXTIx_Init(SYSCFG_EXTICR1_EXTI0_PA, button, EXTI_Rising);
 800187c:	2200      	movs	r2, #0
 800187e:	4611      	mov	r1, r2
 8001880:	4610      	mov	r0, r2
 8001882:	f7ff fdbd 	bl	8001400 <uPMU_EXTIx_Init>
	uPMU_EXTIx_Init(SYSCFG_EXTICR1_EXTI1_PA, uPMU_PROCESS, EXTI_Rising);
 8001886:	2200      	movs	r2, #0
 8001888:	4610      	mov	r0, r2
 800188a:	2101      	movs	r1, #1
}
 800188c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uPMU_EXTIx_Init(SYSCFG_EXTICR1_EXTI1_PA, uPMU_PROCESS, EXTI_Rising);
 8001890:	f7ff bdb6 	b.w	8001400 <uPMU_EXTIx_Init>
 8001894:	40023800 	.word	0x40023800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	424180b4 	.word	0x424180b4
 80018a0:	40013800 	.word	0x40013800
 80018a4:	424180b0 	.word	0x424180b0
 80018a8:	424180b8 	.word	0x424180b8
 80018ac:	424180bc 	.word	0x424180bc
 80018b0:	40020000 	.word	0x40020000

080018b4 <GPIO_Write_LED>:
	switch(led){
 80018b4:	380c      	subs	r0, #12
 80018b6:	2803      	cmp	r0, #3
 80018b8:	d805      	bhi.n	80018c6 <GPIO_Write_LED+0x12>
 80018ba:	e8df f000 	tbb	[pc, r0]
 80018be:	080b      	.short	0x080b
 80018c0:	0205      	.short	0x0205
		ODR_LED6_BITBAND = state;
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <GPIO_Write_LED+0x28>)
 80018c4:	6019      	str	r1, [r3, #0]
 80018c6:	4770      	bx	lr
		ODR_LED5_BITBAND = state;
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <GPIO_Write_LED+0x2c>)
 80018ca:	6019      	str	r1, [r3, #0]
		break;
 80018cc:	4770      	bx	lr
		ODR_LED3_BITBAND = state;
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <GPIO_Write_LED+0x30>)
 80018d0:	6019      	str	r1, [r3, #0]
		break;
 80018d2:	4770      	bx	lr
		ODR_LED4_BITBAND = state;
 80018d4:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <GPIO_Write_LED+0x34>)
 80018d6:	6019      	str	r1, [r3, #0]
		break;
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	424182bc 	.word	0x424182bc
 80018e0:	424182b8 	.word	0x424182b8
 80018e4:	424182b4 	.word	0x424182b4
 80018e8:	424182b0 	.word	0x424182b0

080018ec <uPMU_Set_Error_Code>:
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Set Error Code **/
void uPMU_Set_Error_Code(uint8_t code){
	Error_Code = code;
 80018ec:	4b01      	ldr	r3, [pc, #4]	; (80018f4 <uPMU_Set_Error_Code+0x8>)
 80018ee:	7018      	strb	r0, [r3, #0]
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200150fc 	.word	0x200150fc

080018f8 <uPMU_NVIC_Init>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4818      	ldr	r0, [pc, #96]	; (800195c <uPMU_NVIC_Init+0x64>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80018fa:	4919      	ldr	r1, [pc, #100]	; (8001960 <uPMU_NVIC_Init+0x68>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	68c2      	ldr	r2, [r0, #12]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <uPMU_NVIC_Init+0x6c>)
/* Includes */
#include "nvic.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** NVIC IRQs initialization function **/
void uPMU_NVIC_Init(void){
 8001900:	b5f0      	push	{r4, r5, r6, r7, lr}
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8001902:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8001906:	4022      	ands	r2, r4
  reg_value  =  (reg_value                                 |
 8001908:	4311      	orrs	r1, r2
  SCB->AIRCR =  reg_value;
 800190a:	60c1      	str	r1, [r0, #12]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800190c:	2240      	movs	r2, #64	; 0x40
 800190e:	2610      	movs	r6, #16
 8001910:	2520      	movs	r5, #32
 8001912:	2430      	movs	r4, #48	; 0x30
 8001914:	21e0      	movs	r1, #224	; 0xe0
 8001916:	f04f 0e50 	mov.w	lr, #80	; 0x50
 800191a:	27f0      	movs	r7, #240	; 0xf0
 800191c:	f883 6328 	strb.w	r6, [r3, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001920:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001924:	f883 5338 	strb.w	r5, [r3, #824]	; 0x338
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001928:	f44f 7680 	mov.w	r6, #256	; 0x100
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800192c:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001930:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001934:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001938:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800193c:	f883 e326 	strb.w	lr, [r3, #806]	; 0x326
 8001940:	f883 1306 	strb.w	r1, [r3, #774]	; 0x306
 8001944:	f883 7307 	strb.w	r7, [r3, #775]	; 0x307
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	605e      	str	r6, [r3, #4]
 800194c:	605d      	str	r5, [r3, #4]
 800194e:	601c      	str	r4, [r3, #0]
 8001950:	6018      	str	r0, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	6019      	str	r1, [r3, #0]
 8001958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00
 8001960:	05fa0300 	.word	0x05fa0300
 8001964:	e000e100 	.word	0xe000e100

08001968 <uPMU_Init_Process>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Initialize uPMU Process **/
void uPMU_Init_Process(void){

	LookUp_Init();
 8001968:	f7ff b91a 	b.w	8000ba0 <LookUp_Init>

0800196c <uPMU_AD7606_Reading>:

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** uPMU ADC AD7606 Reading **/
void uPMU_AD7606_Reading(void) {
 800196c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	//uint32_t time = SysTick->VAL;
	GPIO_Write_LED(LED4, High);

	volatile Channel_Typedef* Read = ADC_ARRAY[Read_Buffer    ][SAMPLE];
 8001970:	4d64      	ldr	r5, [pc, #400]	; (8001b04 <uPMU_AD7606_Reading+0x198>)
 8001972:	4e65      	ldr	r6, [pc, #404]	; (8001b08 <uPMU_AD7606_Reading+0x19c>)
		/* Select A_ADC */
		ODR_CON_SE_BITBAND = Low;

		/* Read Port 16bit A_ADC Data */
		old ->V = read->V;
		Read->V = DATA_GPIO_PORT->IDR;
 8001974:	4f65      	ldr	r7, [pc, #404]	; (8001b0c <uPMU_AD7606_Reading+0x1a0>)
	GPIO_Write_LED(LED4, High);
 8001976:	2101      	movs	r1, #1
 8001978:	200c      	movs	r0, #12
 800197a:	f7ff ff9b 	bl	80018b4 <GPIO_Write_LED>
	volatile Channel_Typedef* Read = ADC_ARRAY[Read_Buffer    ][SAMPLE];
 800197e:	7833      	ldrb	r3, [r6, #0]
 8001980:	882a      	ldrh	r2, [r5, #0]
	volatile Channel_Typedef* read = ADC_ARRAY[Read_Buffer ^ 1][SAMPLE];
 8001982:	f896 8000 	ldrb.w	r8, [r6]
 8001986:	882c      	ldrh	r4, [r5, #0]
		ODR_CON_CS_BITBAND = Low;
 8001988:	4961      	ldr	r1, [pc, #388]	; (8001b10 <uPMU_AD7606_Reading+0x1a4>)
		ODR_CON_SE_BITBAND = Low;
 800198a:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8001b18 <uPMU_AD7606_Reading+0x1ac>
	volatile Channel_Typedef* Read = ADC_ARRAY[Read_Buffer    ][SAMPLE];
 800198e:	4861      	ldr	r0, [pc, #388]	; (8001b14 <uPMU_AD7606_Reading+0x1a8>)
		old ->V = read->V;
 8001990:	f8df e188 	ldr.w	lr, [pc, #392]	; 8001b1c <uPMU_AD7606_Reading+0x1b0>
	volatile Channel_Typedef* read = ADC_ARRAY[Read_Buffer ^ 1][SAMPLE];
 8001994:	b2a4      	uxth	r4, r4
 8001996:	f088 0801 	eor.w	r8, r8, #1
 800199a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800199e:	eb08 0988 	add.w	r9, r8, r8, lsl #2
 80019a2:	ea4f 0884 	mov.w	r8, r4, lsl #2
 80019a6:	eb08 28c9 	add.w	r8, r8, r9, lsl #11
		ODR_CON_CS_BITBAND = Low;
 80019aa:	2400      	movs	r4, #0
 80019ac:	600c      	str	r4, [r1, #0]
		ODR_CON_SE_BITBAND = Low;
 80019ae:	f8cc 4000 	str.w	r4, [ip]
		old ->V = read->V;
 80019b2:	f830 9008 	ldrh.w	r9, [r0, r8]
 80019b6:	f8ae 9000 	strh.w	r9, [lr]
	volatile Channel_Typedef* Read = ADC_ARRAY[Read_Buffer    ][SAMPLE];
 80019ba:	b292      	uxth	r2, r2
 80019bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019c0:	eb03 0983 	add.w	r9, r3, r3, lsl #2
 80019c4:	0093      	lsls	r3, r2, #2
		Read->V = DATA_GPIO_PORT->IDR;
 80019c6:	693a      	ldr	r2, [r7, #16]
	volatile Channel_Typedef* Read = ADC_ARRAY[Read_Buffer    ][SAMPLE];
 80019c8:	eb03 23c9 	add.w	r3, r3, r9, lsl #11
		Read->V = DATA_GPIO_PORT->IDR;
 80019cc:	b212      	sxth	r2, r2
 80019ce:	52c2      	strh	r2, [r0, r3]
	volatile Channel_Typedef* read = ADC_ARRAY[Read_Buffer ^ 1][SAMPLE];
 80019d0:	4480      	add	r8, r0

		/* Select B_ADC */
		ODR_CON_SE_BITBAND = High;
 80019d2:	2201      	movs	r2, #1
 80019d4:	f8cc 2000 	str.w	r2, [ip]

		/* Read Port 16bit B_ADC Data */
		old ->A = read->A;
 80019d8:	f8b8 9002 	ldrh.w	r9, [r8, #2]
 80019dc:	f8ae 9002 	strh.w	r9, [lr, #2]
		Read->A = DATA_GPIO_PORT->IDR;
 80019e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
	volatile Channel_Typedef* Read = ADC_ARRAY[Read_Buffer    ][SAMPLE];
 80019e4:	4403      	add	r3, r0
		Read->A = DATA_GPIO_PORT->IDR;
 80019e6:	fa0f f989 	sxth.w	r9, r9
 80019ea:	f8a3 9002 	strh.w	r9, [r3, #2]

		/* End reading rising edge */
		ODR_CON_CS_BITBAND = High;
 80019ee:	600a      	str	r2, [r1, #0]
		ODR_CON_CS_BITBAND = Low;
 80019f0:	600c      	str	r4, [r1, #0]
		ODR_CON_SE_BITBAND = Low;
 80019f2:	f8cc 4000 	str.w	r4, [ip]
		old ->V = read->V;
 80019f6:	f8b8 9004 	ldrh.w	r9, [r8, #4]
 80019fa:	f8ae 9004 	strh.w	r9, [lr, #4]
		Read->V = DATA_GPIO_PORT->IDR;
 80019fe:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8001a02:	fa0f f989 	sxth.w	r9, r9
 8001a06:	f8a3 9004 	strh.w	r9, [r3, #4]
		ODR_CON_SE_BITBAND = High;
 8001a0a:	f8cc 2000 	str.w	r2, [ip]
		old ->A = read->A;
 8001a0e:	f8b8 9006 	ldrh.w	r9, [r8, #6]
 8001a12:	f8ae 9006 	strh.w	r9, [lr, #6]
		Read->A = DATA_GPIO_PORT->IDR;
 8001a16:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8001a1a:	fa0f f989 	sxth.w	r9, r9
 8001a1e:	f8a3 9006 	strh.w	r9, [r3, #6]
		ODR_CON_CS_BITBAND = High;
 8001a22:	600a      	str	r2, [r1, #0]
		ODR_CON_CS_BITBAND = Low;
 8001a24:	600c      	str	r4, [r1, #0]
		ODR_CON_SE_BITBAND = Low;
 8001a26:	f8cc 4000 	str.w	r4, [ip]
		old ->V = read->V;
 8001a2a:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 8001a2e:	f8ae 9008 	strh.w	r9, [lr, #8]
		Read->V = DATA_GPIO_PORT->IDR;
 8001a32:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8001a36:	fa0f f989 	sxth.w	r9, r9
 8001a3a:	f8a3 9008 	strh.w	r9, [r3, #8]
		ODR_CON_SE_BITBAND = High;
 8001a3e:	f8cc 2000 	str.w	r2, [ip]
		old ->A = read->A;
 8001a42:	f8b8 900a 	ldrh.w	r9, [r8, #10]
 8001a46:	f8ae 900a 	strh.w	r9, [lr, #10]
		Read->A = DATA_GPIO_PORT->IDR;
 8001a4a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8001a4e:	fa0f f989 	sxth.w	r9, r9
 8001a52:	f8a3 900a 	strh.w	r9, [r3, #10]
		ODR_CON_CS_BITBAND = High;
 8001a56:	600a      	str	r2, [r1, #0]
		ODR_CON_CS_BITBAND = Low;
 8001a58:	600c      	str	r4, [r1, #0]
		ODR_CON_SE_BITBAND = Low;
 8001a5a:	f8cc 4000 	str.w	r4, [ip]
		old ->V = read->V;
 8001a5e:	f8b8 900c 	ldrh.w	r9, [r8, #12]
 8001a62:	f8ae 900c 	strh.w	r9, [lr, #12]
		Read->V = DATA_GPIO_PORT->IDR;
 8001a66:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8001a6a:	fa0f f989 	sxth.w	r9, r9
 8001a6e:	f8a3 900c 	strh.w	r9, [r3, #12]
		ODR_CON_SE_BITBAND = High;
 8001a72:	f8cc 2000 	str.w	r2, [ip]
		old ->A = read->A;
 8001a76:	f8b8 900e 	ldrh.w	r9, [r8, #14]
 8001a7a:	f8ae 900e 	strh.w	r9, [lr, #14]
		Read->A = DATA_GPIO_PORT->IDR;
 8001a7e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8001a82:	fa0f f989 	sxth.w	r9, r9
 8001a86:	f8a3 900e 	strh.w	r9, [r3, #14]
		ODR_CON_CS_BITBAND = High;
 8001a8a:	600a      	str	r2, [r1, #0]
		ODR_CON_CS_BITBAND = Low;
 8001a8c:	600c      	str	r4, [r1, #0]
		ODR_CON_SE_BITBAND = Low;
 8001a8e:	f8cc 4000 	str.w	r4, [ip]
		old ->V = read->V;
 8001a92:	f8b8 9010 	ldrh.w	r9, [r8, #16]
 8001a96:	f8ae 9010 	strh.w	r9, [lr, #16]
		Read->V = DATA_GPIO_PORT->IDR;
 8001a9a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8001a9e:	fa0f f989 	sxth.w	r9, r9
 8001aa2:	f8a3 9010 	strh.w	r9, [r3, #16]
		ODR_CON_SE_BITBAND = High;
 8001aa6:	f8cc 2000 	str.w	r2, [ip]
		old ->A = read->A;
 8001aaa:	f8b8 c012 	ldrh.w	ip, [r8, #18]
 8001aae:	f8ae c012 	strh.w	ip, [lr, #18]
		Read->A = DATA_GPIO_PORT->IDR;
 8001ab2:	693f      	ldr	r7, [r7, #16]
 8001ab4:	b23f      	sxth	r7, r7
 8001ab6:	825f      	strh	r7, [r3, #18]
		ODR_CON_CS_BITBAND = High;
 8001ab8:	600a      	str	r2, [r1, #0]
//			break;
//		}

	}

	uPMU_Process_Mode(ADC_ARRAY[Read_Buffer][SAMPLE], SAMPLE);
 8001aba:	7833      	ldrb	r3, [r6, #0]
 8001abc:	882a      	ldrh	r2, [r5, #0]
 8001abe:	8829      	ldrh	r1, [r5, #0]
 8001ac0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ac4:	b292      	uxth	r2, r2
 8001ac6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001aca:	02db      	lsls	r3, r3, #11
 8001acc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001ad0:	4418      	add	r0, r3
 8001ad2:	b289      	uxth	r1, r1
 8001ad4:	f7ff f92e 	bl	8000d34 <uPMU_Process_Mode>

	/* Index Increment */
	if((++SAMPLE) >= READ_SAMPLEn){
 8001ad8:	882b      	ldrh	r3, [r5, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae2:	802b      	strh	r3, [r5, #0]
 8001ae4:	d307      	bcc.n	8001af6 <uPMU_AD7606_Reading+0x18a>
		SAMPLE = 0;
 8001ae6:	802c      	strh	r4, [r5, #0]
		Read_Buffer ^= 1;
 8001ae8:	7833      	ldrb	r3, [r6, #0]
		EXTI_Set_PendingBit(uPMU_PROCESS_Line);
 8001aea:	2002      	movs	r0, #2
		Read_Buffer ^= 1;
 8001aec:	f083 0301 	eor.w	r3, r3, #1
 8001af0:	7033      	strb	r3, [r6, #0]
		EXTI_Set_PendingBit(uPMU_PROCESS_Line);
 8001af2:	f7ff fcf5 	bl	80014e0 <EXTI_Set_PendingBit>
	}

	GPIO_Write_LED(LED4, Low);
 8001af6:	2100      	movs	r1, #0
 8001af8:	200c      	movs	r0, #12
	//time -= SysTick->VAL;
}
 8001afa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	GPIO_Write_LED(LED4, Low);
 8001afe:	f7ff bed9 	b.w	80018b4 <GPIO_Write_LED>
 8001b02:	bf00      	nop
 8001b04:	2001a102 	.word	0x2001a102
 8001b08:	2001a100 	.word	0x2001a100
 8001b0c:	40020800 	.word	0x40020800
 8001b10:	424202a0 	.word	0x424202a0
 8001b14:	20015100 	.word	0x20015100
 8001b18:	424202a8 	.word	0x424202a8
 8001b1c:	2001a228 	.word	0x2001a228

08001b20 <uPMU_Str_Data>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** uPMU Data Process **/
void uPMU_Str_Data(void) {
 8001b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** uPMU Data Process **/
void uPMU_Str_Result(const Result_Typedef* out, char** str) {

	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8001b24:	f8df 83e8 	ldr.w	r8, [pc, #1000]	; 8001f10 <uPMU_Str_Data+0x3f0>

	*((*str)++) = (data / 100000) % 10 + '0';
 8001b28:	4ff3      	ldr	r7, [pc, #972]	; (8001ef8 <uPMU_Str_Data+0x3d8>)
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001b2a:	4ef4      	ldr	r6, [pc, #976]	; (8001efc <uPMU_Str_Data+0x3dc>)
	*((*str)++) = (data / 100000) % 10 + '0';
 8001b2c:	4df4      	ldr	r5, [pc, #976]	; (8001f00 <uPMU_Str_Data+0x3e0>)
	*((*str)++) = (data / 1000  ) % 10 + '0';
	*((*str)++) = '.';
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001b2e:	f8df a3e4 	ldr.w	sl, [pc, #996]	; 8001f14 <uPMU_Str_Data+0x3f4>
	*((*str)++) = (data / 100000) % 10 + '0';
 8001b32:	4cf4      	ldr	r4, [pc, #976]	; (8001f04 <uPMU_Str_Data+0x3e4>)
void uPMU_Str_Data(void) {
 8001b34:	b083      	sub	sp, #12
	uPMU_Get_Result();
 8001b36:	f7ff fba7 	bl	8001288 <uPMU_Get_Result>
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8001b3a:	f8d8 0000 	ldr.w	r0, [r8]
 8001b3e:	f7fe fca7 	bl	8000490 <__aeabi_f2d>
 8001b42:	a3eb      	add	r3, pc, #940	; (adr r3, 8001ef0 <uPMU_Str_Data+0x3d0>)
 8001b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b48:	f7fe fb44 	bl	80001d4 <__adddf3>
 8001b4c:	4bee      	ldr	r3, [pc, #952]	; (8001f08 <uPMU_Str_Data+0x3e8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f7fe fcf2 	bl	8000538 <__aeabi_dmul>
 8001b54:	f7fe ffb2 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 8001b58:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001b5a:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8001b5e:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001b62:	4bea      	ldr	r3, [pc, #936]	; (8001f0c <uPMU_Str_Data+0x3ec>)
	*((*str)++) = (data / 100000) % 10 + '0';
 8001b64:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001b66:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8001b6a:	fba5 3201 	umull	r3, r2, r5, r1
 8001b6e:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001b70:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001b74:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 8001b78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001b7c:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 8001b80:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001b84:	fba5 e209 	umull	lr, r2, r5, r9
 8001b88:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001b8a:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001b8e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001b92:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001b96:	fba5 e20c 	umull	lr, r2, r5, ip
 8001b9a:	08d2      	lsrs	r2, r2, #3
 8001b9c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001ba0:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001ba4:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001ba8:	fba5 2e0b 	umull	r2, lr, r5, fp
 8001bac:	ea4f 0ede 	mov.w	lr, lr, lsr #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001bb0:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001bb2:	eb0e 028e 	add.w	r2, lr, lr, lsl #2
 8001bb6:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001bba:	fba5 b203 	umull	fp, r2, r5, r3
 8001bbe:	08d2      	lsrs	r2, r2, #3
 8001bc0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001bc4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8001bc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 100000) % 10 + '0';
 8001bcc:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8001bce:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001bd2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001bd6:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 8001bda:	7021      	strb	r1, [r4, #0]
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001bdc:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8001bde:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001be0:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 8001be4:	f04f 012e 	mov.w	r1, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001be8:	f884 c002 	strb.w	ip, [r4, #2]
	//*((*str)++) = '<';

	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 8001bec:	f8d8 0004 	ldr.w	r0, [r8, #4]
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001bf0:	f884 e004 	strb.w	lr, [r4, #4]
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001bf4:	f884 9001 	strb.w	r9, [r4, #1]
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001bf8:	7162      	strb	r2, [r4, #5]
	*((*str)++) = (data         ) % 10 + '0';
 8001bfa:	71a3      	strb	r3, [r4, #6]
	*((*str)++) = '.';
 8001bfc:	70e1      	strb	r1, [r4, #3]
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 8001bfe:	f7fe fc47 	bl	8000490 <__aeabi_f2d>
 8001c02:	a3bb      	add	r3, pc, #748	; (adr r3, 8001ef0 <uPMU_Str_Data+0x3d0>)
 8001c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c08:	f7fe fae4 	bl	80001d4 <__adddf3>
 8001c0c:	4bbe      	ldr	r3, [pc, #760]	; (8001f08 <uPMU_Str_Data+0x3e8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f7fe fc92 	bl	8000538 <__aeabi_dmul>
 8001c14:	f7fe ff52 	bl	8000abc <__aeabi_d2uiz>

	*((*str)++) = (data / 100000) % 10 + '0';
 8001c18:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001c1a:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8001c1e:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001c22:	4bba      	ldr	r3, [pc, #744]	; (8001f0c <uPMU_Str_Data+0x3ec>)
	*((*str)++) = (data / 100000) % 10 + '0';
 8001c24:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001c26:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8001c2a:	fba5 3201 	umull	r3, r2, r5, r1
 8001c2e:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = '.';
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001c30:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001c34:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 8001c38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001c3c:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 8001c40:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001c44:	fba5 e209 	umull	lr, r2, r5, r9
 8001c48:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001c4a:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001c4e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c52:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001c56:	fba5 e20c 	umull	lr, r2, r5, ip
 8001c5a:	08d2      	lsrs	r2, r2, #3
 8001c5c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c60:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001c64:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001c68:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001c6c:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001c6e:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001c70:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c74:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001c78:	fba5 b203 	umull	fp, r2, r5, r3
 8001c7c:	08d2      	lsrs	r2, r2, #3
 8001c7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001c82:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8001c86:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001c8a:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001c8e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001c92:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8001c96:	f100 0330 	add.w	r3, r0, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001c9a:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 8001c9c:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001c9e:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 8001ca2:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001ca6:	f884 c009 	strb.w	ip, [r4, #9]
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001caa:	f884 e00b 	strb.w	lr, [r4, #11]
	*((*str)++) = '.';
 8001cae:	72a0      	strb	r0, [r4, #10]
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001cb0:	f884 9008 	strb.w	r9, [r4, #8]
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8001cb4:	f8d8 0010 	ldr.w	r0, [r8, #16]
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001cb8:	7322      	strb	r2, [r4, #12]
	*((*str)++) = (data         ) % 10 + '0';
 8001cba:	7363      	strb	r3, [r4, #13]
	*((*str)++) = (data / 100000) % 10 + '0';
 8001cbc:	71e1      	strb	r1, [r4, #7]
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8001cbe:	f7fe fbe7 	bl	8000490 <__aeabi_f2d>
 8001cc2:	a38b      	add	r3, pc, #556	; (adr r3, 8001ef0 <uPMU_Str_Data+0x3d0>)
 8001cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc8:	f7fe fa84 	bl	80001d4 <__adddf3>
 8001ccc:	4b8e      	ldr	r3, [pc, #568]	; (8001f08 <uPMU_Str_Data+0x3e8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f7fe fc32 	bl	8000538 <__aeabi_dmul>
 8001cd4:	f7fe fef2 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 8001cd8:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001cda:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8001cde:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001ce2:	4b8a      	ldr	r3, [pc, #552]	; (8001f0c <uPMU_Str_Data+0x3ec>)
	*((*str)++) = (data / 100000) % 10 + '0';
 8001ce4:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001ce6:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8001cea:	fba5 3201 	umull	r3, r2, r5, r1
 8001cee:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001cf0:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001cf4:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 8001cf8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001cfc:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 8001d00:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001d04:	fba5 e209 	umull	lr, r2, r5, r9
 8001d08:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001d0a:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001d0e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d12:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001d16:	fba5 e20c 	umull	lr, r2, r5, ip
 8001d1a:	08d2      	lsrs	r2, r2, #3
 8001d1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d20:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001d24:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001d28:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001d2c:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001d2e:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001d30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d34:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001d38:	fba5 b203 	umull	fp, r2, r5, r3
 8001d3c:	08d2      	lsrs	r2, r2, #3
 8001d3e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001d42:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8001d46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d4a:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001d4e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001d52:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8001d56:	f100 0330 	add.w	r3, r0, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001d5a:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 8001d5c:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001d5e:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 8001d62:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001d66:	f884 c010 	strb.w	ip, [r4, #16]
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001d6a:	f884 e012 	strb.w	lr, [r4, #18]
	*((*str)++) = '.';
 8001d6e:	7460      	strb	r0, [r4, #17]
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001d70:	f884 900f 	strb.w	r9, [r4, #15]
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 8001d74:	f8d8 0014 	ldr.w	r0, [r8, #20]
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001d78:	74e2      	strb	r2, [r4, #19]
	*((*str)++) = (data         ) % 10 + '0';
 8001d7a:	7523      	strb	r3, [r4, #20]
	*((*str)++) = (data / 100000) % 10 + '0';
 8001d7c:	73a1      	strb	r1, [r4, #14]
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 8001d7e:	f7fe fb87 	bl	8000490 <__aeabi_f2d>
 8001d82:	a35b      	add	r3, pc, #364	; (adr r3, 8001ef0 <uPMU_Str_Data+0x3d0>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	f7fe fa24 	bl	80001d4 <__adddf3>
 8001d8c:	4b5e      	ldr	r3, [pc, #376]	; (8001f08 <uPMU_Str_Data+0x3e8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f7fe fbd2 	bl	8000538 <__aeabi_dmul>
 8001d94:	f7fe fe92 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 8001d98:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001d9a:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8001d9e:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001da2:	4b5a      	ldr	r3, [pc, #360]	; (8001f0c <uPMU_Str_Data+0x3ec>)
	*((*str)++) = (data / 100000) % 10 + '0';
 8001da4:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001da6:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8001daa:	fba5 3201 	umull	r3, r2, r5, r1
 8001dae:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001db0:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001db4:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 8001db8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001dbc:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 8001dc0:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001dc4:	fba5 e209 	umull	lr, r2, r5, r9
 8001dc8:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001dca:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001dce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001dd2:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001dd6:	fba5 e20c 	umull	lr, r2, r5, ip
 8001dda:	08d2      	lsrs	r2, r2, #3
 8001ddc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001de0:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001de4:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001de8:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001dec:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001dee:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001df0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001df4:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001df8:	fba5 b203 	umull	fp, r2, r5, r3
 8001dfc:	08d2      	lsrs	r2, r2, #3
 8001dfe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e02:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8001e06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e0a:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001e0e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001e12:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8001e16:	f100 0330 	add.w	r3, r0, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001e1a:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 8001e1c:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001e1e:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 8001e22:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001e26:	f884 c017 	strb.w	ip, [r4, #23]
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001e2a:	f884 e019 	strb.w	lr, [r4, #25]
	*((*str)++) = '.';
 8001e2e:	7620      	strb	r0, [r4, #24]
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001e30:	f884 9016 	strb.w	r9, [r4, #22]
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8001e34:	f8d8 0020 	ldr.w	r0, [r8, #32]
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001e38:	76a2      	strb	r2, [r4, #26]
	*((*str)++) = (data         ) % 10 + '0';
 8001e3a:	76e3      	strb	r3, [r4, #27]
	*((*str)++) = (data / 100000) % 10 + '0';
 8001e3c:	7561      	strb	r1, [r4, #21]
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8001e3e:	f7fe fb27 	bl	8000490 <__aeabi_f2d>
 8001e42:	a32b      	add	r3, pc, #172	; (adr r3, 8001ef0 <uPMU_Str_Data+0x3d0>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe f9c4 	bl	80001d4 <__adddf3>
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <uPMU_Str_Data+0x3e8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f7fe fb72 	bl	8000538 <__aeabi_dmul>
 8001e54:	f7fe fe32 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 8001e58:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001e5a:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8001e5e:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <uPMU_Str_Data+0x3ec>)
	*((*str)++) = (data / 100000) % 10 + '0';
 8001e64:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001e66:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8001e6a:	fba5 3201 	umull	r3, r2, r5, r1
 8001e6e:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001e70:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001e74:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 8001e78:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001e7c:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 8001e80:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001e84:	fba5 e209 	umull	lr, r2, r5, r9
 8001e88:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001e8a:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001e8e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001e92:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001e96:	fba5 e20c 	umull	lr, r2, r5, ip
 8001e9a:	08d2      	lsrs	r2, r2, #3
 8001e9c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ea0:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001ea4:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001ea8:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001eac:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001eae:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001eb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001eb4:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001eb8:	fba5 b203 	umull	fp, r2, r5, r3
 8001ebc:	08d2      	lsrs	r2, r2, #3
 8001ebe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ec2:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8001ec6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001eca:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001ece:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001ed2:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001ed6:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8001ed8:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 8001eda:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001edc:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 8001ee0:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001ee4:	f884 c01e 	strb.w	ip, [r4, #30]
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001ee8:	f884 e020 	strb.w	lr, [r4, #32]
 8001eec:	e014      	b.n	8001f18 <uPMU_Str_Data+0x3f8>
 8001eee:	bf00      	nop
 8001ef0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ef4:	3f40624d 	.word	0x3f40624d
 8001ef8:	0a7c5ac5 	.word	0x0a7c5ac5
 8001efc:	d1b71759 	.word	0xd1b71759
 8001f00:	cccccccd 	.word	0xcccccccd
 8001f04:	2001a138 	.word	0x2001a138
 8001f08:	408f4000 	.word	0x408f4000
 8001f0c:	10624dd3 	.word	0x10624dd3
 8001f10:	2001a1d8 	.word	0x2001a1d8
 8001f14:	51eb851f 	.word	0x51eb851f
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001f18:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
	*((*str)++) = (data         ) % 10 + '0';
 8001f1c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	*((*str)++) = (data / 100000) % 10 + '0';
 8001f20:	7721      	strb	r1, [r4, #28]
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001f22:	f884 901d 	strb.w	r9, [r4, #29]
	*((*str)++) = '.';
 8001f26:	77e0      	strb	r0, [r4, #31]
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 8001f28:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
 8001f2c:	f7fe fab0 	bl	8000490 <__aeabi_f2d>
 8001f30:	a3f7      	add	r3, pc, #988	; (adr r3, 8002310 <uPMU_Str_Data+0x7f0>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe f94d 	bl	80001d4 <__adddf3>
 8001f3a:	4bf7      	ldr	r3, [pc, #988]	; (8002318 <uPMU_Str_Data+0x7f8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f7fe fafb 	bl	8000538 <__aeabi_dmul>
 8001f42:	f7fe fdbb 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 8001f46:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001f48:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8001f4c:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001f50:	4bf2      	ldr	r3, [pc, #968]	; (800231c <uPMU_Str_Data+0x7fc>)
	*((*str)++) = (data / 100000) % 10 + '0';
 8001f52:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001f54:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8001f58:	fba5 3201 	umull	r3, r2, r5, r1
 8001f5c:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001f5e:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001f62:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 8001f66:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001f6a:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 8001f6e:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001f72:	fba5 e209 	umull	lr, r2, r5, r9
 8001f76:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001f78:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001f7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001f80:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001f84:	fba5 e20c 	umull	lr, r2, r5, ip
 8001f88:	08d2      	lsrs	r2, r2, #3
 8001f8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001f8e:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001f92:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001f96:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001f9a:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001f9c:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001f9e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001fa2:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001fa6:	fba5 b203 	umull	fp, r2, r5, r3
 8001faa:	08d2      	lsrs	r2, r2, #3
 8001fac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001fb0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8001fb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001fb8:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001fbc:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001fc0:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8001fc4:	f100 0330 	add.w	r3, r0, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001fc8:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 8001fca:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001fcc:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 8001fd0:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8001fd4:	f884 c025 	strb.w	ip, [r4, #37]	; 0x25
	*((*str)++) = (data / 100   ) % 10 + '0';
 8001fd8:	f884 e027 	strb.w	lr, [r4, #39]	; 0x27
	*((*str)++) = '.';
 8001fdc:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8001fe0:	f884 9024 	strb.w	r9, [r4, #36]	; 0x24
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8001fe4:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8001fe8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	*((*str)++) = (data         ) % 10 + '0';
 8001fec:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	*((*str)++) = (data / 100000) % 10 + '0';
 8001ff0:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8001ff4:	f7fe fa4c 	bl	8000490 <__aeabi_f2d>
 8001ff8:	a3c5      	add	r3, pc, #788	; (adr r3, 8002310 <uPMU_Str_Data+0x7f0>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	f7fe f8e9 	bl	80001d4 <__adddf3>
 8002002:	4bc5      	ldr	r3, [pc, #788]	; (8002318 <uPMU_Str_Data+0x7f8>)
 8002004:	2200      	movs	r2, #0
 8002006:	f7fe fa97 	bl	8000538 <__aeabi_dmul>
 800200a:	f7fe fd57 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 800200e:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002010:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002014:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002018:	4bc0      	ldr	r3, [pc, #768]	; (800231c <uPMU_Str_Data+0x7fc>)
	*((*str)++) = (data / 100000) % 10 + '0';
 800201a:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800201c:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002020:	fba5 3201 	umull	r3, r2, r5, r1
 8002024:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002026:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800202a:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 800202e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002032:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 8002036:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800203a:	fba5 e209 	umull	lr, r2, r5, r9
 800203e:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002040:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002044:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002048:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800204c:	fba5 e20c 	umull	lr, r2, r5, ip
 8002050:	08d2      	lsrs	r2, r2, #3
 8002052:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002056:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 800205a:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 800205e:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002062:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002064:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002066:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800206a:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 800206e:	fba5 b203 	umull	fp, r2, r5, r3
 8002072:	08d2      	lsrs	r2, r2, #3
 8002074:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002078:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 800207c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002080:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002084:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002088:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 800208c:	f100 0330 	add.w	r3, r0, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002090:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 8002092:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002094:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 8002098:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800209c:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
	*((*str)++) = (data / 100   ) % 10 + '0';
 80020a0:	f884 e02e 	strb.w	lr, [r4, #46]	; 0x2e
	*((*str)++) = '.';
 80020a4:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80020a8:	f884 902b 	strb.w	r9, [r4, #43]	; 0x2b
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 80020ac:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
	*((*str)++) = (data / 10    ) % 10 + '0';
 80020b0:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	*((*str)++) = (data         ) % 10 + '0';
 80020b4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 80020b8:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 80020bc:	f7fe f9e8 	bl	8000490 <__aeabi_f2d>
 80020c0:	a393      	add	r3, pc, #588	; (adr r3, 8002310 <uPMU_Str_Data+0x7f0>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f7fe f885 	bl	80001d4 <__adddf3>
 80020ca:	4b93      	ldr	r3, [pc, #588]	; (8002318 <uPMU_Str_Data+0x7f8>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	f7fe fa33 	bl	8000538 <__aeabi_dmul>
 80020d2:	f7fe fcf3 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 80020d6:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80020d8:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 80020dc:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80020e0:	4b8e      	ldr	r3, [pc, #568]	; (800231c <uPMU_Str_Data+0x7fc>)
	*((*str)++) = (data / 100000) % 10 + '0';
 80020e2:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80020e4:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 80020e8:	fba5 3201 	umull	r3, r2, r5, r1
 80020ec:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 80020ee:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80020f2:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 80020f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 80020fa:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 80020fe:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002102:	fba5 e209 	umull	lr, r2, r5, r9
 8002106:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002108:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800210c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002110:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002114:	fba5 e20c 	umull	lr, r2, r5, ip
 8002118:	08d2      	lsrs	r2, r2, #3
 800211a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800211e:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002122:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002126:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 800212a:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 800212c:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 800212e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002132:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002136:	fba5 b203 	umull	fp, r2, r5, r3
 800213a:	08d2      	lsrs	r2, r2, #3
 800213c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002140:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8002144:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002148:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800214c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002150:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8002154:	f100 0330 	add.w	r3, r0, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002158:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 800215a:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800215c:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 8002160:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002164:	f884 c033 	strb.w	ip, [r4, #51]	; 0x33
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002168:	f884 e035 	strb.w	lr, [r4, #53]	; 0x35
	*((*str)++) = '.';
 800216c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002170:	f884 9032 	strb.w	r9, [r4, #50]	; 0x32
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8002174:	f8d8 0040 	ldr.w	r0, [r8, #64]	; 0x40
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002178:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
	*((*str)++) = (data         ) % 10 + '0';
 800217c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	*((*str)++) = (data / 100000) % 10 + '0';
 8002180:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8002184:	f7fe f984 	bl	8000490 <__aeabi_f2d>
 8002188:	a361      	add	r3, pc, #388	; (adr r3, 8002310 <uPMU_Str_Data+0x7f0>)
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	f7fe f821 	bl	80001d4 <__adddf3>
 8002192:	4b61      	ldr	r3, [pc, #388]	; (8002318 <uPMU_Str_Data+0x7f8>)
 8002194:	2200      	movs	r2, #0
 8002196:	f7fe f9cf 	bl	8000538 <__aeabi_dmul>
 800219a:	f7fe fc8f 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 800219e:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80021a0:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 80021a4:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80021a8:	4b5c      	ldr	r3, [pc, #368]	; (800231c <uPMU_Str_Data+0x7fc>)
	*((*str)++) = (data / 100000) % 10 + '0';
 80021aa:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80021ac:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 80021b0:	fba5 3201 	umull	r3, r2, r5, r1
 80021b4:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 80021b6:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80021ba:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 80021be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 80021c2:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 80021c6:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80021ca:	fba5 e209 	umull	lr, r2, r5, r9
 80021ce:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80021d0:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80021d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80021d8:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80021dc:	fba5 e20c 	umull	lr, r2, r5, ip
 80021e0:	08d2      	lsrs	r2, r2, #3
 80021e2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80021e6:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 80021ea:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 80021ee:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 80021f2:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 80021f4:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 80021f6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80021fa:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 80021fe:	fba5 b203 	umull	fp, r2, r5, r3
 8002202:	08d2      	lsrs	r2, r2, #3
 8002204:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002208:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 800220c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002210:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002214:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002218:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 800221c:	f100 0330 	add.w	r3, r0, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002220:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 8002222:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002224:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 8002228:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800222c:	f884 c03a 	strb.w	ip, [r4, #58]	; 0x3a
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002230:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
	*((*str)++) = '.';
 8002234:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002238:	f884 9039 	strb.w	r9, [r4, #57]	; 0x39
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 800223c:	f8d8 0044 	ldr.w	r0, [r8, #68]	; 0x44
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002240:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
	*((*str)++) = (data         ) % 10 + '0';
 8002244:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
	*((*str)++) = (data / 100000) % 10 + '0';
 8002248:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 800224c:	f7fe f920 	bl	8000490 <__aeabi_f2d>
 8002250:	a32f      	add	r3, pc, #188	; (adr r3, 8002310 <uPMU_Str_Data+0x7f0>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fd ffbd 	bl	80001d4 <__adddf3>
 800225a:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <uPMU_Str_Data+0x7f8>)
 800225c:	2200      	movs	r2, #0
 800225e:	f7fe f96b 	bl	8000538 <__aeabi_dmul>
 8002262:	f7fe fc2b 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 8002266:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002268:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 800226c:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <uPMU_Str_Data+0x7fc>)
	*((*str)++) = (data / 100000) % 10 + '0';
 8002272:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002274:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002278:	fba5 3201 	umull	r3, r2, r5, r1
 800227c:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 800227e:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002282:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 8002286:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 800228a:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 800228e:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002292:	fba5 e209 	umull	lr, r2, r5, r9
 8002296:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002298:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800229c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80022a0:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80022a4:	fba5 e20c 	umull	lr, r2, r5, ip
 80022a8:	08d2      	lsrs	r2, r2, #3
 80022aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80022ae:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 80022b2:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 80022b6:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 80022ba:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 80022bc:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 80022be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80022c2:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 80022c6:	fba5 b203 	umull	fp, r2, r5, r3
 80022ca:	08d2      	lsrs	r2, r2, #3
 80022cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80022d0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 80022d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022d8:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80022dc:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 80022e0:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 80022e4:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 80022e6:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 80022e8:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80022ea:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 80022ee:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80022f2:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
	*((*str)++) = (data / 100   ) % 10 + '0';
 80022f6:	f884 e043 	strb.w	lr, [r4, #67]	; 0x43
	*((*str)++) = (data / 10    ) % 10 + '0';
 80022fa:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	*((*str)++) = (data         ) % 10 + '0';
 80022fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	*((*str)++) = (data / 100000) % 10 + '0';
 8002302:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002306:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800230a:	e009      	b.n	8002320 <uPMU_Str_Data+0x800>
 800230c:	f3af 8000 	nop.w
 8002310:	d2f1a9fc 	.word	0xd2f1a9fc
 8002314:	3f40624d 	.word	0x3f40624d
 8002318:	408f4000 	.word	0x408f4000
 800231c:	10624dd3 	.word	0x10624dd3
	*((*str)++) = '.';
 8002320:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8002324:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8002328:	f7fe f8b2 	bl	8000490 <__aeabi_f2d>
 800232c:	a3f6      	add	r3, pc, #984	; (adr r3, 8002708 <uPMU_Str_Data+0xbe8>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fd ff4f 	bl	80001d4 <__adddf3>
 8002336:	4bf6      	ldr	r3, [pc, #984]	; (8002710 <uPMU_Str_Data+0xbf0>)
 8002338:	2200      	movs	r2, #0
 800233a:	f7fe f8fd 	bl	8000538 <__aeabi_dmul>
 800233e:	f7fe fbbd 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 8002342:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002344:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002348:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800234c:	4bf1      	ldr	r3, [pc, #964]	; (8002714 <uPMU_Str_Data+0xbf4>)
	*((*str)++) = (data / 100000) % 10 + '0';
 800234e:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002350:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002354:	fba5 3201 	umull	r3, r2, r5, r1
 8002358:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 800235a:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800235e:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 8002362:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002366:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 800236a:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800236e:	fba5 e209 	umull	lr, r2, r5, r9
 8002372:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002374:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002378:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800237c:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002380:	fba5 e20c 	umull	lr, r2, r5, ip
 8002384:	08d2      	lsrs	r2, r2, #3
 8002386:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800238a:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 800238e:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002392:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002396:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002398:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 800239a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800239e:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 80023a2:	fba5 b203 	umull	fp, r2, r5, r3
 80023a6:	08d2      	lsrs	r2, r2, #3
 80023a8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80023ac:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 80023b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023b4:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80023b8:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 80023bc:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 80023c0:	f100 0330 	add.w	r3, r0, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 80023c4:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 80023c6:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80023c8:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 80023cc:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80023d0:	f884 c048 	strb.w	ip, [r4, #72]	; 0x48
	*((*str)++) = (data / 100   ) % 10 + '0';
 80023d4:	f884 e04a 	strb.w	lr, [r4, #74]	; 0x4a
	*((*str)++) = '.';
 80023d8:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80023dc:	f884 9047 	strb.w	r9, [r4, #71]	; 0x47
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 80023e0:	f8d8 000c 	ldr.w	r0, [r8, #12]
	*((*str)++) = (data / 10    ) % 10 + '0';
 80023e4:	f884 204b 	strb.w	r2, [r4, #75]	; 0x4b
	*((*str)++) = (data         ) % 10 + '0';
 80023e8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	*((*str)++) = (data / 100000) % 10 + '0';
 80023ec:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 80023f0:	f7fe f84e 	bl	8000490 <__aeabi_f2d>
 80023f4:	a3c4      	add	r3, pc, #784	; (adr r3, 8002708 <uPMU_Str_Data+0xbe8>)
 80023f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fa:	f7fd feeb 	bl	80001d4 <__adddf3>
 80023fe:	4bc4      	ldr	r3, [pc, #784]	; (8002710 <uPMU_Str_Data+0xbf0>)
 8002400:	2200      	movs	r2, #0
 8002402:	f7fe f899 	bl	8000538 <__aeabi_dmul>
 8002406:	f7fe fb59 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 800240a:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800240c:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002410:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002414:	4bbf      	ldr	r3, [pc, #764]	; (8002714 <uPMU_Str_Data+0xbf4>)
	*((*str)++) = (data / 100000) % 10 + '0';
 8002416:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002418:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 800241c:	fba5 3201 	umull	r3, r2, r5, r1
 8002420:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002422:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002426:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 800242a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 800242e:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 8002432:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002436:	fba5 e209 	umull	lr, r2, r5, r9
 800243a:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800243c:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002440:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002444:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002448:	fba5 e20c 	umull	lr, r2, r5, ip
 800244c:	08d2      	lsrs	r2, r2, #3
 800244e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002452:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002456:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 800245a:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 800245e:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002460:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002462:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002466:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 800246a:	fba5 b203 	umull	fp, r2, r5, r3
 800246e:	08d2      	lsrs	r2, r2, #3
 8002470:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002474:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8002478:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800247c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002480:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002484:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8002488:	f100 0330 	add.w	r3, r0, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 800248c:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 800248e:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002490:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 8002494:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002498:	f884 c04f 	strb.w	ip, [r4, #79]	; 0x4f
	*((*str)++) = (data / 100   ) % 10 + '0';
 800249c:	f884 e051 	strb.w	lr, [r4, #81]	; 0x51
	*((*str)++) = '.';
 80024a0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80024a4:	f884 904e 	strb.w	r9, [r4, #78]	; 0x4e
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 80024a8:	f8d8 0018 	ldr.w	r0, [r8, #24]
	*((*str)++) = (data / 10    ) % 10 + '0';
 80024ac:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
	*((*str)++) = (data         ) % 10 + '0';
 80024b0:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
	*((*str)++) = (data / 100000) % 10 + '0';
 80024b4:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 80024b8:	f7fd ffea 	bl	8000490 <__aeabi_f2d>
 80024bc:	a392      	add	r3, pc, #584	; (adr r3, 8002708 <uPMU_Str_Data+0xbe8>)
 80024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c2:	f7fd fe87 	bl	80001d4 <__adddf3>
 80024c6:	4b92      	ldr	r3, [pc, #584]	; (8002710 <uPMU_Str_Data+0xbf0>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	f7fe f835 	bl	8000538 <__aeabi_dmul>
 80024ce:	f7fe faf5 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 80024d2:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80024d4:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 80024d8:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80024dc:	4b8d      	ldr	r3, [pc, #564]	; (8002714 <uPMU_Str_Data+0xbf4>)
	*((*str)++) = (data / 100000) % 10 + '0';
 80024de:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80024e0:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 80024e4:	fba5 3201 	umull	r3, r2, r5, r1
 80024e8:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 80024ea:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80024ee:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 80024f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 80024f6:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 80024fa:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80024fe:	fba5 e209 	umull	lr, r2, r5, r9
 8002502:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002504:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002508:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800250c:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002510:	fba5 e20c 	umull	lr, r2, r5, ip
 8002514:	08d2      	lsrs	r2, r2, #3
 8002516:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800251a:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 800251e:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002522:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002526:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002528:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 800252a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800252e:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002532:	fba5 b203 	umull	fp, r2, r5, r3
 8002536:	08d2      	lsrs	r2, r2, #3
 8002538:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800253c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8002540:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002544:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002548:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 800254c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8002550:	f100 0330 	add.w	r3, r0, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002554:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 8002556:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002558:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 800255c:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002560:	f884 c056 	strb.w	ip, [r4, #86]	; 0x56
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002564:	f884 e058 	strb.w	lr, [r4, #88]	; 0x58
	*((*str)++) = '.';
 8002568:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800256c:	f884 9055 	strb.w	r9, [r4, #85]	; 0x55
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 8002570:	f8d8 001c 	ldr.w	r0, [r8, #28]
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002574:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
	*((*str)++) = (data         ) % 10 + '0';
 8002578:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
	*((*str)++) = (data / 100000) % 10 + '0';
 800257c:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 8002580:	f7fd ff86 	bl	8000490 <__aeabi_f2d>
 8002584:	a360      	add	r3, pc, #384	; (adr r3, 8002708 <uPMU_Str_Data+0xbe8>)
 8002586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258a:	f7fd fe23 	bl	80001d4 <__adddf3>
 800258e:	4b60      	ldr	r3, [pc, #384]	; (8002710 <uPMU_Str_Data+0xbf0>)
 8002590:	2200      	movs	r2, #0
 8002592:	f7fd ffd1 	bl	8000538 <__aeabi_dmul>
 8002596:	f7fe fa91 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 800259a:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800259c:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 80025a0:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80025a4:	4b5b      	ldr	r3, [pc, #364]	; (8002714 <uPMU_Str_Data+0xbf4>)
	*((*str)++) = (data / 100000) % 10 + '0';
 80025a6:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80025a8:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 80025ac:	fba5 3201 	umull	r3, r2, r5, r1
 80025b0:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 80025b2:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80025b6:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 80025ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 80025be:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 80025c2:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80025c6:	fba5 e209 	umull	lr, r2, r5, r9
 80025ca:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80025cc:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80025d0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025d4:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80025d8:	fba5 e20c 	umull	lr, r2, r5, ip
 80025dc:	08d2      	lsrs	r2, r2, #3
 80025de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025e2:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 80025e6:	fba5 e20b 	umull	lr, r2, r5, fp
	*((*str)++) = (data / 10    ) % 10 + '0';
 80025ea:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 80025ee:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 80025f0:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 80025f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025f6:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 80025fa:	fba5 b203 	umull	fp, r2, r5, r3
 80025fe:	08d2      	lsrs	r2, r2, #3
 8002600:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002604:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8002608:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800260c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002610:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002614:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8002618:	f100 0330 	add.w	r3, r0, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 800261c:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 800261e:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002620:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = '.';
 8002624:	f04f 002e 	mov.w	r0, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002628:	f884 c05d 	strb.w	ip, [r4, #93]	; 0x5d
	*((*str)++) = (data / 100   ) % 10 + '0';
 800262c:	f884 e05f 	strb.w	lr, [r4, #95]	; 0x5f
	*((*str)++) = '.';
 8002630:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002634:	f884 905c 	strb.w	r9, [r4, #92]	; 0x5c
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8002638:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
	*((*str)++) = (data / 10    ) % 10 + '0';
 800263c:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	*((*str)++) = (data         ) % 10 + '0';
 8002640:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
	*((*str)++) = (data / 100000) % 10 + '0';
 8002644:	f884 105b 	strb.w	r1, [r4, #91]	; 0x5b
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 8002648:	f7fd ff22 	bl	8000490 <__aeabi_f2d>
 800264c:	a32e      	add	r3, pc, #184	; (adr r3, 8002708 <uPMU_Str_Data+0xbe8>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f7fd fdbf 	bl	80001d4 <__adddf3>
 8002656:	4b2e      	ldr	r3, [pc, #184]	; (8002710 <uPMU_Str_Data+0xbf0>)
 8002658:	2200      	movs	r2, #0
 800265a:	f7fd ff6d 	bl	8000538 <__aeabi_dmul>
 800265e:	f7fe fa2d 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 8002662:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002664:	fba6 3900 	umull	r3, r9, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002668:	fba7 3101 	umull	r3, r1, r7, r1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800266c:	4b29      	ldr	r3, [pc, #164]	; (8002714 <uPMU_Str_Data+0xbf4>)
	*((*str)++) = (data / 100000) % 10 + '0';
 800266e:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002670:	fba3 3c00 	umull	r3, ip, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002674:	fba5 3201 	umull	r3, r2, r5, r1
 8002678:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800267a:	ea4f 3959 	mov.w	r9, r9, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 800267e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002682:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002686:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 800268a:	fba5 b300 	umull	fp, r3, r5, r0
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 800268e:	46c3      	mov	fp, r8
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002690:	fba5 8109 	umull	r8, r1, r5, r9
 8002694:	08c9      	lsrs	r1, r1, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002696:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800269a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800269e:	eba9 0941 	sub.w	r9, r9, r1, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80026a2:	fba5 810c 	umull	r8, r1, r5, ip
 80026a6:	08c9      	lsrs	r1, r1, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 80026a8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80026ac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80026b0:	ebac 0c41 	sub.w	ip, ip, r1, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 80026b4:	fba5 810e 	umull	r8, r1, r5, lr
 80026b8:	08c9      	lsrs	r1, r1, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 80026ba:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 80026bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80026c0:	ebae 0e41 	sub.w	lr, lr, r1, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 80026c4:	fba5 1803 	umull	r1, r8, r5, r3
 80026c8:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 80026cc:	eb08 0888 	add.w	r8, r8, r8, lsl #2
 80026d0:	eba3 0848 	sub.w	r8, r3, r8, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 80026d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026d8:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 80026dc:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80026e0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 80026e4:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80026e6:	f109 0930 	add.w	r9, r9, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 80026ea:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 80026ec:	f108 0830 	add.w	r8, r8, #48	; 0x30
	*((*str)++) = '.';
 80026f0:	f04f 012e 	mov.w	r1, #46	; 0x2e
	*((*str)++) = (data / 100   ) % 10 + '0';
 80026f4:	f884 e066 	strb.w	lr, [r4, #102]	; 0x66
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80026f8:	f884 c064 	strb.w	ip, [r4, #100]	; 0x64
	*((*str)++) = (data / 100000) % 10 + '0';
 80026fc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002700:	f884 9063 	strb.w	r9, [r4, #99]	; 0x63
 8002704:	e008      	b.n	8002718 <uPMU_Str_Data+0xbf8>
 8002706:	bf00      	nop
 8002708:	d2f1a9fc 	.word	0xd2f1a9fc
 800270c:	3f40624d 	.word	0x3f40624d
 8002710:	408f4000 	.word	0x408f4000
 8002714:	10624dd3 	.word	0x10624dd3
	*((*str)++) = (data         ) % 10 + '0';
 8002718:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	*((*str)++) = '.';
 800271c:	f884 1065 	strb.w	r1, [r4, #101]	; 0x65
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002720:	f884 8067 	strb.w	r8, [r4, #103]	; 0x67
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 8002724:	f8cd b004 	str.w	fp, [sp, #4]
 8002728:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800272c:	f8df 83d4 	ldr.w	r8, [pc, #980]	; 8002b04 <uPMU_Str_Data+0xfe4>
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 8002730:	f7fd feae 	bl	8000490 <__aeabi_f2d>
 8002734:	a3ee      	add	r3, pc, #952	; (adr r3, 8002af0 <uPMU_Str_Data+0xfd0>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fd fd4b 	bl	80001d4 <__adddf3>
 800273e:	2200      	movs	r2, #0
 8002740:	4bed      	ldr	r3, [pc, #948]	; (8002af8 <uPMU_Str_Data+0xfd8>)
 8002742:	f7fd fef9 	bl	8000538 <__aeabi_dmul>
 8002746:	f7fe f9b9 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 800274a:	0941      	lsrs	r1, r0, #5
 800274c:	fba7 2101 	umull	r2, r1, r7, r1
 8002750:	09c9      	lsrs	r1, r1, #7
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002752:	fba6 2b00 	umull	r2, fp, r6, r0
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002756:	fba8 2c00 	umull	r2, ip, r8, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 800275a:	fba5 e201 	umull	lr, r2, r5, r1
 800275e:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002760:	fbaa 9e00 	umull	r9, lr, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002764:	ea4f 3b5b 	mov.w	fp, fp, lsr #13
	*((*str)++) = (data / 100000) % 10 + '0';
 8002768:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 800276c:	ea4f 195e 	mov.w	r9, lr, lsr #5
	*((*str)++) = (data / 100000) % 10 + '0';
 8002770:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002774:	fba5 e20b 	umull	lr, r2, r5, fp
 8002778:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800277a:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800277e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002782:	ebab 0b42 	sub.w	fp, fp, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002786:	fba5 e20c 	umull	lr, r2, r5, ip
 800278a:	08d2      	lsrs	r2, r2, #3
 800278c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002790:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002794:	fba5 e209 	umull	lr, r2, r5, r9
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002798:	fba5 e300 	umull	lr, r3, r5, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 800279c:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 800279e:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 80027a0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80027a4:	eba9 0e42 	sub.w	lr, r9, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 80027a8:	fba5 9203 	umull	r9, r2, r5, r3
 80027ac:	08d2      	lsrs	r2, r2, #3
 80027ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80027b2:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 80027b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027ba:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 80027be:	9801      	ldr	r0, [sp, #4]
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80027c0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 80027c4:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = '.';
 80027c8:	f04f 092e 	mov.w	r9, #46	; 0x2e
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80027cc:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 80027d0:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 80027d2:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 80027d4:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80027d6:	f884 c06b 	strb.w	ip, [r4, #107]	; 0x6b
	*((*str)++) = (data / 100   ) % 10 + '0';
 80027da:	f884 e06d 	strb.w	lr, [r4, #109]	; 0x6d
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80027de:	f884 b06a 	strb.w	fp, [r4, #106]	; 0x6a
	*((*str)++) = '.';
 80027e2:	f884 906c 	strb.w	r9, [r4, #108]	; 0x6c
	*((*str)++) = (data / 10    ) % 10 + '0';
 80027e6:	f884 206e 	strb.w	r2, [r4, #110]	; 0x6e
	*((*str)++) = (data         ) % 10 + '0';
 80027ea:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 80027ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
	*((*str)++) = (data / 100000) % 10 + '0';
 80027f0:	f884 1069 	strb.w	r1, [r4, #105]	; 0x69
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 80027f4:	f7fd fe4c 	bl	8000490 <__aeabi_f2d>
 80027f8:	a3bd      	add	r3, pc, #756	; (adr r3, 8002af0 <uPMU_Str_Data+0xfd0>)
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	f7fd fce9 	bl	80001d4 <__adddf3>
 8002802:	2200      	movs	r2, #0
 8002804:	4bbc      	ldr	r3, [pc, #752]	; (8002af8 <uPMU_Str_Data+0xfd8>)
 8002806:	f7fd fe97 	bl	8000538 <__aeabi_dmul>
 800280a:	f7fe f957 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 800280e:	0943      	lsrs	r3, r0, #5
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002810:	fbaa 2a00 	umull	r2, sl, sl, r0
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002814:	fba6 2600 	umull	r2, r6, r6, r0
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002818:	fba8 2800 	umull	r2, r8, r8, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 800281c:	fba7 3703 	umull	r3, r7, r7, r3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002820:	ea4f 115a 	mov.w	r1, sl, lsr #5
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002824:	462b      	mov	r3, r5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002826:	0b76      	lsrs	r6, r6, #13
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002828:	ea4f 1898 	mov.w	r8, r8, lsr #6
	*((*str)++) = (data / 100000) % 10 + '0';
 800282c:	09ff      	lsrs	r7, r7, #7
	*((*str)++) = (data / 10    ) % 10 + '0';
 800282e:	fba3 3200 	umull	r3, r2, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002832:	fba5 3a07 	umull	r3, sl, r5, r7
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002836:	fba5 3e06 	umull	r3, lr, r5, r6
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800283a:	fba5 3c08 	umull	r3, ip, r5, r8
	*((*str)++) = (data / 100   ) % 10 + '0';
 800283e:	fba5 3501 	umull	r3, r5, r5, r1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002842:	4bae      	ldr	r3, [pc, #696]	; (8002afc <uPMU_Str_Data+0xfdc>)
	*((*str)++) = '.';
 8002844:	f884 9073 	strb.w	r9, [r4, #115]	; 0x73
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002848:	08d2      	lsrs	r2, r2, #3
 800284a:	fba3 b302 	umull	fp, r3, r3, r2
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800284e:	ea4f 0ede 	mov.w	lr, lr, lsr #3
 8002852:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
	*((*str)++) = (data / 100000) % 10 + '0';
 8002856:	ea4f 0ada 	mov.w	sl, sl, lsr #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800285a:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 800285e:	08ed      	lsrs	r5, r5, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002860:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002862:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
	*((*str)++) = (data / 100000) % 10 + '0';
 8002866:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 800286a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800286e:	eba6 064e 	sub.w	r6, r6, lr, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002872:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data         ) % 10 + '0';
 8002876:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800287a:	eba8 084c 	sub.w	r8, r8, ip, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 800287e:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
	*((*str)++) = (data / 100000) % 10 + '0';
 8002882:	eba7 074a 	sub.w	r7, r7, sl, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002886:	eba1 0145 	sub.w	r1, r1, r5, lsl #1
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 800288a:	f8df a280 	ldr.w	sl, [pc, #640]	; 8002b0c <uPMU_Str_Data+0xfec>
	*((*str)++) = (data / 100000) % 10 + '0';
 800288e:	f8df 9280 	ldr.w	r9, [pc, #640]	; 8002b10 <uPMU_Str_Data+0xff0>
	*((*str)++) = (data         ) % 10 + '0';
 8002892:	eba0 0e4e 	sub.w	lr, r0, lr, lsl #1
 8002896:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 800289a:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 800289c:	3730      	adds	r7, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800289e:	3630      	adds	r6, #48	; 0x30
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80028a0:	f108 0830 	add.w	r8, r8, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 80028a4:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 80028a6:	f884 e076 	strb.w	lr, [r4, #118]	; 0x76
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 80028aa:	f8da 003c 	ldr.w	r0, [sl, #60]	; 0x3c
	*((*str)++) = (data / 100000) % 10 + '0';
 80028ae:	f884 7070 	strb.w	r7, [r4, #112]	; 0x70
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80028b2:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80028b6:	f884 8072 	strb.w	r8, [r4, #114]	; 0x72
	*((*str)++) = (data / 10    ) % 10 + '0';
 80028ba:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	*((*str)++) = (data / 100   ) % 10 + '0';
 80028be:	f884 1074 	strb.w	r1, [r4, #116]	; 0x74
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 80028c2:	f7fd fde5 	bl	8000490 <__aeabi_f2d>
 80028c6:	a38a      	add	r3, pc, #552	; (adr r3, 8002af0 <uPMU_Str_Data+0xfd0>)
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	f7fd fc82 	bl	80001d4 <__adddf3>
 80028d0:	4b89      	ldr	r3, [pc, #548]	; (8002af8 <uPMU_Str_Data+0xfd8>)
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80028d2:	4f8b      	ldr	r7, [pc, #556]	; (8002b00 <uPMU_Str_Data+0xfe0>)
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80028d4:	4e8b      	ldr	r6, [pc, #556]	; (8002b04 <uPMU_Str_Data+0xfe4>)
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 80028d6:	2200      	movs	r2, #0
 80028d8:	f7fd fe2e 	bl	8000538 <__aeabi_dmul>
 80028dc:	f7fe f8ee 	bl	8000abc <__aeabi_d2uiz>
 80028e0:	4683      	mov	fp, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 80028e2:	ea4f 115b 	mov.w	r1, fp, lsr #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80028e6:	fba7 380b 	umull	r3, r8, r7, fp
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80028ea:	fba6 3c0b 	umull	r3, ip, r6, fp
	*((*str)++) = (data / 100000) % 10 + '0';
 80028ee:	fba9 3101 	umull	r3, r1, r9, r1
	*((*str)++) = (data / 100   ) % 10 + '0';
 80028f2:	4b85      	ldr	r3, [pc, #532]	; (8002b08 <uPMU_Str_Data+0xfe8>)
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 80028f4:	f8da 0048 	ldr.w	r0, [sl, #72]	; 0x48
	*((*str)++) = (data / 100   ) % 10 + '0';
 80028f8:	fba3 3e0b 	umull	r3, lr, r3, fp
	*((*str)++) = (data / 100000) % 10 + '0';
 80028fc:	4b7f      	ldr	r3, [pc, #508]	; (8002afc <uPMU_Str_Data+0xfdc>)
 80028fe:	09c9      	lsrs	r1, r1, #7
 8002900:	fba3 3201 	umull	r3, r2, r3, r1
 8002904:	08d2      	lsrs	r2, r2, #3
 8002906:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800290a:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 800290e:	4b7b      	ldr	r3, [pc, #492]	; (8002afc <uPMU_Str_Data+0xfdc>)
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002910:	4a7a      	ldr	r2, [pc, #488]	; (8002afc <uPMU_Str_Data+0xfdc>)
 8002912:	ea4f 3858 	mov.w	r8, r8, lsr #13
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002916:	4625      	mov	r5, r4
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002918:	fba3 430b 	umull	r4, r3, r3, fp
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800291c:	fba2 4208 	umull	r4, r2, r2, r8
 8002920:	08d2      	lsrs	r2, r2, #3
 8002922:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002926:	eba8 0842 	sub.w	r8, r8, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 800292a:	4a74      	ldr	r2, [pc, #464]	; (8002afc <uPMU_Str_Data+0xfdc>)
 800292c:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 8002930:	fba2 420c 	umull	r4, r2, r2, ip
 8002934:	08d2      	lsrs	r2, r2, #3
 8002936:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800293a:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 800293e:	4a6f      	ldr	r2, [pc, #444]	; (8002afc <uPMU_Str_Data+0xfdc>)
 8002940:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8002944:	fba2 420e 	umull	r4, r2, r2, lr
 8002948:	08d2      	lsrs	r2, r2, #3
 800294a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800294e:	ebae 0e42 	sub.w	lr, lr, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002952:	4a6a      	ldr	r2, [pc, #424]	; (8002afc <uPMU_Str_Data+0xfdc>)
 8002954:	08db      	lsrs	r3, r3, #3
 8002956:	fba2 4203 	umull	r4, r2, r2, r3
 800295a:	08d2      	lsrs	r2, r2, #3
 800295c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002960:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8002964:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002968:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800296c:	f108 0830 	add.w	r8, r8, #48	; 0x30
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002970:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002974:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002978:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 800297a:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 800297c:	f885 8078 	strb.w	r8, [r5, #120]	; 0x78
	*((*str)++) = (data / 100000) % 10 + '0';
 8002980:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = '.';
 8002982:	f04f 082e 	mov.w	r8, #46	; 0x2e
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002986:	f885 c079 	strb.w	ip, [r5, #121]	; 0x79
	*((*str)++) = (data / 100   ) % 10 + '0';
 800298a:	f885 e07b 	strb.w	lr, [r5, #123]	; 0x7b
	*((*str)++) = (data / 10    ) % 10 + '0';
 800298e:	f885 207c 	strb.w	r2, [r5, #124]	; 0x7c
	*((*str)++) = (data         ) % 10 + '0';
 8002992:	f885 307d 	strb.w	r3, [r5, #125]	; 0x7d
	*((*str)++) = (data / 100000) % 10 + '0';
 8002996:	f885 1077 	strb.w	r1, [r5, #119]	; 0x77
	*((*str)++) = '.';
 800299a:	f885 807a 	strb.w	r8, [r5, #122]	; 0x7a
	uint32_t data = (uint32_t)((out->Absl + 0.0005) * 1000.0);
 800299e:	f7fd fd77 	bl	8000490 <__aeabi_f2d>
 80029a2:	a353      	add	r3, pc, #332	; (adr r3, 8002af0 <uPMU_Str_Data+0xfd0>)
 80029a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a8:	f7fd fc14 	bl	80001d4 <__adddf3>
 80029ac:	4b52      	ldr	r3, [pc, #328]	; (8002af8 <uPMU_Str_Data+0xfd8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	f7fd fdc2 	bl	8000538 <__aeabi_dmul>
 80029b4:	f7fe f882 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 80029b8:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80029ba:	fba7 3b00 	umull	r3, fp, r7, r0
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80029be:	fba6 3c00 	umull	r3, ip, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 80029c2:	fba9 3101 	umull	r3, r1, r9, r1
	*((*str)++) = (data / 100   ) % 10 + '0';
 80029c6:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <uPMU_Str_Data+0xfe8>)
	*((*str)++) = '.';
 80029c8:	f885 8081 	strb.w	r8, [r5, #129]	; 0x81
	*((*str)++) = (data / 100   ) % 10 + '0';
 80029cc:	fba3 3e00 	umull	r3, lr, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 80029d0:	4b4a      	ldr	r3, [pc, #296]	; (8002afc <uPMU_Str_Data+0xfdc>)
 80029d2:	09c9      	lsrs	r1, r1, #7
 80029d4:	fba3 3201 	umull	r3, r2, r3, r1
 80029d8:	08d2      	lsrs	r2, r2, #3
 80029da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80029de:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80029e2:	4a46      	ldr	r2, [pc, #280]	; (8002afc <uPMU_Str_Data+0xfdc>)
	*((*str)++) = (data / 10    ) % 10 + '0';
 80029e4:	4b45      	ldr	r3, [pc, #276]	; (8002afc <uPMU_Str_Data+0xfdc>)
	*((*str)++) = (data / 10000 ) % 10 + '0';
 80029e6:	ea4f 3b5b 	mov.w	fp, fp, lsr #13
 80029ea:	fba2 420b 	umull	r4, r2, r2, fp
 80029ee:	08d2      	lsrs	r2, r2, #3
 80029f0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80029f4:	ebab 0b42 	sub.w	fp, fp, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 80029f8:	4a40      	ldr	r2, [pc, #256]	; (8002afc <uPMU_Str_Data+0xfdc>)
 80029fa:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 80029fe:	fba2 420c 	umull	r4, r2, r2, ip
 8002a02:	08d2      	lsrs	r2, r2, #3
 8002a04:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a08:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002a0c:	4a3b      	ldr	r2, [pc, #236]	; (8002afc <uPMU_Str_Data+0xfdc>)
 8002a0e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8002a12:	fba2 420e 	umull	r4, r2, r2, lr
 8002a16:	08d2      	lsrs	r2, r2, #3
 8002a18:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002a1c:	fba3 4300 	umull	r4, r3, r3, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002a20:	ebae 0e42 	sub.w	lr, lr, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002a24:	4a35      	ldr	r2, [pc, #212]	; (8002afc <uPMU_Str_Data+0xfdc>)
 8002a26:	08db      	lsrs	r3, r3, #3
 8002a28:	fba2 4203 	umull	r4, r2, r2, r3
 8002a2c:	08d2      	lsrs	r2, r2, #3
 8002a2e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a32:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8002a36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002a3a:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002a3e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002a42:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002a46:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8002a48:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 8002a4a:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002a4c:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002a50:	f885 c080 	strb.w	ip, [r5, #128]	; 0x80
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002a54:	f885 e082 	strb.w	lr, [r5, #130]	; 0x82
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 8002a58:	f8da 004c 	ldr.w	r0, [sl, #76]	; 0x4c
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002a5c:	f885 b07f 	strb.w	fp, [r5, #127]	; 0x7f
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002a60:	f885 2083 	strb.w	r2, [r5, #131]	; 0x83
	*((*str)++) = (data         ) % 10 + '0';
 8002a64:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
	*((*str)++) = (data / 100000) % 10 + '0';
 8002a68:	f885 107e 	strb.w	r1, [r5, #126]	; 0x7e
	data = (uint32_t)((out->Angl + 0.0005 ) * 1000.0 );
 8002a6c:	f7fd fd10 	bl	8000490 <__aeabi_f2d>
 8002a70:	a31f      	add	r3, pc, #124	; (adr r3, 8002af0 <uPMU_Str_Data+0xfd0>)
 8002a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a76:	f7fd fbad 	bl	80001d4 <__adddf3>
 8002a7a:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <uPMU_Str_Data+0xfd8>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f7fd fd5b 	bl	8000538 <__aeabi_dmul>
 8002a82:	f7fe f81b 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 100000) % 10 + '0';
 8002a86:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002a88:	fba7 3a00 	umull	r3, sl, r7, r0
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002a8c:	fba6 3c00 	umull	r3, ip, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002a90:	fba9 3101 	umull	r3, r1, r9, r1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002a94:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <uPMU_Str_Data+0xfe8>)
	*((*str)++) = '.';
 8002a96:	f885 8088 	strb.w	r8, [r5, #136]	; 0x88
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002a9a:	fba3 3e00 	umull	r3, lr, r3, r0
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002a9e:	4b17      	ldr	r3, [pc, #92]	; (8002afc <uPMU_Str_Data+0xfdc>)
 8002aa0:	fba3 2300 	umull	r2, r3, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002aa4:	4a15      	ldr	r2, [pc, #84]	; (8002afc <uPMU_Str_Data+0xfdc>)
 8002aa6:	09c9      	lsrs	r1, r1, #7
 8002aa8:	fba2 4201 	umull	r4, r2, r2, r1
 8002aac:	08d2      	lsrs	r2, r2, #3
 8002aae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ab2:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002ab6:	4a11      	ldr	r2, [pc, #68]	; (8002afc <uPMU_Str_Data+0xfdc>)
 8002ab8:	ea4f 3a5a 	mov.w	sl, sl, lsr #13
 8002abc:	fba2 420a 	umull	r4, r2, r2, sl
 8002ac0:	08d2      	lsrs	r2, r2, #3
 8002ac2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ac6:	ebaa 0a42 	sub.w	sl, sl, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002aca:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <uPMU_Str_Data+0xfdc>)
 8002acc:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 8002ad0:	fba2 420c 	umull	r4, r2, r2, ip
 8002ad4:	08d2      	lsrs	r2, r2, #3
 8002ad6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ada:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002ade:	4a07      	ldr	r2, [pc, #28]	; (8002afc <uPMU_Str_Data+0xfdc>)
 8002ae0:	ea4f 1b5e 	mov.w	fp, lr, lsr #5
 8002ae4:	fba2 420b 	umull	r4, r2, r2, fp
 8002ae8:	e014      	b.n	8002b14 <uPMU_Str_Data+0xff4>
 8002aea:	bf00      	nop
 8002aec:	f3af 8000 	nop.w
 8002af0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002af4:	3f40624d 	.word	0x3f40624d
 8002af8:	408f4000 	.word	0x408f4000
 8002afc:	cccccccd 	.word	0xcccccccd
 8002b00:	d1b71759 	.word	0xd1b71759
 8002b04:	10624dd3 	.word	0x10624dd3
 8002b08:	51eb851f 	.word	0x51eb851f
 8002b0c:	2001a1d8 	.word	0x2001a1d8
 8002b10:	0a7c5ac5 	.word	0x0a7c5ac5
 8002b14:	08d2      	lsrs	r2, r2, #3
 8002b16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b1a:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002b1e:	4a84      	ldr	r2, [pc, #528]	; (8002d30 <uPMU_Str_Data+0x1210>)
 8002b20:	08db      	lsrs	r3, r3, #3
 8002b22:	fba2 4203 	umull	r4, r2, r2, r3
 8002b26:	08d2      	lsrs	r2, r2, #3
 8002b28:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b2c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8002b30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b34:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002b38:	f10a 0b30 	add.w	fp, sl, #48	; 0x30

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** uPMU Data Process **/
void uPMU_Str_Freq(const Result_Typedef* out, char** str) {

	uint32_t data = (uint32_t)((out->Absl + 0.00005) * 10000.0);
 8002b3c:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8002d38 <uPMU_Str_Data+0x1218>
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002b40:	f885 b086 	strb.w	fp, [r5, #134]	; 0x86
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002b44:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002b48:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002b4c:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 8002b4e:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8002b50:	3030      	adds	r0, #48	; 0x30
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002b52:	f885 c087 	strb.w	ip, [r5, #135]	; 0x87
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002b56:	f885 e089 	strb.w	lr, [r5, #137]	; 0x89
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002b5a:	f885 208a 	strb.w	r2, [r5, #138]	; 0x8a
	*((*str)++) = (data / 100000) % 10 + '0';
 8002b5e:	f885 1085 	strb.w	r1, [r5, #133]	; 0x85
	*((*str)++) = (data         ) % 10 + '0';
 8002b62:	f885 008b 	strb.w	r0, [r5, #139]	; 0x8b
	uint32_t data = (uint32_t)((out->Absl + 0.00005) * 10000.0);
 8002b66:	f8da 0000 	ldr.w	r0, [sl]
 8002b6a:	f7fd fc91 	bl	8000490 <__aeabi_f2d>
 8002b6e:	a36c      	add	r3, pc, #432	; (adr r3, 8002d20 <uPMU_Str_Data+0x1200>)
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f7fd fb2e 	bl	80001d4 <__adddf3>
 8002b78:	a36b      	add	r3, pc, #428	; (adr r3, 8002d28 <uPMU_Str_Data+0x1208>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f7fd fcdb 	bl	8000538 <__aeabi_dmul>
 8002b82:	f7fd ff9b 	bl	8000abc <__aeabi_d2uiz>

	*((*str)++) = (data / 100000) % 10 + '0';
 8002b86:	0941      	lsrs	r1, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002b88:	fba7 3b00 	umull	r3, fp, r7, r0
	*((*str)++) = '.';
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002b8c:	fba6 3c00 	umull	r3, ip, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002b90:	fba9 3101 	umull	r3, r1, r9, r1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002b94:	4b67      	ldr	r3, [pc, #412]	; (8002d34 <uPMU_Str_Data+0x1214>)
	*((*str)++) = '.';
 8002b96:	f885 808e 	strb.w	r8, [r5, #142]	; 0x8e
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002b9a:	fba3 3e00 	umull	r3, lr, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002b9e:	4b64      	ldr	r3, [pc, #400]	; (8002d30 <uPMU_Str_Data+0x1210>)
 8002ba0:	09c9      	lsrs	r1, r1, #7
 8002ba2:	fba3 3201 	umull	r3, r2, r3, r1
 8002ba6:	08d2      	lsrs	r2, r2, #3
 8002ba8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002bac:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002bb0:	4a5f      	ldr	r2, [pc, #380]	; (8002d30 <uPMU_Str_Data+0x1210>)
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002bb2:	4b5f      	ldr	r3, [pc, #380]	; (8002d30 <uPMU_Str_Data+0x1210>)
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002bb4:	ea4f 3b5b 	mov.w	fp, fp, lsr #13
 8002bb8:	fba2 420b 	umull	r4, r2, r2, fp
 8002bbc:	08d2      	lsrs	r2, r2, #3
 8002bbe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002bc2:	ebab 0b42 	sub.w	fp, fp, r2, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002bc6:	4a5a      	ldr	r2, [pc, #360]	; (8002d30 <uPMU_Str_Data+0x1210>)
 8002bc8:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
 8002bcc:	fba2 420c 	umull	r4, r2, r2, ip
 8002bd0:	08d2      	lsrs	r2, r2, #3
 8002bd2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002bd6:	ebac 0c42 	sub.w	ip, ip, r2, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002bda:	4a55      	ldr	r2, [pc, #340]	; (8002d30 <uPMU_Str_Data+0x1210>)
 8002bdc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8002be0:	fba2 420e 	umull	r4, r2, r2, lr
 8002be4:	08d2      	lsrs	r2, r2, #3
 8002be6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002bea:	fba3 4300 	umull	r4, r3, r3, r0
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002bee:	ebae 0e42 	sub.w	lr, lr, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002bf2:	4a4f      	ldr	r2, [pc, #316]	; (8002d30 <uPMU_Str_Data+0x1210>)
 8002bf4:	08db      	lsrs	r3, r3, #3
 8002bf6:	fba2 4203 	umull	r4, r2, r2, r3
 8002bfa:	08d2      	lsrs	r2, r2, #3
 8002bfc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002c00:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8002c04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c08:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002c0c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002c10:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002c14:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8002c16:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 100000) % 10 + '0';
 8002c18:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002c1a:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002c1e:	f885 c08f 	strb.w	ip, [r5, #143]	; 0x8f
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002c22:	f885 e090 	strb.w	lr, [r5, #144]	; 0x90
	//*((*str)++) = '<';

	data = (uint32_t)((out->Angl + 0.00005) * 10000.0);
 8002c26:	f8da 0004 	ldr.w	r0, [sl, #4]
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002c2a:	f885 b08d 	strb.w	fp, [r5, #141]	; 0x8d
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002c2e:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
	*((*str)++) = (data         ) % 10 + '0';
 8002c32:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
	*((*str)++) = (data / 100000) % 10 + '0';
 8002c36:	f885 108c 	strb.w	r1, [r5, #140]	; 0x8c
	data = (uint32_t)((out->Angl + 0.00005) * 10000.0);
 8002c3a:	f7fd fc29 	bl	8000490 <__aeabi_f2d>
 8002c3e:	a338      	add	r3, pc, #224	; (adr r3, 8002d20 <uPMU_Str_Data+0x1200>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f7fd fac6 	bl	80001d4 <__adddf3>
 8002c48:	a337      	add	r3, pc, #220	; (adr r3, 8002d28 <uPMU_Str_Data+0x1208>)
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f7fd fc73 	bl	8000538 <__aeabi_dmul>
 8002c52:	f7fd ff33 	bl	8000abc <__aeabi_d2uiz>

	*((*str)++) = (data / 100000) % 10 + '0';
 8002c56:	0943      	lsrs	r3, r0, #5
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002c58:	fba7 2700 	umull	r2, r7, r7, r0
	*((*str)++) = '.';
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002c5c:	fba6 2600 	umull	r2, r6, r6, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002c60:	fba9 3903 	umull	r3, r9, r9, r3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002c64:	4a33      	ldr	r2, [pc, #204]	; (8002d34 <uPMU_Str_Data+0x1214>)
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002c66:	4b32      	ldr	r3, [pc, #200]	; (8002d30 <uPMU_Str_Data+0x1210>)
	*((*str)++) = '.';
 8002c68:	f885 8095 	strb.w	r8, [r5, #149]	; 0x95
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002c6c:	fba2 2400 	umull	r2, r4, r2, r0
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002c70:	fba3 2300 	umull	r2, r3, r3, r0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002c74:	4a2e      	ldr	r2, [pc, #184]	; (8002d30 <uPMU_Str_Data+0x1210>)
 8002c76:	ea4f 19d9 	mov.w	r9, r9, lsr #7
 8002c7a:	fba2 2c09 	umull	r2, ip, r2, r9
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002c7e:	4a2c      	ldr	r2, [pc, #176]	; (8002d30 <uPMU_Str_Data+0x1210>)
 8002c80:	0b7f      	lsrs	r7, r7, #13
 8002c82:	fba2 2e07 	umull	r2, lr, r2, r7
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002c86:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <uPMU_Str_Data+0x1210>)
 8002c88:	09b6      	lsrs	r6, r6, #6
 8002c8a:	fba2 2106 	umull	r2, r1, r2, r6
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002c8e:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <uPMU_Str_Data+0x1210>)
 8002c90:	0964      	lsrs	r4, r4, #5
 8002c92:	fba2 2b04 	umull	r2, fp, r2, r4
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002c96:	4a26      	ldr	r2, [pc, #152]	; (8002d30 <uPMU_Str_Data+0x1210>)
 8002c98:	08db      	lsrs	r3, r3, #3
 8002c9a:	fba2 2a03 	umull	r2, sl, r2, r3
	*((*str)++) = (data / 100000) % 10 + '0';
 8002c9e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002ca2:	ea4f 02db 	mov.w	r2, fp, lsr #3
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002ca6:	ea4f 0ede 	mov.w	lr, lr, lsr #3
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002caa:	08c9      	lsrs	r1, r1, #3
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002cac:	ea4f 0ada 	mov.w	sl, sl, lsr #3
	*((*str)++) = (data / 100000) % 10 + '0';
 8002cb0:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002cb4:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002cb8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002cbc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002cc0:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	*((*str)++) = (data / 100000) % 10 + '0';
 8002cc4:	eba9 0c4c 	sub.w	ip, r9, ip, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8002cc8:	eb03 0983 	add.w	r9, r3, r3, lsl #2
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002ccc:	eba7 074e 	sub.w	r7, r7, lr, lsl #1
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002cd0:	eba6 0641 	sub.w	r6, r6, r1, lsl #1
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002cd4:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002cd8:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
	*((*str)++) = (data         ) % 10 + '0';
 8002cdc:	eba0 0049 	sub.w	r0, r0, r9, lsl #1
	*((*str)++) = (data / 100000) % 10 + '0';
 8002ce0:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002ce4:	3730      	adds	r7, #48	; 0x30
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002ce6:	3630      	adds	r6, #48	; 0x30
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002ce8:	3430      	adds	r4, #48	; 0x30
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002cea:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data         ) % 10 + '0';
 8002cec:	3030      	adds	r0, #48	; 0x30
	*str++ = '\n';
 8002cee:	f04f 0e0a 	mov.w	lr, #10
	*str++ = '\r';
 8002cf2:	210d      	movs	r1, #13
	*str++ = '\0';
 8002cf4:	2200      	movs	r2, #0
	*((*str)++) = (data / 100000) % 10 + '0';
 8002cf6:	f885 c093 	strb.w	ip, [r5, #147]	; 0x93
	*((*str)++) = (data / 10000 ) % 10 + '0';
 8002cfa:	f885 7094 	strb.w	r7, [r5, #148]	; 0x94
	*((*str)++) = (data / 1000  ) % 10 + '0';
 8002cfe:	f885 6096 	strb.w	r6, [r5, #150]	; 0x96
	*((*str)++) = (data / 100   ) % 10 + '0';
 8002d02:	f885 4097 	strb.w	r4, [r5, #151]	; 0x97
	*((*str)++) = (data / 10    ) % 10 + '0';
 8002d06:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
	*((*str)++) = (data         ) % 10 + '0';
 8002d0a:	f885 0099 	strb.w	r0, [r5, #153]	; 0x99
	*str++ = '\n';
 8002d0e:	f885 e09a 	strb.w	lr, [r5, #154]	; 0x9a
	*str++ = '\r';
 8002d12:	f885 109b 	strb.w	r1, [r5, #155]	; 0x9b
	*str++ = '\0';
 8002d16:	f885 209c 	strb.w	r2, [r5, #156]	; 0x9c
}
 8002d1a:	b003      	add	sp, #12
 8002d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d20:	eb1c432d 	.word	0xeb1c432d
 8002d24:	3f0a36e2 	.word	0x3f0a36e2
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	40c38800 	.word	0x40c38800
 8002d30:	cccccccd 	.word	0xcccccccd
 8002d34:	51eb851f 	.word	0x51eb851f
 8002d38:	2001a23c 	.word	0x2001a23c

08002d3c <uPMU_Send_Data>:
	//*((*str)++) = '#';

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void uPMU_Send_Data(void){
	USART2_Tx_Str(DATA_String,sizeof(DATA_String));
 8002d3c:	219d      	movs	r1, #157	; 0x9d
 8002d3e:	4801      	ldr	r0, [pc, #4]	; (8002d44 <uPMU_Send_Data+0x8>)
 8002d40:	f000 b9c6 	b.w	80030d0 <USART2_Tx_Str>
 8002d44:	2001a138 	.word	0x2001a138

08002d48 <SysTick_Init>:

volatile uint32_t SysTickCounter = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** SysTick initial configuration **/
void SysTick_Init(void) {
 8002d48:	b538      	push	{r3, r4, r5, lr}

	/* Update clock configuration */
	SystemCoreClockUpdate();
 8002d4a:	f000 fb1b 	bl	8003384 <SystemCoreClockUpdate>

	/* Check clock configuration */
	if(SystemCoreClock != CPU_PLL_CLK) {
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <SysTick_Init+0x30>)
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <SysTick_Init+0x34>)
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d000      	beq.n	8002d5a <SysTick_Init+0x12>
 8002d58:	e7fe      	b.n	8002d58 <SysTick_Init+0x10>
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <SysTick_Init+0x38>)
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002d5c:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <SysTick_Init+0x3c>)
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002d5e:	2100      	movs	r1, #0
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002d60:	f641 15a1 	movw	r5, #6561	; 0x19a1
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002d64:	24f0      	movs	r4, #240	; 0xf0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d66:	2007      	movs	r0, #7
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002d68:	605d      	str	r5, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002d6a:	f882 4023 	strb.w	r4, [r2, #35]	; 0x23
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002d6e:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d70:	6018      	str	r0, [r3, #0]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002d72:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 8002d76:	bd38      	pop	{r3, r4, r5, pc}
 8002d78:	20000010 	.word	0x20000010
 8002d7c:	0a037a00 	.word	0x0a037a00
 8002d80:	e000e010 	.word	0xe000e010
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <SysTick_IncrementTicks_CallBack>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** increment SysTick counter callback **/
void SysTick_IncrementTicks_CallBack(void) {

	/* Falling Edge of the Convert Signal */
	ODR_CON_CV_BITBAND = RESET;
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <SysTick_IncrementTicks_CallBack+0x28>)

	/* Accumulate the SysTick Timer Clock */
	if(!((++SysTickCounter) % SYSTICK_ACC)){
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <SysTick_IncrementTicks_CallBack+0x2c>)
	ODR_CON_CV_BITBAND = RESET;
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	6019      	str	r1, [r3, #0]
	if(!((++SysTickCounter) % SYSTICK_ACC)){
 8002d90:	6813      	ldr	r3, [r2, #0]
 8002d92:	3301      	adds	r3, #1
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	f013 0f01 	tst.w	r3, #1
		SysTick->LOAD  = SYSTICK_CONFIG1;
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <SysTick_IncrementTicks_CallBack+0x30>)
 8002d9c:	bf0c      	ite	eq
 8002d9e:	f641 12a1 	movweq	r2, #6561	; 0x19a1
	}else{
		SysTick->LOAD  = SYSTICK_CONFIG0;
 8002da2:	f641 12a2 	movwne	r2, #6562	; 0x19a2
 8002da6:	605a      	str	r2, [r3, #4]
	}

	/* Rising Edge of the Convert Signal */
	ODR_CON_CV_BITBAND = SET;
 8002da8:	4b01      	ldr	r3, [pc, #4]	; (8002db0 <SysTick_IncrementTicks_CallBack+0x28>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	4770      	bx	lr
 8002db0:	424202a4 	.word	0x424202a4
 8002db4:	2001a104 	.word	0x2001a104
 8002db8:	e000e010 	.word	0xe000e010

08002dbc <SysTick_GetCurrentTick>:
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Return current SysTick counter **/
uint32_t SysTick_GetCurrentTick(void) {
	return(SysTickCounter);
 8002dbc:	4b01      	ldr	r3, [pc, #4]	; (8002dc4 <SysTick_GetCurrentTick+0x8>)
 8002dbe:	6818      	ldr	r0, [r3, #0]
}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	2001a104 	.word	0x2001a104

08002dc8 <USART2_TX_DMA_Config>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Configure DMA USART2 TX  **/
void USART2_TX_DMA_Config(void){

	/* Enable DMA clock in RCC */
	RCC->AHB1ENR |= USART2_DMA_CLOCK;
 8002dc8:	491f      	ldr	r1, [pc, #124]	; (8002e48 <USART2_TX_DMA_Config+0x80>)

	/* Make sure that the DMA2 stream 7 is disabled */
	if(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_TX_STREAM->CR)) {
 8002dca:	4a20      	ldr	r2, [pc, #128]	; (8002e4c <USART2_TX_DMA_Config+0x84>)
	RCC->AHB1ENR |= USART2_DMA_CLOCK;
 8002dcc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002dd2:	630b      	str	r3, [r1, #48]	; 0x30
	if(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_TX_STREAM->CR)) {
 8002dd4:	6813      	ldr	r3, [r2, #0]
 8002dd6:	07d9      	lsls	r1, r3, #31
 8002dd8:	d506      	bpl.n	8002de8 <USART2_TX_DMA_Config+0x20>

	    /* DMA 2 stream 7 is enabled, shall be disabled first */
	    USART2_TX_STREAM->CR &= ~DMA_SxCR_EN;
 8002dda:	6813      	ldr	r3, [r2, #0]
 8002ddc:	f023 0301 	bic.w	r3, r3, #1
 8002de0:	6013      	str	r3, [r2, #0]

	    /* Wait until EN bit is cleared */
	    while(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_TX_STREAM->CR));
 8002de2:	6813      	ldr	r3, [r2, #0]
 8002de4:	07db      	lsls	r3, r3, #31
 8002de6:	d4fc      	bmi.n	8002de2 <USART2_TX_DMA_Config+0x1a>
	}

	/* Select the DMA USART2 STREAM CHSEL in CHSEL[2:0] in the DMA_SxCR */
	USART2_TX_STREAM->CR &= ~DMA_SxCR_CHSEL;
 8002de8:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <USART2_TX_DMA_Config+0x84>)

	/* Enable DMA transfer complete interrupt */
	USART2_TX_STREAM->CR |= DMA_SxCR_TCIE;

	/* Set peripheral address */
	USART2_TX_STREAM->PAR = (uint32_t)&USART2->DR;
 8002dea:	4919      	ldr	r1, [pc, #100]	; (8002e50 <USART2_TX_DMA_Config+0x88>)
	USART2_TX_STREAM->CR &= ~DMA_SxCR_CHSEL;
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8002df2:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR |= USART2_STREAM_CHSEL;
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002dfa:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR |= DMA_SxCR_PL;
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002e02:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR &= ~DMA_SxCR_DIR;
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002e0a:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR |=  DMA_SxCR_DIR_0;
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e12:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR &= ~DMA_SxCR_MSIZE;
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8002e1a:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR &= ~DMA_SxCR_PSIZE;
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8002e22:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->FCR |= DMA_SxFCR_DMDIS;
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	f042 0204 	orr.w	r2, r2, #4
 8002e2a:	615a      	str	r2, [r3, #20]
	USART2_TX_STREAM->FCR |= (DMA_SxFCR_FTH_0 | DMA_SxFCR_FTH_1);
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	f042 0203 	orr.w	r2, r2, #3
 8002e32:	615a      	str	r2, [r3, #20]
	USART2_TX_STREAM->CR |= DMA_SxCR_MINC;
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e3a:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR |= DMA_SxCR_TCIE;
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	f042 0210 	orr.w	r2, r2, #16
 8002e42:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->PAR = (uint32_t)&USART2->DR;
 8002e44:	6099      	str	r1, [r3, #8]
}
 8002e46:	4770      	bx	lr
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	400260a0 	.word	0x400260a0
 8002e50:	40004404 	.word	0x40004404

08002e54 <USART2_RX_DMA_Config>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Configure DMA USART2 RX   **/
void USART2_RX_DMA_Config(void){

	/* Enable DMA clock in RCC */
	RCC->AHB1ENR |= USART2_DMA_CLOCK;
 8002e54:	4921      	ldr	r1, [pc, #132]	; (8002edc <USART2_RX_DMA_Config+0x88>)

	/* Make sure that the DMA2 stream 5 is disabled */
	if(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_RX_STREAM->CR)) {
 8002e56:	4a22      	ldr	r2, [pc, #136]	; (8002ee0 <USART2_RX_DMA_Config+0x8c>)
	RCC->AHB1ENR |= USART2_DMA_CLOCK;
 8002e58:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002e5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
void USART2_RX_DMA_Config(void){
 8002e5e:	b410      	push	{r4}
	RCC->AHB1ENR |= USART2_DMA_CLOCK;
 8002e60:	630b      	str	r3, [r1, #48]	; 0x30
	if(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_RX_STREAM->CR)) {
 8002e62:	6813      	ldr	r3, [r2, #0]
 8002e64:	07d9      	lsls	r1, r3, #31
 8002e66:	d506      	bpl.n	8002e76 <USART2_RX_DMA_Config+0x22>

		/* DMA USART2 TX STREAM is enabled, shall be disabled first */
		USART2_RX_STREAM->CR &= ~DMA_SxCR_EN;
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	6013      	str	r3, [r2, #0]

		/* Wait until EN bit is cleared */
		while(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_RX_STREAM->CR));
 8002e70:	6813      	ldr	r3, [r2, #0]
 8002e72:	07db      	lsls	r3, r3, #31
 8002e74:	d4fc      	bmi.n	8002e70 <USART2_RX_DMA_Config+0x1c>
	}

	/* Select the DMA USART2 channel in CHSEL[2:0] in the DMA_SxCR */
	USART2_RX_STREAM->CR &= ~DMA_SxCR_CHSEL;
 8002e76:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <USART2_RX_DMA_Config+0x8c>)

	/* Enable DMA transfer complete interrupt */
	USART2_RX_STREAM->CR |= DMA_SxCR_TCIE;

	/* Set peripheral address */
	USART2_RX_STREAM->PAR = (uint32_t)&USART2->DR;
 8002e78:	481a      	ldr	r0, [pc, #104]	; (8002ee4 <USART2_RX_DMA_Config+0x90>)
	USART2_RX_STREAM->CR &= ~DMA_SxCR_CHSEL;
 8002e7a:	681a      	ldr	r2, [r3, #0]

	/* Set memory address */
	USART2_RX_STREAM->M0AR = (uint32_t)RxDMABuffer;
 8002e7c:	491a      	ldr	r1, [pc, #104]	; (8002ee8 <USART2_RX_DMA_Config+0x94>)
	USART2_RX_STREAM->CR &= ~DMA_SxCR_CHSEL;
 8002e7e:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8002e82:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->CR |= USART2_STREAM_CHSEL;
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002e8a:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->CR |= DMA_SxCR_PL;
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002e92:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->CR &= ~DMA_SxCR_DIR;
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002e9a:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->CR &= ~DMA_SxCR_MSIZE;
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8002ea2:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->CR &= ~DMA_SxCR_PSIZE;
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8002eaa:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->FCR |= DMA_SxFCR_DMDIS;
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	f042 0204 	orr.w	r2, r2, #4
 8002eb2:	615a      	str	r2, [r3, #20]
	USART2_RX_STREAM->FCR |= (DMA_SxFCR_FTH_0 | DMA_SxFCR_FTH_1);
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	f042 0203 	orr.w	r2, r2, #3
 8002eba:	615a      	str	r2, [r3, #20]
	USART2_RX_STREAM->CR |= DMA_SxCR_MINC;
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ec2:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->CR |= DMA_SxCR_TCIE;
 8002ec4:	681a      	ldr	r2, [r3, #0]

	/* Set number of data items */
	USART2_RX_STREAM->NDTR = MAX_BUFFER_LENGTH;
 8002ec6:	2414      	movs	r4, #20
	USART2_RX_STREAM->CR |= DMA_SxCR_TCIE;
 8002ec8:	f042 0210 	orr.w	r2, r2, #16
 8002ecc:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->PAR = (uint32_t)&USART2->DR;
 8002ece:	6098      	str	r0, [r3, #8]
	USART2_RX_STREAM->M0AR = (uint32_t)RxDMABuffer;
 8002ed0:	60d9      	str	r1, [r3, #12]
	USART2_RX_STREAM->NDTR = MAX_BUFFER_LENGTH;
 8002ed2:	605c      	str	r4, [r3, #4]

}
 8002ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40026088 	.word	0x40026088
 8002ee4:	40004404 	.word	0x40004404
 8002ee8:	2001a120 	.word	0x2001a120

08002eec <uPMU_UART_Init>:
	  RCC->AHB1ENR |= USART2_GPIO_RCC_AHB1ENR;
 8002eec:	4929      	ldr	r1, [pc, #164]	; (8002f94 <uPMU_UART_Init+0xa8>)
	/* Configure USART2 */
	/* Enable USART2 clock */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;

	/* Select OverSampling by 16 mode */
	USART2->CR1 &= ~USART_CR1_OVER8;
 8002eee:	4a2a      	ldr	r2, [pc, #168]	; (8002f98 <uPMU_UART_Init+0xac>)
	  RCC->AHB1ENR |= USART2_GPIO_RCC_AHB1ENR;
 8002ef0:	6b08      	ldr	r0, [r1, #48]	; 0x30
void uPMU_UART_Init(void){
 8002ef2:	b538      	push	{r3, r4, r5, lr}
	  RCC->AHB1ENR |= USART2_GPIO_RCC_AHB1ENR;
 8002ef4:	f040 0001 	orr.w	r0, r0, #1
	  USART2_GPIO_PORT->MODER   &= ~((Mode_AN	<<tx_bit) | (Mode_AN	<<rx_bit));
 8002ef8:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <uPMU_UART_Init+0xb0>)
	  RCC->AHB1ENR |= USART2_GPIO_RCC_AHB1ENR;
 8002efa:	6308      	str	r0, [r1, #48]	; 0x30
	  USART2_GPIO_PORT->MODER   &= ~((Mode_AN	<<tx_bit) | (Mode_AN	<<rx_bit));
 8002efc:	6818      	ldr	r0, [r3, #0]
	  (PERIPH_BITBAND(((uint32_t)(&USART2_GPIO_PORT->OTYPER)), (tx_bit/2))) = OTYPER_PP;
 8002efe:	4c28      	ldr	r4, [pc, #160]	; (8002fa0 <uPMU_UART_Init+0xb4>)
	  USART2_GPIO_PORT->MODER   &= ~((Mode_AN	<<tx_bit) | (Mode_AN	<<rx_bit));
 8002f00:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8002f04:	6018      	str	r0, [r3, #0]
	  USART2_GPIO_PORT->MODER   |=   (Mode_AF	<<tx_bit) | (Mode_AF	<<rx_bit);
 8002f06:	6818      	ldr	r0, [r3, #0]
	  (PERIPH_BITBAND(((uint32_t)(&USART2_GPIO_PORT->OTYPER)), (tx_bit/2))) = OTYPER_PP;
 8002f08:	2500      	movs	r5, #0
	  USART2_GPIO_PORT->MODER   |=   (Mode_AF	<<tx_bit) | (Mode_AF	<<rx_bit);
 8002f0a:	f040 00a0 	orr.w	r0, r0, #160	; 0xa0
 8002f0e:	6018      	str	r0, [r3, #0]
	  (PERIPH_BITBAND(((uint32_t)(&USART2_GPIO_PORT->OTYPER)), (tx_bit/2))) = OTYPER_PP;
 8002f10:	6025      	str	r5, [r4, #0]
	  USART2_GPIO_PORT->AFR[(tx_bit >> 4)] |= ((uint32_t)USART2_AF << (4 * ((tx_bit/2) & 0x7)));
 8002f12:	6a18      	ldr	r0, [r3, #32]
 8002f14:	f440 60e0 	orr.w	r0, r0, #1792	; 0x700
 8002f18:	6218      	str	r0, [r3, #32]
	  USART2_GPIO_PORT->AFR[(rx_bit >> 4)] |= ((uint32_t)USART2_AF << (4 * ((rx_bit/2) & 0x7)));
 8002f1a:	6a18      	ldr	r0, [r3, #32]
 8002f1c:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
 8002f20:	6218      	str	r0, [r3, #32]
	  USART2_GPIO_PORT->OSPEEDR &=~(OSPEEDR_VERY	<<tx_bit);
 8002f22:	6898      	ldr	r0, [r3, #8]
 8002f24:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8002f28:	6098      	str	r0, [r3, #8]
	  USART2_GPIO_PORT->OSPEEDR |= (OSPEEDR_MEDIUM	<<tx_bit);
 8002f2a:	6898      	ldr	r0, [r3, #8]
 8002f2c:	f040 0010 	orr.w	r0, r0, #16
 8002f30:	6098      	str	r0, [r3, #8]
	  USART2_GPIO_PORT->PUPDR   &= ~((PUPDR_RST	<<tx_bit) | (PUPDR_RST	<<rx_bit));
 8002f32:	68d8      	ldr	r0, [r3, #12]
 8002f34:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8002f38:	60d8      	str	r0, [r3, #12]
	  USART2_GPIO_PORT->PUPDR   |=   (PUPDR_NO	<<tx_bit) | (PUPDR_NO	<<rx_bit);
 8002f3a:	68d8      	ldr	r0, [r3, #12]
 8002f3c:	60d8      	str	r0, [r3, #12]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8002f3e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f44:	640b      	str	r3, [r1, #64]	; 0x40
	USART2->CR1 &= ~USART_CR1_OVER8;
 8002f46:	8993      	ldrh	r3, [r2, #12]
 8002f48:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f4c:	8193      	strh	r3, [r2, #12]
	/* Select 1 Start bit, 9 Data bits, n Stop bit */
	USART2->CR1 |=  USART_CR1_M;
 8002f4e:	8993      	ldrh	r3, [r2, #12]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f56:	8193      	strh	r3, [r2, #12]
	/* Select 1 stop bit */
	USART2->CR2 &= ~USART_CR2_STOP;
 8002f58:	8a13      	ldrh	r3, [r2, #16]
 8002f5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	8213      	strh	r3, [r2, #16]
	/* Enable parity control */
	USART2->CR1 |= USART_CR1_PCE;
 8002f64:	8993      	ldrh	r3, [r2, #12]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6c:	8193      	strh	r3, [r2, #12]
	/* Select odd parity */
	USART2->CR1 |= USART_CR1_PS;
 8002f6e:	8993      	ldrh	r3, [r2, #12]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f76:	8193      	strh	r3, [r2, #12]

	/* Select one sample bit method */
	USART2->CR3 |= USART_CR3_ONEBIT;
 8002f78:	8a93      	ldrh	r3, [r2, #20]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	 * DIV_Fraction = 16 * 0.82 = 13.12 = 13 = 0xD
	 * DIV_Mantissa = 48 = 0x30
	 *
	 * BRR          = 0x30D */

	USART2->BRR  = (DIV_Mantissa << 4)  + DIV_Fraction;
 8002f80:	f240 116d 	movw	r1, #365	; 0x16d
	USART2->CR3 |= USART_CR3_ONEBIT;
 8002f84:	8293      	strh	r3, [r2, #20]
	USART2->BRR  = (DIV_Mantissa << 4)  + DIV_Fraction;
 8002f86:	8111      	strh	r1, [r2, #8]
	USART2_TX_DMA_Config();
 8002f88:	f7ff ff1e 	bl	8002dc8 <USART2_TX_DMA_Config>
}
 8002f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART2_RX_DMA_Config();
 8002f90:	f7ff bf60 	b.w	8002e54 <USART2_RX_DMA_Config>
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40004400 	.word	0x40004400
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	42400088 	.word	0x42400088

08002fa4 <USART2_Enable>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Enable USART2 transmitter and receiver **/
void USART2_Enable(void){

	/* Enable USART2 */
	USART2->CR1 |= USART_CR1_UE;
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <USART2_Enable+0x6c>)
	/* Enable DMA mode for transmitter and receiver */
	USART2->CR3 |= USART_CR3_DMAT;
	USART2->CR3 |= USART_CR3_DMAR;

    /* Clear all interrupt flags */
    USART2_DMA->HIFCR = USART2_RX_DMA_FLAGS;
 8002fa6:	481b      	ldr	r0, [pc, #108]	; (8003014 <USART2_Enable+0x70>)
	USART2->CR1 |= USART_CR1_UE;
 8002fa8:	899a      	ldrh	r2, [r3, #12]
    /* Enable DMA 2 stream 5 */
    USART2_RX_STREAM->CR |= DMA_SxCR_EN;
 8002faa:	491b      	ldr	r1, [pc, #108]	; (8003018 <USART2_Enable+0x74>)
	USART2->CR1 |= USART_CR1_UE;
 8002fac:	b292      	uxth	r2, r2
 8002fae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
void USART2_Enable(void){
 8002fb2:	b410      	push	{r4}
	USART2->CR1 |= USART_CR1_UE;
 8002fb4:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_TE;
 8002fb6:	899a      	ldrh	r2, [r3, #12]
 8002fb8:	b292      	uxth	r2, r2
 8002fba:	f042 0208 	orr.w	r2, r2, #8
 8002fbe:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_RE;
 8002fc0:	899a      	ldrh	r2, [r3, #12]
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	f042 0204 	orr.w	r2, r2, #4
 8002fc8:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;
 8002fca:	899a      	ldrh	r2, [r3, #12]
 8002fcc:	b292      	uxth	r2, r2
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_PEIE;
 8002fd4:	899a      	ldrh	r2, [r3, #12]
 8002fd6:	b292      	uxth	r2, r2
 8002fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fdc:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_IDLEIE;
 8002fde:	899a      	ldrh	r2, [r3, #12]
 8002fe0:	b292      	uxth	r2, r2
 8002fe2:	f042 0210 	orr.w	r2, r2, #16
 8002fe6:	819a      	strh	r2, [r3, #12]
	USART2->CR3 |= USART_CR3_DMAT;
 8002fe8:	8a9a      	ldrh	r2, [r3, #20]
 8002fea:	b292      	uxth	r2, r2
 8002fec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ff0:	829a      	strh	r2, [r3, #20]
	USART2->CR3 |= USART_CR3_DMAR;
 8002ff2:	8a9a      	ldrh	r2, [r3, #20]
 8002ff4:	b292      	uxth	r2, r2
    USART2_DMA->HIFCR = USART2_RX_DMA_FLAGS;
 8002ff6:	f44f 6474 	mov.w	r4, #3904	; 0xf40
	USART2->CR3 |= USART_CR3_DMAR;
 8002ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ffe:	829a      	strh	r2, [r3, #20]
    USART2_DMA->HIFCR = USART2_RX_DMA_FLAGS;
 8003000:	60c4      	str	r4, [r0, #12]
    USART2_RX_STREAM->CR |= DMA_SxCR_EN;
 8003002:	680b      	ldr	r3, [r1, #0]

}
 8003004:	f85d 4b04 	ldr.w	r4, [sp], #4
    USART2_RX_STREAM->CR |= DMA_SxCR_EN;
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	600b      	str	r3, [r1, #0]
}
 800300e:	4770      	bx	lr
 8003010:	40004400 	.word	0x40004400
 8003014:	40026000 	.word	0x40026000
 8003018:	40026088 	.word	0x40026088

0800301c <USART2_IRQ_CallBack>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** IRQ callback function **/
void USART2_IRQ_CallBack(void){

	/* Check if parity error detected */
	if((USART2->SR & USART_SR_PE) == USART_SR_PE){
 800301c:	4a10      	ldr	r2, [pc, #64]	; (8003060 <USART2_IRQ_CallBack+0x44>)
 800301e:	8813      	ldrh	r3, [r2, #0]
 8003020:	07d8      	lsls	r0, r3, #31
 8003022:	d40f      	bmi.n	8003044 <USART2_IRQ_CallBack+0x28>
	    /* Disable DMA stream for RX */
		USART2_RX_STREAM->CR &= ~DMA_SxCR_EN;
	}

	/* Check USART receiver */
	if((USART2->SR & USART_SR_RXNE) == USART_SR_RXNE){
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <USART2_IRQ_CallBack+0x44>)
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	0692      	lsls	r2, r2, #26
 800302a:	d50a      	bpl.n	8003042 <USART2_IRQ_CallBack+0x26>

		/* Read character */
		RxChar = USART2->DR;
 800302c:	480d      	ldr	r0, [pc, #52]	; (8003064 <USART2_IRQ_CallBack+0x48>)
 800302e:	889b      	ldrh	r3, [r3, #4]

		/* Set IRQ status */
		currentIRQStatus = USART2_CHAR_RECEIVED;

	    /* Disable DMA stream for RX */
		USART2_RX_STREAM->CR &= ~DMA_SxCR_EN;
 8003030:	4a0d      	ldr	r2, [pc, #52]	; (8003068 <USART2_IRQ_CallBack+0x4c>)
		currentIRQStatus = USART2_CHAR_RECEIVED;
 8003032:	490e      	ldr	r1, [pc, #56]	; (800306c <USART2_IRQ_CallBack+0x50>)
		RxChar = USART2->DR;
 8003034:	7003      	strb	r3, [r0, #0]
		currentIRQStatus = USART2_CHAR_RECEIVED;
 8003036:	2301      	movs	r3, #1
 8003038:	700b      	strb	r3, [r1, #0]
		USART2_RX_STREAM->CR &= ~DMA_SxCR_EN;
 800303a:	6813      	ldr	r3, [r2, #0]
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4770      	bx	lr
		while((USART2->SR & USART_SR_RXNE) != USART_SR_RXNE);
 8003044:	8813      	ldrh	r3, [r2, #0]
 8003046:	0699      	lsls	r1, r3, #26
 8003048:	d5fc      	bpl.n	8003044 <USART2_IRQ_CallBack+0x28>
		currentIRQStatus = USART2_PARITY_ERROR;
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <USART2_IRQ_CallBack+0x50>)
		USART2_RX_STREAM->CR &= ~DMA_SxCR_EN;
 800304c:	4906      	ldr	r1, [pc, #24]	; (8003068 <USART2_IRQ_CallBack+0x4c>)
		USART2->DR;
 800304e:	8892      	ldrh	r2, [r2, #4]
		currentIRQStatus = USART2_PARITY_ERROR;
 8003050:	2202      	movs	r2, #2
 8003052:	701a      	strb	r2, [r3, #0]
		USART2_RX_STREAM->CR &= ~DMA_SxCR_EN;
 8003054:	680b      	ldr	r3, [r1, #0]
 8003056:	f023 0301 	bic.w	r3, r3, #1
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	e7e2      	b.n	8003024 <USART2_IRQ_CallBack+0x8>
 800305e:	bf00      	nop
 8003060:	40004400 	.word	0x40004400
 8003064:	2001a11d 	.word	0x2001a11d
 8003068:	40026088 	.word	0x40026088
 800306c:	2001a135 	.word	0x2001a135

08003070 <USART2_TX_DMA_IRQ_Callback>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** IRQ callback function **/
void USART2_TX_DMA_IRQ_Callback(void){

	/* Check transfer complete flag */
	if(USART2_TX_DMA_TCIF == (USART2_TX_DMA_TCIF & USART2_DMA->HISR)) {
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <USART2_TX_DMA_IRQ_Callback+0x10>)
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	0292      	lsls	r2, r2, #10

		/* Clear all interrupt flags */
		USART2_DMA->HIFCR = USART2_TX_DMA_FLAGS;
 8003076:	bf44      	itt	mi
 8003078:	f44f 1274 	movmi.w	r2, #3997696	; 0x3d0000
 800307c:	60da      	strmi	r2, [r3, #12]
 800307e:	4770      	bx	lr
 8003080:	40026000 	.word	0x40026000

08003084 <USART2_RX_DMA_IRQ_Callback>:
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** IRQ callback function **/
void USART2_RX_DMA_IRQ_Callback(void){
 8003084:	b508      	push	{r3, lr}

	/* Check transfer complete flag */
	if(USART2_RX_DMA_TCIF == (USART2_RX_DMA_TCIF & USART2_DMA->HISR))
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <USART2_RX_DMA_IRQ_Callback+0x38>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	051b      	lsls	r3, r3, #20
 800308c:	d515      	bpl.n	80030ba <USART2_RX_DMA_IRQ_Callback+0x36>
	  {
	    /* Calculate amount of data received */
	    RxMessageLength = MAX_BUFFER_LENGTH - USART2_RX_STREAM->NDTR;
 800308e:	4a0c      	ldr	r2, [pc, #48]	; (80030c0 <USART2_RX_DMA_IRQ_Callback+0x3c>)
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <USART2_RX_DMA_IRQ_Callback+0x40>)
 8003092:	6852      	ldr	r2, [r2, #4]
 8003094:	f1c2 0214 	rsb	r2, r2, #20
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	701a      	strb	r2, [r3, #0]

	    /* Copy data into RX buffer */
	    for(int idx = 0; idx < RxMessageLength; idx++) {
 800309c:	b11a      	cbz	r2, 80030a6 <USART2_RX_DMA_IRQ_Callback+0x22>
 800309e:	490a      	ldr	r1, [pc, #40]	; (80030c8 <USART2_RX_DMA_IRQ_Callback+0x44>)
 80030a0:	480a      	ldr	r0, [pc, #40]	; (80030cc <USART2_RX_DMA_IRQ_Callback+0x48>)
 80030a2:	f000 f9cb 	bl	800343c <memcpy>
	    	/* Error detected, discard the received data */
	    	RxMessageLength = 0;
	    }

	    /* Clear all interrupt flags */
	    USART2_DMA->HIFCR = USART2_RX_DMA_FLAGS;
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <USART2_RX_DMA_IRQ_Callback+0x38>)

	    /* Enable DMA 2 stream 5 */
	    USART2_RX_STREAM->CR |= DMA_SxCR_EN;
 80030a8:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <USART2_RX_DMA_IRQ_Callback+0x3c>)
	    USART2_DMA->HIFCR = USART2_RX_DMA_FLAGS;
 80030aa:	f44f 6174 	mov.w	r1, #3904	; 0xf40
 80030ae:	60d9      	str	r1, [r3, #12]
	    USART2_RX_STREAM->CR |= DMA_SxCR_EN;
 80030b0:	6813      	ldr	r3, [r2, #0]
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	bd08      	pop	{r3, pc}
 80030ba:	bd08      	pop	{r3, pc}
 80030bc:	40026000 	.word	0x40026000
 80030c0:	40026088 	.word	0x40026088
 80030c4:	2001a134 	.word	0x2001a134
 80030c8:	2001a120 	.word	0x2001a120
 80030cc:	2001a108 	.word	0x2001a108

080030d0 <USART2_Tx_Str>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** String Transmission **/
void USART2_Tx_Str(const char* str, uint32_t size){

	/* Check null pointers */
	if(str != NULL) {
 80030d0:	b168      	cbz	r0, 80030ee <USART2_Tx_Str+0x1e>

	    /* Wait until DMA USART2 TX STREAM is disabled */
	    while(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_TX_STREAM->CR));
 80030d2:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <USART2_Tx_Str+0x20>)
 80030d4:	6813      	ldr	r3, [r2, #0]
 80030d6:	07db      	lsls	r3, r3, #31
 80030d8:	d4fc      	bmi.n	80030d4 <USART2_Tx_Str+0x4>

	    /* Set number of data items */
	    USART2_TX_STREAM->NDTR = size;

	    /* Clear all interrupt flags */
	    USART2_DMA->HIFCR = USART2_TX_DMA_FLAGS;
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <USART2_Tx_Str+0x24>)
	    USART2_TX_STREAM->M0AR = (uint32_t)str;
 80030dc:	60d0      	str	r0, [r2, #12]
	    USART2_DMA->HIFCR = USART2_TX_DMA_FLAGS;
 80030de:	f44f 1074 	mov.w	r0, #3997696	; 0x3d0000
	    USART2_TX_STREAM->NDTR = size;
 80030e2:	6051      	str	r1, [r2, #4]
	    USART2_DMA->HIFCR = USART2_TX_DMA_FLAGS;
 80030e4:	60d8      	str	r0, [r3, #12]

	    /* Enable DMA1 stream 6 */
	    USART2_TX_STREAM->CR |= DMA_SxCR_EN;
 80030e6:	6813      	ldr	r3, [r2, #0]
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4770      	bx	lr
 80030f0:	400260a0 	.word	0x400260a0
 80030f4:	40026000 	.word	0x40026000

080030f8 <main>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** main function */
int main(void) {

#if (__FPU_USED == 1)
    SCB->CPACR |= (3UL << 20) | (3UL << 22);
 80030f8:	4a0d      	ldr	r2, [pc, #52]	; (8003130 <main+0x38>)
int main(void) {
 80030fa:	b508      	push	{r3, lr}
    SCB->CPACR |= (3UL << 20) | (3UL << 22);
 80030fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 8003108:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
 800310c:	f3bf 8f6f 	isb	sy
   __DSB();
   __ISB();
#endif

	SysTick_Init();
 8003110:	f7ff fe1a 	bl	8002d48 <SysTick_Init>
	OnBoard_Init();
 8003114:	f7fe faee 	bl	80016f4 <OnBoard_Init>

	uPMU_GPIO_Init();
 8003118:	f7fe f9ea 	bl	80014f0 <uPMU_GPIO_Init>
	uPMU_NVIC_Init();
 800311c:	f7fe fbec 	bl	80018f8 <uPMU_NVIC_Init>
	uPMU_UART_Init();
 8003120:	f7ff fee4 	bl	8002eec <uPMU_UART_Init>

	uPMU_Init_Process();
 8003124:	f7fe fc20 	bl	8001968 <uPMU_Init_Process>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003128:	b662      	cpsie	i

	/* Clear PRIMASK, enable IRQs */
	__enable_irq();
	USART2_Enable();
 800312a:	f7ff ff3b 	bl	8002fa4 <USART2_Enable>
 800312e:	e7fe      	b.n	800312e <main+0x36>
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003134:	f8df d038 	ldr.w	sp, [pc, #56]	; 8003170 <LoopFillZerobss+0x16>

  /* Disable interrupt (set PRIMASK) */
  CPSID i
 8003138:	b672      	cpsid	i

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800313a:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800313c:	e003      	b.n	8003146 <LoopCopyDataInit>

0800313e <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8003140:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003142:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003144:	3104      	adds	r1, #4

08003146 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003146:	480c      	ldr	r0, [pc, #48]	; (8003178 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8003148:	4b0c      	ldr	r3, [pc, #48]	; (800317c <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 800314a:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800314c:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800314e:	d3f6      	bcc.n	800313e <CopyDataInit>
  ldr  r2, =_sbss
 8003150:	4a0b      	ldr	r2, [pc, #44]	; (8003180 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8003152:	e002      	b.n	800315a <LoopFillZerobss>

08003154 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003154:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003156:	f842 3b04 	str.w	r3, [r2], #4

0800315a <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 800315c:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800315e:	d3f9      	bcc.n	8003154 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003160:	f000 f888 	bl	8003274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003164:	f000 f946 	bl	80033f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003168:	f7ff ffc6 	bl	80030f8 <main>
  bx  lr    
 800316c:	4770      	bx	lr
 800316e:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003170:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003174:	08004760 	.word	0x08004760
  ldr  r0, =_sdata
 8003178:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800317c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8003180:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8003184:	2001a244 	.word	0x2001a244

08003188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003188:	e7fe      	b.n	8003188 <ADC_IRQHandler>
	...

0800318c <NMI_Handler>:
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop

08003190 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003190:	e7fe      	b.n	8003190 <HardFault_Handler>
 8003192:	bf00      	nop

08003194 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003194:	e7fe      	b.n	8003194 <MemManage_Handler>
 8003196:	bf00      	nop

08003198 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003198:	e7fe      	b.n	8003198 <BusFault_Handler>
 800319a:	bf00      	nop

0800319c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800319c:	e7fe      	b.n	800319c <UsageFault_Handler>
 800319e:	bf00      	nop

080031a0 <SVC_Handler>:
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop

080031a4 <DebugMon_Handler>:
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop

080031a8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop

080031ac <SysTick_Handler>:
/**
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void){
 80031ac:	b508      	push	{r3, lr}

	SysTick_IncrementTicks_CallBack();
 80031ae:	f7ff fdeb 	bl	8002d88 <SysTick_IncrementTicks_CallBack>

	/* Display Error Code */
	if(!(SysTick_GetCurrentTick() % SYSTICK_ERROR_CODE_DELAY)){
		//uPMU_Error_Code_Display();
	}
}
 80031b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if(!(SysTick_GetCurrentTick() % SYSTICK_ERROR_CODE_DELAY)){
 80031b6:	f7ff be01 	b.w	8002dbc <SysTick_GetCurrentTick>
 80031ba:	bf00      	nop

080031bc <EXTI0_IRQHandler>:

/* STM32F4xx Peripherals Interrupt Handlers */
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set EXTI0 interrupt handlers */
void EXTI0_IRQHandler(void) {
 80031bc:	b508      	push	{r3, lr}

	static uint8_t count = 0;

	if(EXTI_Line_Check(BUTTON_USER_Line)){
 80031be:	2001      	movs	r0, #1
 80031c0:	f7fe f97a 	bl	80014b8 <EXTI_Line_Check>
 80031c4:	b900      	cbnz	r0, 80031c8 <EXTI0_IRQHandler+0xc>
 80031c6:	bd08      	pop	{r3, pc}

		/* Do your stuff when EXTI Line 0 */
		uPMU_Set_Error_Code(++count);
 80031c8:	4a06      	ldr	r2, [pc, #24]	; (80031e4 <EXTI0_IRQHandler+0x28>)
 80031ca:	7813      	ldrb	r3, [r2, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	4618      	mov	r0, r3
 80031d2:	7013      	strb	r3, [r2, #0]
 80031d4:	f7fe fb8a 	bl	80018ec <uPMU_Set_Error_Code>

	    /* Clear interrupt flag */
		EXTI_Clear_PendingBit(BUTTON_USER_Line);
 80031d8:	2001      	movs	r0, #1
	}

}
 80031da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		EXTI_Clear_PendingBit(BUTTON_USER_Line);
 80031de:	f7fe b979 	b.w	80014d4 <EXTI_Clear_PendingBit>
 80031e2:	bf00      	nop
 80031e4:	2001a136 	.word	0x2001a136

080031e8 <EXTI1_IRQHandler>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set EXTI1 interrupt handlers */
void EXTI1_IRQHandler(void) {
 80031e8:	b508      	push	{r3, lr}

	if(EXTI_Line_Check(uPMU_PROCESS_Line)){
 80031ea:	2002      	movs	r0, #2
 80031ec:	f7fe f964 	bl	80014b8 <EXTI_Line_Check>
 80031f0:	b900      	cbnz	r0, 80031f4 <EXTI1_IRQHandler+0xc>
 80031f2:	bd08      	pop	{r3, pc}

		/* Do your stuff when EXTI Line 0 */
		uPMU_Str_Data();
 80031f4:	f7fe fc94 	bl	8001b20 <uPMU_Str_Data>
		uPMU_Send_Data();
 80031f8:	f7ff fda0 	bl	8002d3c <uPMU_Send_Data>

	    /* Clear interrupt flag */
		EXTI_Clear_PendingBit(uPMU_PROCESS_Line);
 80031fc:	2002      	movs	r0, #2
	}

}
 80031fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		EXTI_Clear_PendingBit(uPMU_PROCESS_Line);
 8003202:	f7fe b967 	b.w	80014d4 <EXTI_Clear_PendingBit>
 8003206:	bf00      	nop

08003208 <EXTI15_10_IRQHandler>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set EXTI15_10 interrupt handlers */
void EXTI15_10_IRQHandler(void) {
 8003208:	b510      	push	{r4, lr}

 	if(EXTI_Line_Check(CON_ABUSY_Line) | EXTI_Line_Check(CON_BBUSY_Line)){
 800320a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800320e:	f7fe f953 	bl	80014b8 <EXTI_Line_Check>
 8003212:	4604      	mov	r4, r0
 8003214:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003218:	f7fe f94e 	bl	80014b8 <EXTI_Line_Check>
 800321c:	4320      	orrs	r0, r4
 800321e:	f010 0fff 	tst.w	r0, #255	; 0xff
 8003222:	d100      	bne.n	8003226 <EXTI15_10_IRQHandler+0x1e>
 8003224:	bd10      	pop	{r4, pc}

		/* Do your stuff when EXTI Line 0 */
		uPMU_AD7606_Reading();
 8003226:	f7fe fba1 	bl	800196c <uPMU_AD7606_Reading>

	    /* Clear interrupt flag */
		EXTI_Clear_PendingBit(CON_ABUSY_Line);
 800322a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800322e:	f7fe f951 	bl	80014d4 <EXTI_Clear_PendingBit>
		EXTI_Clear_PendingBit(CON_BBUSY_Line);
 8003232:	f44f 5080 	mov.w	r0, #4096	; 0x1000

	}

}
 8003236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		EXTI_Clear_PendingBit(CON_BBUSY_Line);
 800323a:	f7fe b94b 	b.w	80014d4 <EXTI_Clear_PendingBit>
 800323e:	bf00      	nop

08003240 <DMA2_Stream0_IRQHandler>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set DMA2_Stream0 interrupt handlers */
void DMA2_Stream0_IRQHandler(void){
 8003240:	b510      	push	{r4, lr}
	  /* Check transfer complete flag */
	  if(DMA_LISR_TCIF0 == (DMA_LISR_TCIF0 & DMA2->LISR))
 8003242:	4c08      	ldr	r4, [pc, #32]	; (8003264 <DMA2_Stream0_IRQHandler+0x24>)
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	069b      	lsls	r3, r3, #26
 8003248:	d405      	bmi.n	8003256 <DMA2_Stream0_IRQHandler+0x16>
	    DMA2->LIFCR = DMA_LIFCR_CTCIF0;
	  }
	  else
	  {
	    /* Turn on red LED, this interrupt is not handled */
			GPIO_Write_LED(LED4, High);
 800324a:	2101      	movs	r1, #1
 800324c:	200c      	movs	r0, #12
	  }
}
 800324e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			GPIO_Write_LED(LED4, High);
 8003252:	f7fe bb2f 	b.w	80018b4 <GPIO_Write_LED>
			GPIO_Write_LED(LED3, Low);
 8003256:	2100      	movs	r1, #0
 8003258:	200d      	movs	r0, #13
 800325a:	f7fe fb2b 	bl	80018b4 <GPIO_Write_LED>
	    DMA2->LIFCR = DMA_LIFCR_CTCIF0;
 800325e:	2320      	movs	r3, #32
 8003260:	60a3      	str	r3, [r4, #8]
 8003262:	bd10      	pop	{r4, pc}
 8003264:	40026400 	.word	0x40026400

08003268 <DMA1_Stream5_IRQHandler>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set DMA1_Stream5 interrupt handlers */
void DMA1_Stream5_IRQHandler(void) {
	USART2_RX_DMA_IRQ_Callback();
 8003268:	f7ff bf0c 	b.w	8003084 <USART2_RX_DMA_IRQ_Callback>

0800326c <DMA1_Stream6_IRQHandler>:
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set DMA1_Stream1 interrupt handlers */
void DMA1_Stream6_IRQHandler(void) {
	USART2_TX_DMA_IRQ_Callback();
 800326c:	f7ff bf00 	b.w	8003070 <USART2_TX_DMA_IRQ_Callback>

08003270 <USART2_IRQHandler>:
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set USART2 interrupt handlers */
void USART2_IRQHandler(void) {
	USART2_IRQ_CallBack();
 8003270:	f7ff bed4 	b.w	800301c <USART2_IRQ_CallBack>

08003274 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003274:	4b3c      	ldr	r3, [pc, #240]	; (8003368 <SystemInit+0xf4>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003276:	483d      	ldr	r0, [pc, #244]	; (800336c <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 8003278:	681a      	ldr	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800327a:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 800327c:	f042 0201 	orr.w	r2, r2, #1
 8003280:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003282:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800328a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800328e:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8003290:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003292:	681a      	ldr	r2, [r3, #0]
{
 8003294:	b082      	sub	sp, #8
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003296:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800329a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800329c:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800329e:	9100      	str	r1, [sp, #0]
 80032a0:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80032a8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80032aa:	461a      	mov	r2, r3
 80032ac:	e003      	b.n	80032b6 <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80032ae:	9b00      	ldr	r3, [sp, #0]
 80032b0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80032b4:	d009      	beq.n	80032ca <SystemInit+0x56>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80032b6:	6813      	ldr	r3, [r2, #0]
 80032b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032bc:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 80032be:	9b00      	ldr	r3, [sp, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80032c4:	9b01      	ldr	r3, [sp, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f1      	beq.n	80032ae <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <SystemInit+0xf4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 80032d2:	bf18      	it	ne
 80032d4:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80032d6:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 80032d8:	9b01      	ldr	r3, [sp, #4]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d014      	beq.n	8003308 <SystemInit+0x94>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 80032de:	4a22      	ldr	r2, [pc, #136]	; (8003368 <SystemInit+0xf4>)

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 80032e0:	4923      	ldr	r1, [pc, #140]	; (8003370 <SystemInit+0xfc>)
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 80032e2:	6893      	ldr	r3, [r2, #8]
 80032e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032e8:	6093      	str	r3, [r2, #8]
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 80032ea:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 80032ee:	6813      	ldr	r3, [r2, #0]
 80032f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032f4:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 80032f6:	6813      	ldr	r3, [r2, #0]
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	d5fc      	bpl.n	80032f6 <SystemInit+0x82>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032fc:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <SystemInit+0x100>)
 80032fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	b002      	add	sp, #8
 8003306:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003308:	4b17      	ldr	r3, [pc, #92]	; (8003368 <SystemInit+0xf4>)
    PWR->CR |= PWR_CR_PMODE;
 800330a:	491b      	ldr	r1, [pc, #108]	; (8003378 <SystemInit+0x104>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800330c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800330e:	481b      	ldr	r0, [pc, #108]	; (800337c <SystemInit+0x108>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003310:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;
 8003316:	680a      	ldr	r2, [r1, #0]
 8003318:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800331c:	600a      	str	r2, [r1, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003328:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8003330:	609a      	str	r2, [r3, #8]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003332:	6058      	str	r0, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800333a:	601a      	str	r2, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	0192      	lsls	r2, r2, #6
 8003340:	d5fc      	bpl.n	800333c <SystemInit+0xc8>
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003342:	490f      	ldr	r1, [pc, #60]	; (8003380 <SystemInit+0x10c>)
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003344:	4a08      	ldr	r2, [pc, #32]	; (8003368 <SystemInit+0xf4>)
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003346:	f240 6005 	movw	r0, #1541	; 0x605
 800334a:	6008      	str	r0, [r1, #0]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800334c:	6899      	ldr	r1, [r3, #8]
 800334e:	f021 0103 	bic.w	r1, r1, #3
 8003352:	6099      	str	r1, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003354:	6899      	ldr	r1, [r3, #8]
 8003356:	f041 0102 	orr.w	r1, r1, #2
 800335a:	6099      	str	r1, [r3, #8]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800335c:	6893      	ldr	r3, [r2, #8]
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	2b08      	cmp	r3, #8
 8003364:	d1fa      	bne.n	800335c <SystemInit+0xe8>
 8003366:	e7ba      	b.n	80032de <SystemInit+0x6a>
 8003368:	40023800 	.word	0x40023800
 800336c:	24003010 	.word	0x24003010
 8003370:	50003000 	.word	0x50003000
 8003374:	e000ed00 	.word	0xe000ed00
 8003378:	40007000 	.word	0x40007000
 800337c:	07405408 	.word	0x07405408
 8003380:	40023c00 	.word	0x40023c00

08003384 <SystemCoreClockUpdate>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003384:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <SystemCoreClockUpdate+0x5c>)
 8003386:	6893      	ldr	r3, [r2, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 800338c:	2b04      	cmp	r3, #4
 800338e:	d024      	beq.n	80033da <SystemCoreClockUpdate+0x56>
 8003390:	2b08      	cmp	r3, #8
 8003392:	d00a      	beq.n	80033aa <SystemCoreClockUpdate+0x26>
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <SystemCoreClockUpdate+0x60>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003396:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <SystemCoreClockUpdate+0x5c>)
 8003398:	4813      	ldr	r0, [pc, #76]	; (80033e8 <SystemCoreClockUpdate+0x64>)
 800339a:	6892      	ldr	r2, [r2, #8]
  SystemCoreClock >>= tmp;
 800339c:	4913      	ldr	r1, [pc, #76]	; (80033ec <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800339e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80033a2:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 80033a4:	40d3      	lsrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]
 80033a8:	4770      	bx	lr
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80033aa:	6850      	ldr	r0, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ac:	6851      	ldr	r1, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80033ae:	6852      	ldr	r2, [r2, #4]
      if (pllsource != 0)
 80033b0:	0243      	lsls	r3, r0, #9
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80033b2:	f3c2 1288 	ubfx	r2, r2, #6, #9
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80033ba:	bf4c      	ite	mi
 80033bc:	4b0c      	ldrmi	r3, [pc, #48]	; (80033f0 <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80033be:	4b09      	ldrpl	r3, [pc, #36]	; (80033e4 <SystemCoreClockUpdate+0x60>)
 80033c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80033c4:	fb03 f302 	mul.w	r3, r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80033c8:	4a05      	ldr	r2, [pc, #20]	; (80033e0 <SystemCoreClockUpdate+0x5c>)
 80033ca:	6852      	ldr	r2, [r2, #4]
 80033cc:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80033d0:	3201      	adds	r2, #1
 80033d2:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 80033d4:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 80033d8:	e7dd      	b.n	8003396 <SystemCoreClockUpdate+0x12>
  switch (tmp)
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <SystemCoreClockUpdate+0x6c>)
 80033dc:	e7db      	b.n	8003396 <SystemCoreClockUpdate+0x12>
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	00f42400 	.word	0x00f42400
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000010 	.word	0x20000010
 80033f0:	007a1200 	.word	0x007a1200

080033f4 <__libc_init_array>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	4e0d      	ldr	r6, [pc, #52]	; (800342c <__libc_init_array+0x38>)
 80033f8:	4c0d      	ldr	r4, [pc, #52]	; (8003430 <__libc_init_array+0x3c>)
 80033fa:	1ba4      	subs	r4, r4, r6
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	2500      	movs	r5, #0
 8003400:	42a5      	cmp	r5, r4
 8003402:	d109      	bne.n	8003418 <__libc_init_array+0x24>
 8003404:	4e0b      	ldr	r6, [pc, #44]	; (8003434 <__libc_init_array+0x40>)
 8003406:	4c0c      	ldr	r4, [pc, #48]	; (8003438 <__libc_init_array+0x44>)
 8003408:	f001 f8ae 	bl	8004568 <_init>
 800340c:	1ba4      	subs	r4, r4, r6
 800340e:	10a4      	asrs	r4, r4, #2
 8003410:	2500      	movs	r5, #0
 8003412:	42a5      	cmp	r5, r4
 8003414:	d105      	bne.n	8003422 <__libc_init_array+0x2e>
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800341c:	4798      	blx	r3
 800341e:	3501      	adds	r5, #1
 8003420:	e7ee      	b.n	8003400 <__libc_init_array+0xc>
 8003422:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003426:	4798      	blx	r3
 8003428:	3501      	adds	r5, #1
 800342a:	e7f2      	b.n	8003412 <__libc_init_array+0x1e>
 800342c:	08004758 	.word	0x08004758
 8003430:	08004758 	.word	0x08004758
 8003434:	08004758 	.word	0x08004758
 8003438:	0800475c 	.word	0x0800475c

0800343c <memcpy>:
 800343c:	b510      	push	{r4, lr}
 800343e:	1e43      	subs	r3, r0, #1
 8003440:	440a      	add	r2, r1
 8003442:	4291      	cmp	r1, r2
 8003444:	d100      	bne.n	8003448 <memcpy+0xc>
 8003446:	bd10      	pop	{r4, pc}
 8003448:	f811 4b01 	ldrb.w	r4, [r1], #1
 800344c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003450:	e7f7      	b.n	8003442 <memcpy+0x6>
 8003452:	0000      	movs	r0, r0
 8003454:	0000      	movs	r0, r0
	...

08003458 <cos>:
 8003458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800345a:	ec51 0b10 	vmov	r0, r1, d0
 800345e:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <cos+0x80>)
 8003460:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003464:	4293      	cmp	r3, r2
 8003466:	dc06      	bgt.n	8003476 <cos+0x1e>
 8003468:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80034d0 <cos+0x78>
 800346c:	f000 fa74 	bl	8003958 <__kernel_cos>
 8003470:	ec51 0b10 	vmov	r0, r1, d0
 8003474:	e007      	b.n	8003486 <cos+0x2e>
 8003476:	4a19      	ldr	r2, [pc, #100]	; (80034dc <cos+0x84>)
 8003478:	4293      	cmp	r3, r2
 800347a:	dd09      	ble.n	8003490 <cos+0x38>
 800347c:	ee10 2a10 	vmov	r2, s0
 8003480:	460b      	mov	r3, r1
 8003482:	f7fc fea5 	bl	80001d0 <__aeabi_dsub>
 8003486:	ec41 0b10 	vmov	d0, r0, r1
 800348a:	b005      	add	sp, #20
 800348c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003490:	4668      	mov	r0, sp
 8003492:	f000 f86d 	bl	8003570 <__ieee754_rem_pio2>
 8003496:	f000 0003 	and.w	r0, r0, #3
 800349a:	2801      	cmp	r0, #1
 800349c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80034a0:	ed9d 0b00 	vldr	d0, [sp]
 80034a4:	d007      	beq.n	80034b6 <cos+0x5e>
 80034a6:	2802      	cmp	r0, #2
 80034a8:	d00e      	beq.n	80034c8 <cos+0x70>
 80034aa:	2800      	cmp	r0, #0
 80034ac:	d0de      	beq.n	800346c <cos+0x14>
 80034ae:	2001      	movs	r0, #1
 80034b0:	f000 fe8a 	bl	80041c8 <__kernel_sin>
 80034b4:	e7dc      	b.n	8003470 <cos+0x18>
 80034b6:	f000 fe87 	bl	80041c8 <__kernel_sin>
 80034ba:	ec53 2b10 	vmov	r2, r3, d0
 80034be:	ee10 0a10 	vmov	r0, s0
 80034c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80034c6:	e7de      	b.n	8003486 <cos+0x2e>
 80034c8:	f000 fa46 	bl	8003958 <__kernel_cos>
 80034cc:	e7f5      	b.n	80034ba <cos+0x62>
 80034ce:	bf00      	nop
	...
 80034d8:	3fe921fb 	.word	0x3fe921fb
 80034dc:	7fefffff 	.word	0x7fefffff

080034e0 <sin>:
 80034e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80034e2:	ec51 0b10 	vmov	r0, r1, d0
 80034e6:	4a20      	ldr	r2, [pc, #128]	; (8003568 <sin+0x88>)
 80034e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80034ec:	4293      	cmp	r3, r2
 80034ee:	dc07      	bgt.n	8003500 <sin+0x20>
 80034f0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003560 <sin+0x80>
 80034f4:	2000      	movs	r0, #0
 80034f6:	f000 fe67 	bl	80041c8 <__kernel_sin>
 80034fa:	ec51 0b10 	vmov	r0, r1, d0
 80034fe:	e007      	b.n	8003510 <sin+0x30>
 8003500:	4a1a      	ldr	r2, [pc, #104]	; (800356c <sin+0x8c>)
 8003502:	4293      	cmp	r3, r2
 8003504:	dd09      	ble.n	800351a <sin+0x3a>
 8003506:	ee10 2a10 	vmov	r2, s0
 800350a:	460b      	mov	r3, r1
 800350c:	f7fc fe60 	bl	80001d0 <__aeabi_dsub>
 8003510:	ec41 0b10 	vmov	d0, r0, r1
 8003514:	b005      	add	sp, #20
 8003516:	f85d fb04 	ldr.w	pc, [sp], #4
 800351a:	4668      	mov	r0, sp
 800351c:	f000 f828 	bl	8003570 <__ieee754_rem_pio2>
 8003520:	f000 0003 	and.w	r0, r0, #3
 8003524:	2801      	cmp	r0, #1
 8003526:	ed9d 1b02 	vldr	d1, [sp, #8]
 800352a:	ed9d 0b00 	vldr	d0, [sp]
 800352e:	d004      	beq.n	800353a <sin+0x5a>
 8003530:	2802      	cmp	r0, #2
 8003532:	d005      	beq.n	8003540 <sin+0x60>
 8003534:	b970      	cbnz	r0, 8003554 <sin+0x74>
 8003536:	2001      	movs	r0, #1
 8003538:	e7dd      	b.n	80034f6 <sin+0x16>
 800353a:	f000 fa0d 	bl	8003958 <__kernel_cos>
 800353e:	e7dc      	b.n	80034fa <sin+0x1a>
 8003540:	2001      	movs	r0, #1
 8003542:	f000 fe41 	bl	80041c8 <__kernel_sin>
 8003546:	ec53 2b10 	vmov	r2, r3, d0
 800354a:	ee10 0a10 	vmov	r0, s0
 800354e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003552:	e7dd      	b.n	8003510 <sin+0x30>
 8003554:	f000 fa00 	bl	8003958 <__kernel_cos>
 8003558:	e7f5      	b.n	8003546 <sin+0x66>
 800355a:	bf00      	nop
 800355c:	f3af 8000 	nop.w
	...
 8003568:	3fe921fb 	.word	0x3fe921fb
 800356c:	7fefffff 	.word	0x7fefffff

08003570 <__ieee754_rem_pio2>:
 8003570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003574:	ec57 6b10 	vmov	r6, r7, d0
 8003578:	4bc3      	ldr	r3, [pc, #780]	; (8003888 <__ieee754_rem_pio2+0x318>)
 800357a:	b08d      	sub	sp, #52	; 0x34
 800357c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003580:	4598      	cmp	r8, r3
 8003582:	4604      	mov	r4, r0
 8003584:	9704      	str	r7, [sp, #16]
 8003586:	dc07      	bgt.n	8003598 <__ieee754_rem_pio2+0x28>
 8003588:	2200      	movs	r2, #0
 800358a:	2300      	movs	r3, #0
 800358c:	ed84 0b00 	vstr	d0, [r4]
 8003590:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003594:	2500      	movs	r5, #0
 8003596:	e027      	b.n	80035e8 <__ieee754_rem_pio2+0x78>
 8003598:	4bbc      	ldr	r3, [pc, #752]	; (800388c <__ieee754_rem_pio2+0x31c>)
 800359a:	4598      	cmp	r8, r3
 800359c:	dc75      	bgt.n	800368a <__ieee754_rem_pio2+0x11a>
 800359e:	9b04      	ldr	r3, [sp, #16]
 80035a0:	4dbb      	ldr	r5, [pc, #748]	; (8003890 <__ieee754_rem_pio2+0x320>)
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	ee10 0a10 	vmov	r0, s0
 80035a8:	a3a9      	add	r3, pc, #676	; (adr r3, 8003850 <__ieee754_rem_pio2+0x2e0>)
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	4639      	mov	r1, r7
 80035b0:	dd36      	ble.n	8003620 <__ieee754_rem_pio2+0xb0>
 80035b2:	f7fc fe0d 	bl	80001d0 <__aeabi_dsub>
 80035b6:	45a8      	cmp	r8, r5
 80035b8:	4606      	mov	r6, r0
 80035ba:	460f      	mov	r7, r1
 80035bc:	d018      	beq.n	80035f0 <__ieee754_rem_pio2+0x80>
 80035be:	a3a6      	add	r3, pc, #664	; (adr r3, 8003858 <__ieee754_rem_pio2+0x2e8>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f7fc fe04 	bl	80001d0 <__aeabi_dsub>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	e9c4 2300 	strd	r2, r3, [r4]
 80035d0:	4630      	mov	r0, r6
 80035d2:	4639      	mov	r1, r7
 80035d4:	f7fc fdfc 	bl	80001d0 <__aeabi_dsub>
 80035d8:	a39f      	add	r3, pc, #636	; (adr r3, 8003858 <__ieee754_rem_pio2+0x2e8>)
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	f7fc fdf7 	bl	80001d0 <__aeabi_dsub>
 80035e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80035e6:	2501      	movs	r5, #1
 80035e8:	4628      	mov	r0, r5
 80035ea:	b00d      	add	sp, #52	; 0x34
 80035ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f0:	a39b      	add	r3, pc, #620	; (adr r3, 8003860 <__ieee754_rem_pio2+0x2f0>)
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	f7fc fdeb 	bl	80001d0 <__aeabi_dsub>
 80035fa:	a39b      	add	r3, pc, #620	; (adr r3, 8003868 <__ieee754_rem_pio2+0x2f8>)
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	4606      	mov	r6, r0
 8003602:	460f      	mov	r7, r1
 8003604:	f7fc fde4 	bl	80001d0 <__aeabi_dsub>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	e9c4 2300 	strd	r2, r3, [r4]
 8003610:	4630      	mov	r0, r6
 8003612:	4639      	mov	r1, r7
 8003614:	f7fc fddc 	bl	80001d0 <__aeabi_dsub>
 8003618:	a393      	add	r3, pc, #588	; (adr r3, 8003868 <__ieee754_rem_pio2+0x2f8>)
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	e7de      	b.n	80035de <__ieee754_rem_pio2+0x6e>
 8003620:	f7fc fdd8 	bl	80001d4 <__adddf3>
 8003624:	45a8      	cmp	r8, r5
 8003626:	4606      	mov	r6, r0
 8003628:	460f      	mov	r7, r1
 800362a:	d016      	beq.n	800365a <__ieee754_rem_pio2+0xea>
 800362c:	a38a      	add	r3, pc, #552	; (adr r3, 8003858 <__ieee754_rem_pio2+0x2e8>)
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f7fc fdcf 	bl	80001d4 <__adddf3>
 8003636:	4602      	mov	r2, r0
 8003638:	460b      	mov	r3, r1
 800363a:	e9c4 2300 	strd	r2, r3, [r4]
 800363e:	4630      	mov	r0, r6
 8003640:	4639      	mov	r1, r7
 8003642:	f7fc fdc5 	bl	80001d0 <__aeabi_dsub>
 8003646:	a384      	add	r3, pc, #528	; (adr r3, 8003858 <__ieee754_rem_pio2+0x2e8>)
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f7fc fdc2 	bl	80001d4 <__adddf3>
 8003650:	f04f 35ff 	mov.w	r5, #4294967295
 8003654:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003658:	e7c6      	b.n	80035e8 <__ieee754_rem_pio2+0x78>
 800365a:	a381      	add	r3, pc, #516	; (adr r3, 8003860 <__ieee754_rem_pio2+0x2f0>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc fdb8 	bl	80001d4 <__adddf3>
 8003664:	a380      	add	r3, pc, #512	; (adr r3, 8003868 <__ieee754_rem_pio2+0x2f8>)
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	4606      	mov	r6, r0
 800366c:	460f      	mov	r7, r1
 800366e:	f7fc fdb1 	bl	80001d4 <__adddf3>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	e9c4 2300 	strd	r2, r3, [r4]
 800367a:	4630      	mov	r0, r6
 800367c:	4639      	mov	r1, r7
 800367e:	f7fc fda7 	bl	80001d0 <__aeabi_dsub>
 8003682:	a379      	add	r3, pc, #484	; (adr r3, 8003868 <__ieee754_rem_pio2+0x2f8>)
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	e7e0      	b.n	800364c <__ieee754_rem_pio2+0xdc>
 800368a:	4b82      	ldr	r3, [pc, #520]	; (8003894 <__ieee754_rem_pio2+0x324>)
 800368c:	4598      	cmp	r8, r3
 800368e:	f300 80d0 	bgt.w	8003832 <__ieee754_rem_pio2+0x2c2>
 8003692:	f000 fe53 	bl	800433c <fabs>
 8003696:	ec57 6b10 	vmov	r6, r7, d0
 800369a:	ee10 0a10 	vmov	r0, s0
 800369e:	a374      	add	r3, pc, #464	; (adr r3, 8003870 <__ieee754_rem_pio2+0x300>)
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	4639      	mov	r1, r7
 80036a6:	f7fc ff47 	bl	8000538 <__aeabi_dmul>
 80036aa:	2200      	movs	r2, #0
 80036ac:	4b7a      	ldr	r3, [pc, #488]	; (8003898 <__ieee754_rem_pio2+0x328>)
 80036ae:	f7fc fd91 	bl	80001d4 <__adddf3>
 80036b2:	f7fd f9db 	bl	8000a6c <__aeabi_d2iz>
 80036b6:	4605      	mov	r5, r0
 80036b8:	f7fc fed8 	bl	800046c <__aeabi_i2d>
 80036bc:	a364      	add	r3, pc, #400	; (adr r3, 8003850 <__ieee754_rem_pio2+0x2e0>)
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036c6:	f7fc ff37 	bl	8000538 <__aeabi_dmul>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4630      	mov	r0, r6
 80036d0:	4639      	mov	r1, r7
 80036d2:	f7fc fd7d 	bl	80001d0 <__aeabi_dsub>
 80036d6:	a360      	add	r3, pc, #384	; (adr r3, 8003858 <__ieee754_rem_pio2+0x2e8>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	4682      	mov	sl, r0
 80036de:	468b      	mov	fp, r1
 80036e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036e4:	f7fc ff28 	bl	8000538 <__aeabi_dmul>
 80036e8:	2d1f      	cmp	r5, #31
 80036ea:	4606      	mov	r6, r0
 80036ec:	460f      	mov	r7, r1
 80036ee:	dc2a      	bgt.n	8003746 <__ieee754_rem_pio2+0x1d6>
 80036f0:	1e6a      	subs	r2, r5, #1
 80036f2:	4b6a      	ldr	r3, [pc, #424]	; (800389c <__ieee754_rem_pio2+0x32c>)
 80036f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f8:	4598      	cmp	r8, r3
 80036fa:	d024      	beq.n	8003746 <__ieee754_rem_pio2+0x1d6>
 80036fc:	4632      	mov	r2, r6
 80036fe:	463b      	mov	r3, r7
 8003700:	4650      	mov	r0, sl
 8003702:	4659      	mov	r1, fp
 8003704:	f7fc fd64 	bl	80001d0 <__aeabi_dsub>
 8003708:	e9c4 0100 	strd	r0, r1, [r4]
 800370c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003710:	4650      	mov	r0, sl
 8003712:	4642      	mov	r2, r8
 8003714:	464b      	mov	r3, r9
 8003716:	4659      	mov	r1, fp
 8003718:	f7fc fd5a 	bl	80001d0 <__aeabi_dsub>
 800371c:	463b      	mov	r3, r7
 800371e:	4632      	mov	r2, r6
 8003720:	f7fc fd56 	bl	80001d0 <__aeabi_dsub>
 8003724:	9b04      	ldr	r3, [sp, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800372c:	f6bf af5c 	bge.w	80035e8 <__ieee754_rem_pio2+0x78>
 8003730:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003734:	6063      	str	r3, [r4, #4]
 8003736:	f8c4 8000 	str.w	r8, [r4]
 800373a:	60a0      	str	r0, [r4, #8]
 800373c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003740:	60e3      	str	r3, [r4, #12]
 8003742:	426d      	negs	r5, r5
 8003744:	e750      	b.n	80035e8 <__ieee754_rem_pio2+0x78>
 8003746:	4632      	mov	r2, r6
 8003748:	463b      	mov	r3, r7
 800374a:	4650      	mov	r0, sl
 800374c:	4659      	mov	r1, fp
 800374e:	f7fc fd3f 	bl	80001d0 <__aeabi_dsub>
 8003752:	ea4f 5228 	mov.w	r2, r8, asr #20
 8003756:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b10      	cmp	r3, #16
 800375e:	e9c4 0100 	strd	r0, r1, [r4]
 8003762:	9205      	str	r2, [sp, #20]
 8003764:	ddd2      	ble.n	800370c <__ieee754_rem_pio2+0x19c>
 8003766:	a33e      	add	r3, pc, #248	; (adr r3, 8003860 <__ieee754_rem_pio2+0x2f0>)
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003770:	f7fc fee2 	bl	8000538 <__aeabi_dmul>
 8003774:	4606      	mov	r6, r0
 8003776:	460f      	mov	r7, r1
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4650      	mov	r0, sl
 800377e:	4659      	mov	r1, fp
 8003780:	f7fc fd26 	bl	80001d0 <__aeabi_dsub>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4680      	mov	r8, r0
 800378a:	4689      	mov	r9, r1
 800378c:	4650      	mov	r0, sl
 800378e:	4659      	mov	r1, fp
 8003790:	f7fc fd1e 	bl	80001d0 <__aeabi_dsub>
 8003794:	4632      	mov	r2, r6
 8003796:	463b      	mov	r3, r7
 8003798:	f7fc fd1a 	bl	80001d0 <__aeabi_dsub>
 800379c:	a332      	add	r3, pc, #200	; (adr r3, 8003868 <__ieee754_rem_pio2+0x2f8>)
 800379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a2:	4606      	mov	r6, r0
 80037a4:	460f      	mov	r7, r1
 80037a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037aa:	f7fc fec5 	bl	8000538 <__aeabi_dmul>
 80037ae:	4632      	mov	r2, r6
 80037b0:	463b      	mov	r3, r7
 80037b2:	f7fc fd0d 	bl	80001d0 <__aeabi_dsub>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4606      	mov	r6, r0
 80037bc:	460f      	mov	r7, r1
 80037be:	4640      	mov	r0, r8
 80037c0:	4649      	mov	r1, r9
 80037c2:	f7fc fd05 	bl	80001d0 <__aeabi_dsub>
 80037c6:	9a05      	ldr	r2, [sp, #20]
 80037c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b31      	cmp	r3, #49	; 0x31
 80037d0:	e9c4 0100 	strd	r0, r1, [r4]
 80037d4:	dd2a      	ble.n	800382c <__ieee754_rem_pio2+0x2bc>
 80037d6:	a328      	add	r3, pc, #160	; (adr r3, 8003878 <__ieee754_rem_pio2+0x308>)
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037e0:	f7fc feaa 	bl	8000538 <__aeabi_dmul>
 80037e4:	4606      	mov	r6, r0
 80037e6:	460f      	mov	r7, r1
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4640      	mov	r0, r8
 80037ee:	4649      	mov	r1, r9
 80037f0:	f7fc fcee 	bl	80001d0 <__aeabi_dsub>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4682      	mov	sl, r0
 80037fa:	468b      	mov	fp, r1
 80037fc:	4640      	mov	r0, r8
 80037fe:	4649      	mov	r1, r9
 8003800:	f7fc fce6 	bl	80001d0 <__aeabi_dsub>
 8003804:	4632      	mov	r2, r6
 8003806:	463b      	mov	r3, r7
 8003808:	f7fc fce2 	bl	80001d0 <__aeabi_dsub>
 800380c:	a31c      	add	r3, pc, #112	; (adr r3, 8003880 <__ieee754_rem_pio2+0x310>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	4606      	mov	r6, r0
 8003814:	460f      	mov	r7, r1
 8003816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800381a:	f7fc fe8d 	bl	8000538 <__aeabi_dmul>
 800381e:	4632      	mov	r2, r6
 8003820:	463b      	mov	r3, r7
 8003822:	f7fc fcd5 	bl	80001d0 <__aeabi_dsub>
 8003826:	4606      	mov	r6, r0
 8003828:	460f      	mov	r7, r1
 800382a:	e767      	b.n	80036fc <__ieee754_rem_pio2+0x18c>
 800382c:	46c2      	mov	sl, r8
 800382e:	46cb      	mov	fp, r9
 8003830:	e76c      	b.n	800370c <__ieee754_rem_pio2+0x19c>
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <__ieee754_rem_pio2+0x330>)
 8003834:	4598      	cmp	r8, r3
 8003836:	dd35      	ble.n	80038a4 <__ieee754_rem_pio2+0x334>
 8003838:	ee10 2a10 	vmov	r2, s0
 800383c:	463b      	mov	r3, r7
 800383e:	4630      	mov	r0, r6
 8003840:	4639      	mov	r1, r7
 8003842:	f7fc fcc5 	bl	80001d0 <__aeabi_dsub>
 8003846:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800384a:	e9c4 0100 	strd	r0, r1, [r4]
 800384e:	e6a1      	b.n	8003594 <__ieee754_rem_pio2+0x24>
 8003850:	54400000 	.word	0x54400000
 8003854:	3ff921fb 	.word	0x3ff921fb
 8003858:	1a626331 	.word	0x1a626331
 800385c:	3dd0b461 	.word	0x3dd0b461
 8003860:	1a600000 	.word	0x1a600000
 8003864:	3dd0b461 	.word	0x3dd0b461
 8003868:	2e037073 	.word	0x2e037073
 800386c:	3ba3198a 	.word	0x3ba3198a
 8003870:	6dc9c883 	.word	0x6dc9c883
 8003874:	3fe45f30 	.word	0x3fe45f30
 8003878:	2e000000 	.word	0x2e000000
 800387c:	3ba3198a 	.word	0x3ba3198a
 8003880:	252049c1 	.word	0x252049c1
 8003884:	397b839a 	.word	0x397b839a
 8003888:	3fe921fb 	.word	0x3fe921fb
 800388c:	4002d97b 	.word	0x4002d97b
 8003890:	3ff921fb 	.word	0x3ff921fb
 8003894:	413921fb 	.word	0x413921fb
 8003898:	3fe00000 	.word	0x3fe00000
 800389c:	08004580 	.word	0x08004580
 80038a0:	7fefffff 	.word	0x7fefffff
 80038a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80038a8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80038ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80038b0:	4630      	mov	r0, r6
 80038b2:	460f      	mov	r7, r1
 80038b4:	f7fd f8da 	bl	8000a6c <__aeabi_d2iz>
 80038b8:	f7fc fdd8 	bl	800046c <__aeabi_i2d>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4630      	mov	r0, r6
 80038c2:	4639      	mov	r1, r7
 80038c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80038c8:	f7fc fc82 	bl	80001d0 <__aeabi_dsub>
 80038cc:	2200      	movs	r2, #0
 80038ce:	4b1f      	ldr	r3, [pc, #124]	; (800394c <__ieee754_rem_pio2+0x3dc>)
 80038d0:	f7fc fe32 	bl	8000538 <__aeabi_dmul>
 80038d4:	460f      	mov	r7, r1
 80038d6:	4606      	mov	r6, r0
 80038d8:	f7fd f8c8 	bl	8000a6c <__aeabi_d2iz>
 80038dc:	f7fc fdc6 	bl	800046c <__aeabi_i2d>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4630      	mov	r0, r6
 80038e6:	4639      	mov	r1, r7
 80038e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80038ec:	f7fc fc70 	bl	80001d0 <__aeabi_dsub>
 80038f0:	2200      	movs	r2, #0
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <__ieee754_rem_pio2+0x3dc>)
 80038f4:	f7fc fe20 	bl	8000538 <__aeabi_dmul>
 80038f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80038fc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003900:	f04f 0803 	mov.w	r8, #3
 8003904:	2600      	movs	r6, #0
 8003906:	2700      	movs	r7, #0
 8003908:	4632      	mov	r2, r6
 800390a:	463b      	mov	r3, r7
 800390c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003910:	f108 3aff 	add.w	sl, r8, #4294967295
 8003914:	f7fd f878 	bl	8000a08 <__aeabi_dcmpeq>
 8003918:	b9b0      	cbnz	r0, 8003948 <__ieee754_rem_pio2+0x3d8>
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <__ieee754_rem_pio2+0x3e0>)
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	2302      	movs	r3, #2
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	462a      	mov	r2, r5
 8003924:	4643      	mov	r3, r8
 8003926:	4621      	mov	r1, r4
 8003928:	a806      	add	r0, sp, #24
 800392a:	f000 f8fd 	bl	8003b28 <__kernel_rem_pio2>
 800392e:	9b04      	ldr	r3, [sp, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	4605      	mov	r5, r0
 8003934:	f6bf ae58 	bge.w	80035e8 <__ieee754_rem_pio2+0x78>
 8003938:	6863      	ldr	r3, [r4, #4]
 800393a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800393e:	6063      	str	r3, [r4, #4]
 8003940:	68e3      	ldr	r3, [r4, #12]
 8003942:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003946:	e6fb      	b.n	8003740 <__ieee754_rem_pio2+0x1d0>
 8003948:	46d0      	mov	r8, sl
 800394a:	e7dd      	b.n	8003908 <__ieee754_rem_pio2+0x398>
 800394c:	41700000 	.word	0x41700000
 8003950:	08004600 	.word	0x08004600
 8003954:	00000000 	.word	0x00000000

08003958 <__kernel_cos>:
 8003958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	ec59 8b10 	vmov	r8, r9, d0
 8003960:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8003964:	b085      	sub	sp, #20
 8003966:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800396a:	ed8d 1b00 	vstr	d1, [sp]
 800396e:	da07      	bge.n	8003980 <__kernel_cos+0x28>
 8003970:	ee10 0a10 	vmov	r0, s0
 8003974:	4649      	mov	r1, r9
 8003976:	f7fd f879 	bl	8000a6c <__aeabi_d2iz>
 800397a:	2800      	cmp	r0, #0
 800397c:	f000 80aa 	beq.w	8003ad4 <__kernel_cos+0x17c>
 8003980:	4642      	mov	r2, r8
 8003982:	464b      	mov	r3, r9
 8003984:	4640      	mov	r0, r8
 8003986:	4649      	mov	r1, r9
 8003988:	f7fc fdd6 	bl	8000538 <__aeabi_dmul>
 800398c:	a359      	add	r3, pc, #356	; (adr r3, 8003af4 <__kernel_cos+0x19c>)
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	4604      	mov	r4, r0
 8003994:	460d      	mov	r5, r1
 8003996:	f7fc fdcf 	bl	8000538 <__aeabi_dmul>
 800399a:	a358      	add	r3, pc, #352	; (adr r3, 8003afc <__kernel_cos+0x1a4>)
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f7fc fc18 	bl	80001d4 <__adddf3>
 80039a4:	4622      	mov	r2, r4
 80039a6:	462b      	mov	r3, r5
 80039a8:	f7fc fdc6 	bl	8000538 <__aeabi_dmul>
 80039ac:	a355      	add	r3, pc, #340	; (adr r3, 8003b04 <__kernel_cos+0x1ac>)
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f7fc fc0d 	bl	80001d0 <__aeabi_dsub>
 80039b6:	4622      	mov	r2, r4
 80039b8:	462b      	mov	r3, r5
 80039ba:	f7fc fdbd 	bl	8000538 <__aeabi_dmul>
 80039be:	a353      	add	r3, pc, #332	; (adr r3, 8003b0c <__kernel_cos+0x1b4>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f7fc fc06 	bl	80001d4 <__adddf3>
 80039c8:	4622      	mov	r2, r4
 80039ca:	462b      	mov	r3, r5
 80039cc:	f7fc fdb4 	bl	8000538 <__aeabi_dmul>
 80039d0:	a350      	add	r3, pc, #320	; (adr r3, 8003b14 <__kernel_cos+0x1bc>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	f7fc fbfb 	bl	80001d0 <__aeabi_dsub>
 80039da:	4622      	mov	r2, r4
 80039dc:	462b      	mov	r3, r5
 80039de:	f7fc fdab 	bl	8000538 <__aeabi_dmul>
 80039e2:	a34e      	add	r3, pc, #312	; (adr r3, 8003b1c <__kernel_cos+0x1c4>)
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f7fc fbf4 	bl	80001d4 <__adddf3>
 80039ec:	462b      	mov	r3, r5
 80039ee:	4622      	mov	r2, r4
 80039f0:	f7fc fda2 	bl	8000538 <__aeabi_dmul>
 80039f4:	4b3a      	ldr	r3, [pc, #232]	; (8003ae0 <__kernel_cos+0x188>)
 80039f6:	429f      	cmp	r7, r3
 80039f8:	4682      	mov	sl, r0
 80039fa:	468b      	mov	fp, r1
 80039fc:	dc2c      	bgt.n	8003a58 <__kernel_cos+0x100>
 80039fe:	2200      	movs	r2, #0
 8003a00:	4b38      	ldr	r3, [pc, #224]	; (8003ae4 <__kernel_cos+0x18c>)
 8003a02:	4620      	mov	r0, r4
 8003a04:	4629      	mov	r1, r5
 8003a06:	f7fc fd97 	bl	8000538 <__aeabi_dmul>
 8003a0a:	4652      	mov	r2, sl
 8003a0c:	4606      	mov	r6, r0
 8003a0e:	460f      	mov	r7, r1
 8003a10:	465b      	mov	r3, fp
 8003a12:	4620      	mov	r0, r4
 8003a14:	4629      	mov	r1, r5
 8003a16:	f7fc fd8f 	bl	8000538 <__aeabi_dmul>
 8003a1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a1e:	4604      	mov	r4, r0
 8003a20:	460d      	mov	r5, r1
 8003a22:	4640      	mov	r0, r8
 8003a24:	4649      	mov	r1, r9
 8003a26:	f7fc fd87 	bl	8000538 <__aeabi_dmul>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4620      	mov	r0, r4
 8003a30:	4629      	mov	r1, r5
 8003a32:	f7fc fbcd 	bl	80001d0 <__aeabi_dsub>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	4639      	mov	r1, r7
 8003a3e:	f7fc fbc7 	bl	80001d0 <__aeabi_dsub>
 8003a42:	460b      	mov	r3, r1
 8003a44:	4928      	ldr	r1, [pc, #160]	; (8003ae8 <__kernel_cos+0x190>)
 8003a46:	4602      	mov	r2, r0
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f7fc fbc1 	bl	80001d0 <__aeabi_dsub>
 8003a4e:	ec41 0b10 	vmov	d0, r0, r1
 8003a52:	b005      	add	sp, #20
 8003a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a58:	4b24      	ldr	r3, [pc, #144]	; (8003aec <__kernel_cos+0x194>)
 8003a5a:	4923      	ldr	r1, [pc, #140]	; (8003ae8 <__kernel_cos+0x190>)
 8003a5c:	429f      	cmp	r7, r3
 8003a5e:	bfd7      	itett	le
 8003a60:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8003a64:	4f22      	ldrgt	r7, [pc, #136]	; (8003af0 <__kernel_cos+0x198>)
 8003a66:	2200      	movle	r2, #0
 8003a68:	4616      	movle	r6, r2
 8003a6a:	bfd4      	ite	le
 8003a6c:	461f      	movle	r7, r3
 8003a6e:	2600      	movgt	r6, #0
 8003a70:	4632      	mov	r2, r6
 8003a72:	463b      	mov	r3, r7
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7fc fbab 	bl	80001d0 <__aeabi_dsub>
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a80:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <__kernel_cos+0x18c>)
 8003a82:	4620      	mov	r0, r4
 8003a84:	4629      	mov	r1, r5
 8003a86:	f7fc fd57 	bl	8000538 <__aeabi_dmul>
 8003a8a:	4632      	mov	r2, r6
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	f7fc fb9f 	bl	80001d0 <__aeabi_dsub>
 8003a92:	4652      	mov	r2, sl
 8003a94:	4606      	mov	r6, r0
 8003a96:	460f      	mov	r7, r1
 8003a98:	465b      	mov	r3, fp
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	f7fc fd4b 	bl	8000538 <__aeabi_dmul>
 8003aa2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	460d      	mov	r5, r1
 8003aaa:	4640      	mov	r0, r8
 8003aac:	4649      	mov	r1, r9
 8003aae:	f7fc fd43 	bl	8000538 <__aeabi_dmul>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f7fc fb89 	bl	80001d0 <__aeabi_dsub>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	4639      	mov	r1, r7
 8003ac6:	f7fc fb83 	bl	80001d0 <__aeabi_dsub>
 8003aca:	4602      	mov	r2, r0
 8003acc:	460b      	mov	r3, r1
 8003ace:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ad2:	e7ba      	b.n	8003a4a <__kernel_cos+0xf2>
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	4904      	ldr	r1, [pc, #16]	; (8003ae8 <__kernel_cos+0x190>)
 8003ad8:	e7b9      	b.n	8003a4e <__kernel_cos+0xf6>
 8003ada:	bf00      	nop
 8003adc:	f3af 8000 	nop.w
 8003ae0:	3fd33332 	.word	0x3fd33332
 8003ae4:	3fe00000 	.word	0x3fe00000
 8003ae8:	3ff00000 	.word	0x3ff00000
 8003aec:	3fe90000 	.word	0x3fe90000
 8003af0:	3fd20000 	.word	0x3fd20000
 8003af4:	be8838d4 	.word	0xbe8838d4
 8003af8:	bda8fae9 	.word	0xbda8fae9
 8003afc:	bdb4b1c4 	.word	0xbdb4b1c4
 8003b00:	3e21ee9e 	.word	0x3e21ee9e
 8003b04:	809c52ad 	.word	0x809c52ad
 8003b08:	3e927e4f 	.word	0x3e927e4f
 8003b0c:	19cb1590 	.word	0x19cb1590
 8003b10:	3efa01a0 	.word	0x3efa01a0
 8003b14:	16c15177 	.word	0x16c15177
 8003b18:	3f56c16c 	.word	0x3f56c16c
 8003b1c:	5555554c 	.word	0x5555554c
 8003b20:	3fa55555 	.word	0x3fa55555
 8003b24:	00000000 	.word	0x00000000

08003b28 <__kernel_rem_pio2>:
 8003b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b2c:	ed2d 8b02 	vpush	{d8}
 8003b30:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003b34:	1ed4      	subs	r4, r2, #3
 8003b36:	9306      	str	r3, [sp, #24]
 8003b38:	9102      	str	r1, [sp, #8]
 8003b3a:	4bc3      	ldr	r3, [pc, #780]	; (8003e48 <__kernel_rem_pio2+0x320>)
 8003b3c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003b3e:	9009      	str	r0, [sp, #36]	; 0x24
 8003b40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	9b06      	ldr	r3, [sp, #24]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	9304      	str	r3, [sp, #16]
 8003b4c:	2318      	movs	r3, #24
 8003b4e:	fb94 f4f3 	sdiv	r4, r4, r3
 8003b52:	f06f 0317 	mvn.w	r3, #23
 8003b56:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003b5a:	fb04 3303 	mla	r3, r4, r3, r3
 8003b5e:	eb03 0a02 	add.w	sl, r3, r2
 8003b62:	9b00      	ldr	r3, [sp, #0]
 8003b64:	9a04      	ldr	r2, [sp, #16]
 8003b66:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8003e38 <__kernel_rem_pio2+0x310>
 8003b6a:	eb03 0802 	add.w	r8, r3, r2
 8003b6e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003b70:	1aa7      	subs	r7, r4, r2
 8003b72:	ae20      	add	r6, sp, #128	; 0x80
 8003b74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003b78:	2500      	movs	r5, #0
 8003b7a:	4545      	cmp	r5, r8
 8003b7c:	dd13      	ble.n	8003ba6 <__kernel_rem_pio2+0x7e>
 8003b7e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8003e38 <__kernel_rem_pio2+0x310>
 8003b82:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003b86:	2600      	movs	r6, #0
 8003b88:	9b00      	ldr	r3, [sp, #0]
 8003b8a:	429e      	cmp	r6, r3
 8003b8c:	dc32      	bgt.n	8003bf4 <__kernel_rem_pio2+0xcc>
 8003b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b90:	9303      	str	r3, [sp, #12]
 8003b92:	9b06      	ldr	r3, [sp, #24]
 8003b94:	199d      	adds	r5, r3, r6
 8003b96:	ab20      	add	r3, sp, #128	; 0x80
 8003b98:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003b9c:	9308      	str	r3, [sp, #32]
 8003b9e:	ec59 8b18 	vmov	r8, r9, d8
 8003ba2:	2700      	movs	r7, #0
 8003ba4:	e01f      	b.n	8003be6 <__kernel_rem_pio2+0xbe>
 8003ba6:	42ef      	cmn	r7, r5
 8003ba8:	d407      	bmi.n	8003bba <__kernel_rem_pio2+0x92>
 8003baa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003bae:	f7fc fc5d 	bl	800046c <__aeabi_i2d>
 8003bb2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003bb6:	3501      	adds	r5, #1
 8003bb8:	e7df      	b.n	8003b7a <__kernel_rem_pio2+0x52>
 8003bba:	ec51 0b18 	vmov	r0, r1, d8
 8003bbe:	e7f8      	b.n	8003bb2 <__kernel_rem_pio2+0x8a>
 8003bc0:	9908      	ldr	r1, [sp, #32]
 8003bc2:	9d03      	ldr	r5, [sp, #12]
 8003bc4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003bc8:	9108      	str	r1, [sp, #32]
 8003bca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003bce:	9503      	str	r5, [sp, #12]
 8003bd0:	f7fc fcb2 	bl	8000538 <__aeabi_dmul>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4640      	mov	r0, r8
 8003bda:	4649      	mov	r1, r9
 8003bdc:	f7fc fafa 	bl	80001d4 <__adddf3>
 8003be0:	3701      	adds	r7, #1
 8003be2:	4680      	mov	r8, r0
 8003be4:	4689      	mov	r9, r1
 8003be6:	9b04      	ldr	r3, [sp, #16]
 8003be8:	429f      	cmp	r7, r3
 8003bea:	dde9      	ble.n	8003bc0 <__kernel_rem_pio2+0x98>
 8003bec:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	e7c9      	b.n	8003b88 <__kernel_rem_pio2+0x60>
 8003bf4:	9b00      	ldr	r3, [sp, #0]
 8003bf6:	9f00      	ldr	r7, [sp, #0]
 8003bf8:	aa0c      	add	r2, sp, #48	; 0x30
 8003bfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c00:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003c02:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003c06:	930a      	str	r3, [sp, #40]	; 0x28
 8003c08:	ab98      	add	r3, sp, #608	; 0x260
 8003c0a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8003c0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003c12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c16:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8003c1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c1e:	9308      	str	r3, [sp, #32]
 8003c20:	9a08      	ldr	r2, [sp, #32]
 8003c22:	ab98      	add	r3, sp, #608	; 0x260
 8003c24:	4413      	add	r3, r2
 8003c26:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8003c2a:	2600      	movs	r6, #0
 8003c2c:	1bbb      	subs	r3, r7, r6
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	dc77      	bgt.n	8003d22 <__kernel_rem_pio2+0x1fa>
 8003c32:	ec49 8b10 	vmov	d0, r8, r9
 8003c36:	4650      	mov	r0, sl
 8003c38:	f000 fc0e 	bl	8004458 <scalbn>
 8003c3c:	ec55 4b10 	vmov	r4, r5, d0
 8003c40:	2200      	movs	r2, #0
 8003c42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003c46:	ee10 0a10 	vmov	r0, s0
 8003c4a:	4629      	mov	r1, r5
 8003c4c:	f7fc fc74 	bl	8000538 <__aeabi_dmul>
 8003c50:	ec41 0b10 	vmov	d0, r0, r1
 8003c54:	f000 fb7c 	bl	8004350 <floor>
 8003c58:	2200      	movs	r2, #0
 8003c5a:	ec51 0b10 	vmov	r0, r1, d0
 8003c5e:	4b7b      	ldr	r3, [pc, #492]	; (8003e4c <__kernel_rem_pio2+0x324>)
 8003c60:	f7fc fc6a 	bl	8000538 <__aeabi_dmul>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fab0 	bl	80001d0 <__aeabi_dsub>
 8003c70:	460d      	mov	r5, r1
 8003c72:	4604      	mov	r4, r0
 8003c74:	f7fc fefa 	bl	8000a6c <__aeabi_d2iz>
 8003c78:	9003      	str	r0, [sp, #12]
 8003c7a:	f7fc fbf7 	bl	800046c <__aeabi_i2d>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4620      	mov	r0, r4
 8003c84:	4629      	mov	r1, r5
 8003c86:	f7fc faa3 	bl	80001d0 <__aeabi_dsub>
 8003c8a:	f1ba 0f00 	cmp.w	sl, #0
 8003c8e:	4680      	mov	r8, r0
 8003c90:	4689      	mov	r9, r1
 8003c92:	dd6b      	ble.n	8003d6c <__kernel_rem_pio2+0x244>
 8003c94:	1e7a      	subs	r2, r7, #1
 8003c96:	ab0c      	add	r3, sp, #48	; 0x30
 8003c98:	f1ca 0118 	rsb	r1, sl, #24
 8003c9c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003ca0:	9c03      	ldr	r4, [sp, #12]
 8003ca2:	fa40 f301 	asr.w	r3, r0, r1
 8003ca6:	441c      	add	r4, r3
 8003ca8:	408b      	lsls	r3, r1
 8003caa:	1ac0      	subs	r0, r0, r3
 8003cac:	ab0c      	add	r3, sp, #48	; 0x30
 8003cae:	9403      	str	r4, [sp, #12]
 8003cb0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003cb4:	f1ca 0317 	rsb	r3, sl, #23
 8003cb8:	fa40 fb03 	asr.w	fp, r0, r3
 8003cbc:	f1bb 0f00 	cmp.w	fp, #0
 8003cc0:	dd62      	ble.n	8003d88 <__kernel_rem_pio2+0x260>
 8003cc2:	9b03      	ldr	r3, [sp, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	9303      	str	r3, [sp, #12]
 8003cca:	4614      	mov	r4, r2
 8003ccc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003cd0:	4297      	cmp	r7, r2
 8003cd2:	f300 8089 	bgt.w	8003de8 <__kernel_rem_pio2+0x2c0>
 8003cd6:	f1ba 0f00 	cmp.w	sl, #0
 8003cda:	dd07      	ble.n	8003cec <__kernel_rem_pio2+0x1c4>
 8003cdc:	f1ba 0f01 	cmp.w	sl, #1
 8003ce0:	f000 8096 	beq.w	8003e10 <__kernel_rem_pio2+0x2e8>
 8003ce4:	f1ba 0f02 	cmp.w	sl, #2
 8003ce8:	f000 809c 	beq.w	8003e24 <__kernel_rem_pio2+0x2fc>
 8003cec:	f1bb 0f02 	cmp.w	fp, #2
 8003cf0:	d14a      	bne.n	8003d88 <__kernel_rem_pio2+0x260>
 8003cf2:	4642      	mov	r2, r8
 8003cf4:	464b      	mov	r3, r9
 8003cf6:	2000      	movs	r0, #0
 8003cf8:	4955      	ldr	r1, [pc, #340]	; (8003e50 <__kernel_rem_pio2+0x328>)
 8003cfa:	f7fc fa69 	bl	80001d0 <__aeabi_dsub>
 8003cfe:	4680      	mov	r8, r0
 8003d00:	4689      	mov	r9, r1
 8003d02:	2c00      	cmp	r4, #0
 8003d04:	d040      	beq.n	8003d88 <__kernel_rem_pio2+0x260>
 8003d06:	4650      	mov	r0, sl
 8003d08:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8003e40 <__kernel_rem_pio2+0x318>
 8003d0c:	f000 fba4 	bl	8004458 <scalbn>
 8003d10:	4640      	mov	r0, r8
 8003d12:	4649      	mov	r1, r9
 8003d14:	ec53 2b10 	vmov	r2, r3, d0
 8003d18:	f7fc fa5a 	bl	80001d0 <__aeabi_dsub>
 8003d1c:	4680      	mov	r8, r0
 8003d1e:	4689      	mov	r9, r1
 8003d20:	e032      	b.n	8003d88 <__kernel_rem_pio2+0x260>
 8003d22:	2200      	movs	r2, #0
 8003d24:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <__kernel_rem_pio2+0x32c>)
 8003d26:	4640      	mov	r0, r8
 8003d28:	4649      	mov	r1, r9
 8003d2a:	f7fc fc05 	bl	8000538 <__aeabi_dmul>
 8003d2e:	f7fc fe9d 	bl	8000a6c <__aeabi_d2iz>
 8003d32:	f7fc fb9b 	bl	800046c <__aeabi_i2d>
 8003d36:	2200      	movs	r2, #0
 8003d38:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <__kernel_rem_pio2+0x330>)
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	460d      	mov	r5, r1
 8003d3e:	f7fc fbfb 	bl	8000538 <__aeabi_dmul>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4640      	mov	r0, r8
 8003d48:	4649      	mov	r1, r9
 8003d4a:	f7fc fa41 	bl	80001d0 <__aeabi_dsub>
 8003d4e:	f7fc fe8d 	bl	8000a6c <__aeabi_d2iz>
 8003d52:	ab0c      	add	r3, sp, #48	; 0x30
 8003d54:	4629      	mov	r1, r5
 8003d56:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003d5a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f7fc fa38 	bl	80001d4 <__adddf3>
 8003d64:	3601      	adds	r6, #1
 8003d66:	4680      	mov	r8, r0
 8003d68:	4689      	mov	r9, r1
 8003d6a:	e75f      	b.n	8003c2c <__kernel_rem_pio2+0x104>
 8003d6c:	d106      	bne.n	8003d7c <__kernel_rem_pio2+0x254>
 8003d6e:	1e7b      	subs	r3, r7, #1
 8003d70:	aa0c      	add	r2, sp, #48	; 0x30
 8003d72:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003d76:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8003d7a:	e79f      	b.n	8003cbc <__kernel_rem_pio2+0x194>
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	4b37      	ldr	r3, [pc, #220]	; (8003e5c <__kernel_rem_pio2+0x334>)
 8003d80:	f7fc fe60 	bl	8000a44 <__aeabi_dcmpge>
 8003d84:	bb68      	cbnz	r0, 8003de2 <__kernel_rem_pio2+0x2ba>
 8003d86:	4683      	mov	fp, r0
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	4640      	mov	r0, r8
 8003d8e:	4649      	mov	r1, r9
 8003d90:	f7fc fe3a 	bl	8000a08 <__aeabi_dcmpeq>
 8003d94:	2800      	cmp	r0, #0
 8003d96:	f000 80c1 	beq.w	8003f1c <__kernel_rem_pio2+0x3f4>
 8003d9a:	1e7c      	subs	r4, r7, #1
 8003d9c:	4623      	mov	r3, r4
 8003d9e:	2200      	movs	r2, #0
 8003da0:	9900      	ldr	r1, [sp, #0]
 8003da2:	428b      	cmp	r3, r1
 8003da4:	da5c      	bge.n	8003e60 <__kernel_rem_pio2+0x338>
 8003da6:	2a00      	cmp	r2, #0
 8003da8:	f040 808b 	bne.w	8003ec2 <__kernel_rem_pio2+0x39a>
 8003dac:	2401      	movs	r4, #1
 8003dae:	f06f 0203 	mvn.w	r2, #3
 8003db2:	fb02 f304 	mul.w	r3, r2, r4
 8003db6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003db8:	58cb      	ldr	r3, [r1, r3]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d056      	beq.n	8003e6c <__kernel_rem_pio2+0x344>
 8003dbe:	9b08      	ldr	r3, [sp, #32]
 8003dc0:	aa98      	add	r2, sp, #608	; 0x260
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8003dc8:	9b06      	ldr	r3, [sp, #24]
 8003dca:	19dd      	adds	r5, r3, r7
 8003dcc:	ab20      	add	r3, sp, #128	; 0x80
 8003dce:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003dd2:	19e3      	adds	r3, r4, r7
 8003dd4:	1c7e      	adds	r6, r7, #1
 8003dd6:	9303      	str	r3, [sp, #12]
 8003dd8:	9b03      	ldr	r3, [sp, #12]
 8003dda:	429e      	cmp	r6, r3
 8003ddc:	dd48      	ble.n	8003e70 <__kernel_rem_pio2+0x348>
 8003dde:	461f      	mov	r7, r3
 8003de0:	e712      	b.n	8003c08 <__kernel_rem_pio2+0xe0>
 8003de2:	f04f 0b02 	mov.w	fp, #2
 8003de6:	e76c      	b.n	8003cc2 <__kernel_rem_pio2+0x19a>
 8003de8:	ab0c      	add	r3, sp, #48	; 0x30
 8003dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dee:	b94c      	cbnz	r4, 8003e04 <__kernel_rem_pio2+0x2dc>
 8003df0:	b12b      	cbz	r3, 8003dfe <__kernel_rem_pio2+0x2d6>
 8003df2:	a80c      	add	r0, sp, #48	; 0x30
 8003df4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003df8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	3201      	adds	r2, #1
 8003e00:	461c      	mov	r4, r3
 8003e02:	e765      	b.n	8003cd0 <__kernel_rem_pio2+0x1a8>
 8003e04:	a80c      	add	r0, sp, #48	; 0x30
 8003e06:	1acb      	subs	r3, r1, r3
 8003e08:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003e0c:	4623      	mov	r3, r4
 8003e0e:	e7f6      	b.n	8003dfe <__kernel_rem_pio2+0x2d6>
 8003e10:	1e7a      	subs	r2, r7, #1
 8003e12:	ab0c      	add	r3, sp, #48	; 0x30
 8003e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e18:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003e1c:	a90c      	add	r1, sp, #48	; 0x30
 8003e1e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003e22:	e763      	b.n	8003cec <__kernel_rem_pio2+0x1c4>
 8003e24:	1e7a      	subs	r2, r7, #1
 8003e26:	ab0c      	add	r3, sp, #48	; 0x30
 8003e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003e30:	e7f4      	b.n	8003e1c <__kernel_rem_pio2+0x2f4>
 8003e32:	bf00      	nop
 8003e34:	f3af 8000 	nop.w
	...
 8003e44:	3ff00000 	.word	0x3ff00000
 8003e48:	08004748 	.word	0x08004748
 8003e4c:	40200000 	.word	0x40200000
 8003e50:	3ff00000 	.word	0x3ff00000
 8003e54:	3e700000 	.word	0x3e700000
 8003e58:	41700000 	.word	0x41700000
 8003e5c:	3fe00000 	.word	0x3fe00000
 8003e60:	a90c      	add	r1, sp, #48	; 0x30
 8003e62:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	e799      	b.n	8003da0 <__kernel_rem_pio2+0x278>
 8003e6c:	3401      	adds	r4, #1
 8003e6e:	e7a0      	b.n	8003db2 <__kernel_rem_pio2+0x28a>
 8003e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e72:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003e76:	f7fc faf9 	bl	800046c <__aeabi_i2d>
 8003e7a:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e80:	9508      	str	r5, [sp, #32]
 8003e82:	461c      	mov	r4, r3
 8003e84:	2700      	movs	r7, #0
 8003e86:	f04f 0800 	mov.w	r8, #0
 8003e8a:	f04f 0900 	mov.w	r9, #0
 8003e8e:	9b04      	ldr	r3, [sp, #16]
 8003e90:	429f      	cmp	r7, r3
 8003e92:	dd03      	ble.n	8003e9c <__kernel_rem_pio2+0x374>
 8003e94:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003e98:	3601      	adds	r6, #1
 8003e9a:	e79d      	b.n	8003dd8 <__kernel_rem_pio2+0x2b0>
 8003e9c:	9908      	ldr	r1, [sp, #32]
 8003e9e:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003ea2:	9108      	str	r1, [sp, #32]
 8003ea4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003ea8:	f7fc fb46 	bl	8000538 <__aeabi_dmul>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4640      	mov	r0, r8
 8003eb2:	4649      	mov	r1, r9
 8003eb4:	f7fc f98e 	bl	80001d4 <__adddf3>
 8003eb8:	3701      	adds	r7, #1
 8003eba:	4680      	mov	r8, r0
 8003ebc:	4689      	mov	r9, r1
 8003ebe:	e7e6      	b.n	8003e8e <__kernel_rem_pio2+0x366>
 8003ec0:	3c01      	subs	r4, #1
 8003ec2:	ab0c      	add	r3, sp, #48	; 0x30
 8003ec4:	f1aa 0a18 	sub.w	sl, sl, #24
 8003ec8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f7      	beq.n	8003ec0 <__kernel_rem_pio2+0x398>
 8003ed0:	4650      	mov	r0, sl
 8003ed2:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 80041a8 <__kernel_rem_pio2+0x680>
 8003ed6:	f000 fabf 	bl	8004458 <scalbn>
 8003eda:	00e5      	lsls	r5, r4, #3
 8003edc:	ab98      	add	r3, sp, #608	; 0x260
 8003ede:	eb03 0905 	add.w	r9, r3, r5
 8003ee2:	ec57 6b10 	vmov	r6, r7, d0
 8003ee6:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8003eea:	46a0      	mov	r8, r4
 8003eec:	f1b8 0f00 	cmp.w	r8, #0
 8003ef0:	da4d      	bge.n	8003f8e <__kernel_rem_pio2+0x466>
 8003ef2:	ed9f 8baf 	vldr	d8, [pc, #700]	; 80041b0 <__kernel_rem_pio2+0x688>
 8003ef6:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8003efa:	2300      	movs	r3, #0
 8003efc:	9304      	str	r3, [sp, #16]
 8003efe:	4657      	mov	r7, sl
 8003f00:	9b04      	ldr	r3, [sp, #16]
 8003f02:	ebb4 0903 	subs.w	r9, r4, r3
 8003f06:	d476      	bmi.n	8003ff6 <__kernel_rem_pio2+0x4ce>
 8003f08:	4bab      	ldr	r3, [pc, #684]	; (80041b8 <__kernel_rem_pio2+0x690>)
 8003f0a:	461e      	mov	r6, r3
 8003f0c:	ab70      	add	r3, sp, #448	; 0x1c0
 8003f0e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8003f12:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003f16:	f04f 0800 	mov.w	r8, #0
 8003f1a:	e05e      	b.n	8003fda <__kernel_rem_pio2+0x4b2>
 8003f1c:	f1ca 0000 	rsb	r0, sl, #0
 8003f20:	ec49 8b10 	vmov	d0, r8, r9
 8003f24:	f000 fa98 	bl	8004458 <scalbn>
 8003f28:	ec55 4b10 	vmov	r4, r5, d0
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4ba3      	ldr	r3, [pc, #652]	; (80041bc <__kernel_rem_pio2+0x694>)
 8003f30:	ee10 0a10 	vmov	r0, s0
 8003f34:	4629      	mov	r1, r5
 8003f36:	f7fc fd85 	bl	8000a44 <__aeabi_dcmpge>
 8003f3a:	b1f8      	cbz	r0, 8003f7c <__kernel_rem_pio2+0x454>
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	4ba0      	ldr	r3, [pc, #640]	; (80041c0 <__kernel_rem_pio2+0x698>)
 8003f40:	4620      	mov	r0, r4
 8003f42:	4629      	mov	r1, r5
 8003f44:	f7fc faf8 	bl	8000538 <__aeabi_dmul>
 8003f48:	f7fc fd90 	bl	8000a6c <__aeabi_d2iz>
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	f7fc fa8d 	bl	800046c <__aeabi_i2d>
 8003f52:	2200      	movs	r2, #0
 8003f54:	4b99      	ldr	r3, [pc, #612]	; (80041bc <__kernel_rem_pio2+0x694>)
 8003f56:	f7fc faef 	bl	8000538 <__aeabi_dmul>
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4629      	mov	r1, r5
 8003f60:	4620      	mov	r0, r4
 8003f62:	f7fc f935 	bl	80001d0 <__aeabi_dsub>
 8003f66:	f7fc fd81 	bl	8000a6c <__aeabi_d2iz>
 8003f6a:	1c7c      	adds	r4, r7, #1
 8003f6c:	ab0c      	add	r3, sp, #48	; 0x30
 8003f6e:	f10a 0a18 	add.w	sl, sl, #24
 8003f72:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003f76:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8003f7a:	e7a9      	b.n	8003ed0 <__kernel_rem_pio2+0x3a8>
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	4629      	mov	r1, r5
 8003f80:	f7fc fd74 	bl	8000a6c <__aeabi_d2iz>
 8003f84:	ab0c      	add	r3, sp, #48	; 0x30
 8003f86:	463c      	mov	r4, r7
 8003f88:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8003f8c:	e7a0      	b.n	8003ed0 <__kernel_rem_pio2+0x3a8>
 8003f8e:	ab0c      	add	r3, sp, #48	; 0x30
 8003f90:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003f94:	f7fc fa6a 	bl	800046c <__aeabi_i2d>
 8003f98:	4632      	mov	r2, r6
 8003f9a:	463b      	mov	r3, r7
 8003f9c:	f7fc facc 	bl	8000538 <__aeabi_dmul>
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8003fa6:	4b86      	ldr	r3, [pc, #536]	; (80041c0 <__kernel_rem_pio2+0x698>)
 8003fa8:	4630      	mov	r0, r6
 8003faa:	4639      	mov	r1, r7
 8003fac:	f7fc fac4 	bl	8000538 <__aeabi_dmul>
 8003fb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	460f      	mov	r7, r1
 8003fb8:	e798      	b.n	8003eec <__kernel_rem_pio2+0x3c4>
 8003fba:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8003fbe:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8003fc2:	f7fc fab9 	bl	8000538 <__aeabi_dmul>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fce:	f7fc f901 	bl	80001d4 <__adddf3>
 8003fd2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003fd6:	f108 0801 	add.w	r8, r8, #1
 8003fda:	9b00      	ldr	r3, [sp, #0]
 8003fdc:	4598      	cmp	r8, r3
 8003fde:	dc02      	bgt.n	8003fe6 <__kernel_rem_pio2+0x4be>
 8003fe0:	9b04      	ldr	r3, [sp, #16]
 8003fe2:	4598      	cmp	r8, r3
 8003fe4:	dde9      	ble.n	8003fba <__kernel_rem_pio2+0x492>
 8003fe6:	9b04      	ldr	r3, [sp, #16]
 8003fe8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003fec:	3301      	adds	r3, #1
 8003fee:	ecaa 7b02 	vstmia	sl!, {d7}
 8003ff2:	9304      	str	r3, [sp, #16]
 8003ff4:	e784      	b.n	8003f00 <__kernel_rem_pio2+0x3d8>
 8003ff6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d85d      	bhi.n	80040b8 <__kernel_rem_pio2+0x590>
 8003ffc:	e8df f003 	tbb	[pc, r3]
 8004000:	0226264b 	.word	0x0226264b
 8004004:	ab98      	add	r3, sp, #608	; 0x260
 8004006:	441d      	add	r5, r3
 8004008:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800400c:	462e      	mov	r6, r5
 800400e:	46a2      	mov	sl, r4
 8004010:	f1ba 0f00 	cmp.w	sl, #0
 8004014:	dc6e      	bgt.n	80040f4 <__kernel_rem_pio2+0x5cc>
 8004016:	462e      	mov	r6, r5
 8004018:	46a2      	mov	sl, r4
 800401a:	f1ba 0f01 	cmp.w	sl, #1
 800401e:	f300 808a 	bgt.w	8004136 <__kernel_rem_pio2+0x60e>
 8004022:	2000      	movs	r0, #0
 8004024:	2100      	movs	r1, #0
 8004026:	2c01      	cmp	r4, #1
 8004028:	f300 80a6 	bgt.w	8004178 <__kernel_rem_pio2+0x650>
 800402c:	f1bb 0f00 	cmp.w	fp, #0
 8004030:	f040 80a8 	bne.w	8004184 <__kernel_rem_pio2+0x65c>
 8004034:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8004038:	9c02      	ldr	r4, [sp, #8]
 800403a:	e9c4 2300 	strd	r2, r3, [r4]
 800403e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8004042:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8004046:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800404a:	e035      	b.n	80040b8 <__kernel_rem_pio2+0x590>
 800404c:	3508      	adds	r5, #8
 800404e:	ab48      	add	r3, sp, #288	; 0x120
 8004050:	441d      	add	r5, r3
 8004052:	4626      	mov	r6, r4
 8004054:	2000      	movs	r0, #0
 8004056:	2100      	movs	r1, #0
 8004058:	2e00      	cmp	r6, #0
 800405a:	da3c      	bge.n	80040d6 <__kernel_rem_pio2+0x5ae>
 800405c:	f1bb 0f00 	cmp.w	fp, #0
 8004060:	d03f      	beq.n	80040e2 <__kernel_rem_pio2+0x5ba>
 8004062:	4602      	mov	r2, r0
 8004064:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004068:	9d02      	ldr	r5, [sp, #8]
 800406a:	e9c5 2300 	strd	r2, r3, [r5]
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004076:	f7fc f8ab 	bl	80001d0 <__aeabi_dsub>
 800407a:	ae4a      	add	r6, sp, #296	; 0x128
 800407c:	2501      	movs	r5, #1
 800407e:	42ac      	cmp	r4, r5
 8004080:	da32      	bge.n	80040e8 <__kernel_rem_pio2+0x5c0>
 8004082:	f1bb 0f00 	cmp.w	fp, #0
 8004086:	d002      	beq.n	800408e <__kernel_rem_pio2+0x566>
 8004088:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800408c:	4619      	mov	r1, r3
 800408e:	9b02      	ldr	r3, [sp, #8]
 8004090:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004094:	e010      	b.n	80040b8 <__kernel_rem_pio2+0x590>
 8004096:	ab98      	add	r3, sp, #608	; 0x260
 8004098:	441d      	add	r5, r3
 800409a:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 800409e:	2000      	movs	r0, #0
 80040a0:	2100      	movs	r1, #0
 80040a2:	2c00      	cmp	r4, #0
 80040a4:	da11      	bge.n	80040ca <__kernel_rem_pio2+0x5a2>
 80040a6:	f1bb 0f00 	cmp.w	fp, #0
 80040aa:	d002      	beq.n	80040b2 <__kernel_rem_pio2+0x58a>
 80040ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040b0:	4619      	mov	r1, r3
 80040b2:	9b02      	ldr	r3, [sp, #8]
 80040b4:	e9c3 0100 	strd	r0, r1, [r3]
 80040b8:	9b03      	ldr	r3, [sp, #12]
 80040ba:	f003 0007 	and.w	r0, r3, #7
 80040be:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80040c2:	ecbd 8b02 	vpop	{d8}
 80040c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ca:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80040ce:	f7fc f881 	bl	80001d4 <__adddf3>
 80040d2:	3c01      	subs	r4, #1
 80040d4:	e7e5      	b.n	80040a2 <__kernel_rem_pio2+0x57a>
 80040d6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80040da:	f7fc f87b 	bl	80001d4 <__adddf3>
 80040de:	3e01      	subs	r6, #1
 80040e0:	e7ba      	b.n	8004058 <__kernel_rem_pio2+0x530>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	e7bf      	b.n	8004068 <__kernel_rem_pio2+0x540>
 80040e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80040ec:	f7fc f872 	bl	80001d4 <__adddf3>
 80040f0:	3501      	adds	r5, #1
 80040f2:	e7c4      	b.n	800407e <__kernel_rem_pio2+0x556>
 80040f4:	ed16 7b02 	vldr	d7, [r6, #-8]
 80040f8:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 80040fc:	ec53 2b17 	vmov	r2, r3, d7
 8004100:	4640      	mov	r0, r8
 8004102:	4649      	mov	r1, r9
 8004104:	ed8d 7b00 	vstr	d7, [sp]
 8004108:	f7fc f864 	bl	80001d4 <__adddf3>
 800410c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4640      	mov	r0, r8
 8004116:	4649      	mov	r1, r9
 8004118:	f7fc f85a 	bl	80001d0 <__aeabi_dsub>
 800411c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004120:	f7fc f858 	bl	80001d4 <__adddf3>
 8004124:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004128:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800412c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004130:	ed06 7b02 	vstr	d7, [r6, #-8]
 8004134:	e76c      	b.n	8004010 <__kernel_rem_pio2+0x4e8>
 8004136:	ed16 7b02 	vldr	d7, [r6, #-8]
 800413a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 800413e:	ec53 2b17 	vmov	r2, r3, d7
 8004142:	4640      	mov	r0, r8
 8004144:	4649      	mov	r1, r9
 8004146:	ed8d 7b00 	vstr	d7, [sp]
 800414a:	f7fc f843 	bl	80001d4 <__adddf3>
 800414e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4640      	mov	r0, r8
 8004158:	4649      	mov	r1, r9
 800415a:	f7fc f839 	bl	80001d0 <__aeabi_dsub>
 800415e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004162:	f7fc f837 	bl	80001d4 <__adddf3>
 8004166:	ed9d 7b04 	vldr	d7, [sp, #16]
 800416a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800416e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004172:	ed06 7b02 	vstr	d7, [r6, #-8]
 8004176:	e750      	b.n	800401a <__kernel_rem_pio2+0x4f2>
 8004178:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800417c:	f7fc f82a 	bl	80001d4 <__adddf3>
 8004180:	3c01      	subs	r4, #1
 8004182:	e750      	b.n	8004026 <__kernel_rem_pio2+0x4fe>
 8004184:	9a02      	ldr	r2, [sp, #8]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6110      	str	r0, [r2, #16]
 800418e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004192:	6053      	str	r3, [r2, #4]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6093      	str	r3, [r2, #8]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800419e:	60d3      	str	r3, [r2, #12]
 80041a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80041a4:	6153      	str	r3, [r2, #20]
 80041a6:	e787      	b.n	80040b8 <__kernel_rem_pio2+0x590>
 80041a8:	00000000 	.word	0x00000000
 80041ac:	3ff00000 	.word	0x3ff00000
	...
 80041b8:	08004708 	.word	0x08004708
 80041bc:	41700000 	.word	0x41700000
 80041c0:	3e700000 	.word	0x3e700000
 80041c4:	00000000 	.word	0x00000000

080041c8 <__kernel_sin>:
 80041c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041cc:	ec55 4b10 	vmov	r4, r5, d0
 80041d0:	b085      	sub	sp, #20
 80041d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80041d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80041da:	ed8d 1b00 	vstr	d1, [sp]
 80041de:	9002      	str	r0, [sp, #8]
 80041e0:	da06      	bge.n	80041f0 <__kernel_sin+0x28>
 80041e2:	ee10 0a10 	vmov	r0, s0
 80041e6:	4629      	mov	r1, r5
 80041e8:	f7fc fc40 	bl	8000a6c <__aeabi_d2iz>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d051      	beq.n	8004294 <__kernel_sin+0xcc>
 80041f0:	4622      	mov	r2, r4
 80041f2:	462b      	mov	r3, r5
 80041f4:	4620      	mov	r0, r4
 80041f6:	4629      	mov	r1, r5
 80041f8:	f7fc f99e 	bl	8000538 <__aeabi_dmul>
 80041fc:	4682      	mov	sl, r0
 80041fe:	468b      	mov	fp, r1
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4620      	mov	r0, r4
 8004206:	4629      	mov	r1, r5
 8004208:	f7fc f996 	bl	8000538 <__aeabi_dmul>
 800420c:	a341      	add	r3, pc, #260	; (adr r3, 8004314 <__kernel_sin+0x14c>)
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	4680      	mov	r8, r0
 8004214:	4689      	mov	r9, r1
 8004216:	4650      	mov	r0, sl
 8004218:	4659      	mov	r1, fp
 800421a:	f7fc f98d 	bl	8000538 <__aeabi_dmul>
 800421e:	a33f      	add	r3, pc, #252	; (adr r3, 800431c <__kernel_sin+0x154>)
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f7fb ffd4 	bl	80001d0 <__aeabi_dsub>
 8004228:	4652      	mov	r2, sl
 800422a:	465b      	mov	r3, fp
 800422c:	f7fc f984 	bl	8000538 <__aeabi_dmul>
 8004230:	a33c      	add	r3, pc, #240	; (adr r3, 8004324 <__kernel_sin+0x15c>)
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	f7fb ffcd 	bl	80001d4 <__adddf3>
 800423a:	4652      	mov	r2, sl
 800423c:	465b      	mov	r3, fp
 800423e:	f7fc f97b 	bl	8000538 <__aeabi_dmul>
 8004242:	a33a      	add	r3, pc, #232	; (adr r3, 800432c <__kernel_sin+0x164>)
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f7fb ffc2 	bl	80001d0 <__aeabi_dsub>
 800424c:	4652      	mov	r2, sl
 800424e:	465b      	mov	r3, fp
 8004250:	f7fc f972 	bl	8000538 <__aeabi_dmul>
 8004254:	a337      	add	r3, pc, #220	; (adr r3, 8004334 <__kernel_sin+0x16c>)
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	f7fb ffbb 	bl	80001d4 <__adddf3>
 800425e:	9b02      	ldr	r3, [sp, #8]
 8004260:	4606      	mov	r6, r0
 8004262:	460f      	mov	r7, r1
 8004264:	b9db      	cbnz	r3, 800429e <__kernel_sin+0xd6>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4650      	mov	r0, sl
 800426c:	4659      	mov	r1, fp
 800426e:	f7fc f963 	bl	8000538 <__aeabi_dmul>
 8004272:	a325      	add	r3, pc, #148	; (adr r3, 8004308 <__kernel_sin+0x140>)
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f7fb ffaa 	bl	80001d0 <__aeabi_dsub>
 800427c:	4642      	mov	r2, r8
 800427e:	464b      	mov	r3, r9
 8004280:	f7fc f95a 	bl	8000538 <__aeabi_dmul>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4620      	mov	r0, r4
 800428a:	4629      	mov	r1, r5
 800428c:	f7fb ffa2 	bl	80001d4 <__adddf3>
 8004290:	4604      	mov	r4, r0
 8004292:	460d      	mov	r5, r1
 8004294:	ec45 4b10 	vmov	d0, r4, r5
 8004298:	b005      	add	sp, #20
 800429a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429e:	2200      	movs	r2, #0
 80042a0:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <__kernel_sin+0x148>)
 80042a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042a6:	f7fc f947 	bl	8000538 <__aeabi_dmul>
 80042aa:	4632      	mov	r2, r6
 80042ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80042b0:	463b      	mov	r3, r7
 80042b2:	4640      	mov	r0, r8
 80042b4:	4649      	mov	r1, r9
 80042b6:	f7fc f93f 	bl	8000538 <__aeabi_dmul>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042c2:	f7fb ff85 	bl	80001d0 <__aeabi_dsub>
 80042c6:	4652      	mov	r2, sl
 80042c8:	465b      	mov	r3, fp
 80042ca:	f7fc f935 	bl	8000538 <__aeabi_dmul>
 80042ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042d2:	f7fb ff7d 	bl	80001d0 <__aeabi_dsub>
 80042d6:	a30c      	add	r3, pc, #48	; (adr r3, 8004308 <__kernel_sin+0x140>)
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	4606      	mov	r6, r0
 80042de:	460f      	mov	r7, r1
 80042e0:	4640      	mov	r0, r8
 80042e2:	4649      	mov	r1, r9
 80042e4:	f7fc f928 	bl	8000538 <__aeabi_dmul>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4630      	mov	r0, r6
 80042ee:	4639      	mov	r1, r7
 80042f0:	f7fb ff70 	bl	80001d4 <__adddf3>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4620      	mov	r0, r4
 80042fa:	4629      	mov	r1, r5
 80042fc:	f7fb ff68 	bl	80001d0 <__aeabi_dsub>
 8004300:	e7c6      	b.n	8004290 <__kernel_sin+0xc8>
 8004302:	bf00      	nop
 8004304:	f3af 8000 	nop.w
 8004308:	55555549 	.word	0x55555549
 800430c:	3fc55555 	.word	0x3fc55555
 8004310:	3fe00000 	.word	0x3fe00000
 8004314:	5acfd57c 	.word	0x5acfd57c
 8004318:	3de5d93a 	.word	0x3de5d93a
 800431c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004320:	3e5ae5e6 	.word	0x3e5ae5e6
 8004324:	57b1fe7d 	.word	0x57b1fe7d
 8004328:	3ec71de3 	.word	0x3ec71de3
 800432c:	19c161d5 	.word	0x19c161d5
 8004330:	3f2a01a0 	.word	0x3f2a01a0
 8004334:	1110f8a6 	.word	0x1110f8a6
 8004338:	3f811111 	.word	0x3f811111

0800433c <fabs>:
 800433c:	ec53 2b10 	vmov	r2, r3, d0
 8004340:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004344:	ec43 2b10 	vmov	d0, r2, r3
 8004348:	4770      	bx	lr
 800434a:	0000      	movs	r0, r0
 800434c:	0000      	movs	r0, r0
	...

08004350 <floor>:
 8004350:	ec51 0b10 	vmov	r0, r1, d0
 8004354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004358:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800435c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004360:	2e13      	cmp	r6, #19
 8004362:	ee10 8a10 	vmov	r8, s0
 8004366:	460c      	mov	r4, r1
 8004368:	ee10 5a10 	vmov	r5, s0
 800436c:	dc35      	bgt.n	80043da <floor+0x8a>
 800436e:	2e00      	cmp	r6, #0
 8004370:	da17      	bge.n	80043a2 <floor+0x52>
 8004372:	a335      	add	r3, pc, #212	; (adr r3, 8004448 <floor+0xf8>)
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f7fb ff2c 	bl	80001d4 <__adddf3>
 800437c:	2200      	movs	r2, #0
 800437e:	2300      	movs	r3, #0
 8004380:	f7fc fb6a 	bl	8000a58 <__aeabi_dcmpgt>
 8004384:	b150      	cbz	r0, 800439c <floor+0x4c>
 8004386:	2c00      	cmp	r4, #0
 8004388:	da5a      	bge.n	8004440 <floor+0xf0>
 800438a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800438e:	ea53 0308 	orrs.w	r3, r3, r8
 8004392:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <floor+0x100>)
 8004394:	f04f 0500 	mov.w	r5, #0
 8004398:	bf18      	it	ne
 800439a:	461c      	movne	r4, r3
 800439c:	4621      	mov	r1, r4
 800439e:	4628      	mov	r0, r5
 80043a0:	e025      	b.n	80043ee <floor+0x9e>
 80043a2:	4f2c      	ldr	r7, [pc, #176]	; (8004454 <floor+0x104>)
 80043a4:	4137      	asrs	r7, r6
 80043a6:	ea01 0307 	and.w	r3, r1, r7
 80043aa:	4303      	orrs	r3, r0
 80043ac:	d01f      	beq.n	80043ee <floor+0x9e>
 80043ae:	a326      	add	r3, pc, #152	; (adr r3, 8004448 <floor+0xf8>)
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f7fb ff0e 	bl	80001d4 <__adddf3>
 80043b8:	2200      	movs	r2, #0
 80043ba:	2300      	movs	r3, #0
 80043bc:	f7fc fb4c 	bl	8000a58 <__aeabi_dcmpgt>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d0eb      	beq.n	800439c <floor+0x4c>
 80043c4:	2c00      	cmp	r4, #0
 80043c6:	bfbe      	ittt	lt
 80043c8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80043cc:	fa43 f606 	asrlt.w	r6, r3, r6
 80043d0:	19a4      	addlt	r4, r4, r6
 80043d2:	ea24 0407 	bic.w	r4, r4, r7
 80043d6:	2500      	movs	r5, #0
 80043d8:	e7e0      	b.n	800439c <floor+0x4c>
 80043da:	2e33      	cmp	r6, #51	; 0x33
 80043dc:	dd0b      	ble.n	80043f6 <floor+0xa6>
 80043de:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80043e2:	d104      	bne.n	80043ee <floor+0x9e>
 80043e4:	ee10 2a10 	vmov	r2, s0
 80043e8:	460b      	mov	r3, r1
 80043ea:	f7fb fef3 	bl	80001d4 <__adddf3>
 80043ee:	ec41 0b10 	vmov	d0, r0, r1
 80043f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043f6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80043fa:	f04f 33ff 	mov.w	r3, #4294967295
 80043fe:	fa23 f707 	lsr.w	r7, r3, r7
 8004402:	4238      	tst	r0, r7
 8004404:	d0f3      	beq.n	80043ee <floor+0x9e>
 8004406:	a310      	add	r3, pc, #64	; (adr r3, 8004448 <floor+0xf8>)
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	f7fb fee2 	bl	80001d4 <__adddf3>
 8004410:	2200      	movs	r2, #0
 8004412:	2300      	movs	r3, #0
 8004414:	f7fc fb20 	bl	8000a58 <__aeabi_dcmpgt>
 8004418:	2800      	cmp	r0, #0
 800441a:	d0bf      	beq.n	800439c <floor+0x4c>
 800441c:	2c00      	cmp	r4, #0
 800441e:	da02      	bge.n	8004426 <floor+0xd6>
 8004420:	2e14      	cmp	r6, #20
 8004422:	d103      	bne.n	800442c <floor+0xdc>
 8004424:	3401      	adds	r4, #1
 8004426:	ea25 0507 	bic.w	r5, r5, r7
 800442a:	e7b7      	b.n	800439c <floor+0x4c>
 800442c:	2301      	movs	r3, #1
 800442e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004432:	fa03 f606 	lsl.w	r6, r3, r6
 8004436:	4435      	add	r5, r6
 8004438:	45a8      	cmp	r8, r5
 800443a:	bf88      	it	hi
 800443c:	18e4      	addhi	r4, r4, r3
 800443e:	e7f2      	b.n	8004426 <floor+0xd6>
 8004440:	2500      	movs	r5, #0
 8004442:	462c      	mov	r4, r5
 8004444:	e7aa      	b.n	800439c <floor+0x4c>
 8004446:	bf00      	nop
 8004448:	8800759c 	.word	0x8800759c
 800444c:	7e37e43c 	.word	0x7e37e43c
 8004450:	bff00000 	.word	0xbff00000
 8004454:	000fffff 	.word	0x000fffff

08004458 <scalbn>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	ec55 4b10 	vmov	r4, r5, d0
 800445e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004462:	4606      	mov	r6, r0
 8004464:	462b      	mov	r3, r5
 8004466:	b9b2      	cbnz	r2, 8004496 <scalbn+0x3e>
 8004468:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800446c:	4323      	orrs	r3, r4
 800446e:	d03c      	beq.n	80044ea <scalbn+0x92>
 8004470:	2200      	movs	r2, #0
 8004472:	4b33      	ldr	r3, [pc, #204]	; (8004540 <scalbn+0xe8>)
 8004474:	4629      	mov	r1, r5
 8004476:	ee10 0a10 	vmov	r0, s0
 800447a:	f7fc f85d 	bl	8000538 <__aeabi_dmul>
 800447e:	4a31      	ldr	r2, [pc, #196]	; (8004544 <scalbn+0xec>)
 8004480:	4296      	cmp	r6, r2
 8004482:	4604      	mov	r4, r0
 8004484:	460d      	mov	r5, r1
 8004486:	460b      	mov	r3, r1
 8004488:	da13      	bge.n	80044b2 <scalbn+0x5a>
 800448a:	a329      	add	r3, pc, #164	; (adr r3, 8004530 <scalbn+0xd8>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	f7fc f852 	bl	8000538 <__aeabi_dmul>
 8004494:	e00a      	b.n	80044ac <scalbn+0x54>
 8004496:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800449a:	428a      	cmp	r2, r1
 800449c:	d10c      	bne.n	80044b8 <scalbn+0x60>
 800449e:	ee10 2a10 	vmov	r2, s0
 80044a2:	462b      	mov	r3, r5
 80044a4:	4620      	mov	r0, r4
 80044a6:	4629      	mov	r1, r5
 80044a8:	f7fb fe94 	bl	80001d4 <__adddf3>
 80044ac:	4604      	mov	r4, r0
 80044ae:	460d      	mov	r5, r1
 80044b0:	e01b      	b.n	80044ea <scalbn+0x92>
 80044b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80044b6:	3a36      	subs	r2, #54	; 0x36
 80044b8:	4432      	add	r2, r6
 80044ba:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80044be:	428a      	cmp	r2, r1
 80044c0:	dd0b      	ble.n	80044da <scalbn+0x82>
 80044c2:	ec45 4b11 	vmov	d1, r4, r5
 80044c6:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004538 <scalbn+0xe0>
 80044ca:	f000 f83f 	bl	800454c <copysign>
 80044ce:	a31a      	add	r3, pc, #104	; (adr r3, 8004538 <scalbn+0xe0>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	ec51 0b10 	vmov	r0, r1, d0
 80044d8:	e7da      	b.n	8004490 <scalbn+0x38>
 80044da:	2a00      	cmp	r2, #0
 80044dc:	dd08      	ble.n	80044f0 <scalbn+0x98>
 80044de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80044e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044e6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80044ea:	ec45 4b10 	vmov	d0, r4, r5
 80044ee:	bd70      	pop	{r4, r5, r6, pc}
 80044f0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80044f4:	da0d      	bge.n	8004512 <scalbn+0xba>
 80044f6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80044fa:	429e      	cmp	r6, r3
 80044fc:	ec45 4b11 	vmov	d1, r4, r5
 8004500:	dce1      	bgt.n	80044c6 <scalbn+0x6e>
 8004502:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8004530 <scalbn+0xd8>
 8004506:	f000 f821 	bl	800454c <copysign>
 800450a:	a309      	add	r3, pc, #36	; (adr r3, 8004530 <scalbn+0xd8>)
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	e7e0      	b.n	80044d4 <scalbn+0x7c>
 8004512:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004516:	3236      	adds	r2, #54	; 0x36
 8004518:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800451c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004520:	4620      	mov	r0, r4
 8004522:	4629      	mov	r1, r5
 8004524:	2200      	movs	r2, #0
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <scalbn+0xf0>)
 8004528:	e7b2      	b.n	8004490 <scalbn+0x38>
 800452a:	bf00      	nop
 800452c:	f3af 8000 	nop.w
 8004530:	c2f8f359 	.word	0xc2f8f359
 8004534:	01a56e1f 	.word	0x01a56e1f
 8004538:	8800759c 	.word	0x8800759c
 800453c:	7e37e43c 	.word	0x7e37e43c
 8004540:	43500000 	.word	0x43500000
 8004544:	ffff3cb0 	.word	0xffff3cb0
 8004548:	3c900000 	.word	0x3c900000

0800454c <copysign>:
 800454c:	ec53 2b10 	vmov	r2, r3, d0
 8004550:	ee11 0a90 	vmov	r0, s3
 8004554:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800455c:	ea41 0300 	orr.w	r3, r1, r0
 8004560:	ec43 2b10 	vmov	d0, r2, r3
 8004564:	4770      	bx	lr
	...

08004568 <_init>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	bf00      	nop
 800456c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456e:	bc08      	pop	{r3}
 8004570:	469e      	mov	lr, r3
 8004572:	4770      	bx	lr

08004574 <_fini>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	bf00      	nop
 8004578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457a:	bc08      	pop	{r3}
 800457c:	469e      	mov	lr, r3
 800457e:	4770      	bx	lr
