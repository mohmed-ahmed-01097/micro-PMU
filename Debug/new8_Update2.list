
new8_Update2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  00020014  2**0
                  CONTENTS
  1 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004550  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001d8  080046d8  080046d8  000146d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080048b0  080048b0  000148b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  20000000  080048b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
  8 .bss          0001f2cc  20000014  20000014  00020014  2**2
                  ALLOC
  9 ._user_heap_stack 00000c00  2001f2e0  2001f2e0  00020014  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 11 .debug_info   00006421  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000016a6  00000000  00000000  00026465  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002936  00000000  00000000  00027b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000308  00000000  00000000  0002a448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  0002a750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000232c  00000000  00000000  0002b250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00001aaa  00000000  00000000  0002d57c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0002f026  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000b50  00000000  00000000  0002f0a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046c0 	.word	0x080046c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080046c0 	.word	0x080046c0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	0000      	movs	r0, r0
	...

08000ba0 <LookUp_Init>:

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Initialization of Look Up tables **/
void LookUp_Init(void){
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	4d5d      	ldr	r5, [pc, #372]	; (8000d18 <LookUp_Init+0x178>)
 8000ba4:	ed2d 8b02 	vpush	{d8}
 8000ba8:	a157      	add	r1, pc, #348	; (adr r1, 8000d08 <LookUp_Init+0x168>)
 8000baa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bae:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8000d1c <LookUp_Init+0x17c>
 8000bb2:	f5a5 6600 	sub.w	r6, r5, #2048	; 0x800
	for(uint16_t i = READ_SAMPLEn ; i-- ; --float_ptr){
 8000bb6:	f240 14ff 	movw	r4, #511	; 0x1ff
 8000bba:	e007      	b.n	8000bcc <LookUp_Init+0x2c>
 8000bbc:	f7ff fc68 	bl	8000490 <__aeabi_f2d>
 8000bc0:	ec41 0b10 	vmov	d0, r0, r1
 8000bc4:	f002 fd38 	bl	8003638 <sin>
 8000bc8:	ec51 0b10 	vmov	r0, r1, d0
 8000bcc:	3c01      	subs	r4, #1
 8000bce:	b2a4      	uxth	r4, r4
		*float_ptr = sin(2*PI*i / READ_SAMPLEn);
 8000bd0:	f7ff ff94 	bl	8000afc <__aeabi_d2f>
 8000bd4:	ee07 4a90 	vmov	s15, r4
 8000bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bdc:	f845 0d04 	str.w	r0, [r5, #-4]!
 8000be0:	ee67 7a88 	vmul.f32	s15, s15, s16
	for(uint16_t i = READ_SAMPLEn ; i-- ; --float_ptr){
 8000be4:	42b5      	cmp	r5, r6
 8000be6:	ee17 0a90 	vmov	r0, s15
 8000bea:	d1e7      	bne.n	8000bbc <LookUp_Init+0x1c>
 8000bec:	4d4c      	ldr	r5, [pc, #304]	; (8000d20 <LookUp_Init+0x180>)
 8000bee:	ed9f 8a4b 	vldr	s16, [pc, #300]	; 8000d1c <LookUp_Init+0x17c>
 8000bf2:	f5a5 6600 	sub.w	r6, r5, #2048	; 0x800
 8000bf6:	a146      	add	r1, pc, #280	; (adr r1, 8000d10 <LookUp_Init+0x170>)
 8000bf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bfc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8000c00:	e007      	b.n	8000c12 <LookUp_Init+0x72>
 8000c02:	f7ff fc45 	bl	8000490 <__aeabi_f2d>
 8000c06:	ec41 0b10 	vmov	d0, r0, r1
 8000c0a:	f002 fcd1 	bl	80035b0 <cos>
 8000c0e:	ec51 0b10 	vmov	r0, r1, d0
	for(uint16_t i = READ_SAMPLEn ; i-- ; --float_ptr){
 8000c12:	3c01      	subs	r4, #1
 8000c14:	b2a4      	uxth	r4, r4
		*float_ptr = cos(2*PI*i / READ_SAMPLEn);
 8000c16:	f7ff ff71 	bl	8000afc <__aeabi_d2f>
 8000c1a:	ee07 4a90 	vmov	s15, r4
 8000c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c22:	f845 0d04 	str.w	r0, [r5, #-4]!
 8000c26:	ee67 7a88 	vmul.f32	s15, s15, s16
	for(uint16_t i = READ_SAMPLEn ; i-- ; --float_ptr){
 8000c2a:	42ae      	cmp	r6, r5
 8000c2c:	ee17 0a90 	vmov	r0, s15
 8000c30:	d1e7      	bne.n	8000c02 <LookUp_Init+0x62>
 8000c32:	eddf 4a3c 	vldr	s9, [pc, #240]	; 8000d24 <LookUp_Init+0x184>
		float b = i * Delta_t;
 8000c36:	ed9f 4a3c 	vldr	s8, [pc, #240]	; 8000d28 <LookUp_Init+0x188>
	for(uint16_t i = READ_SAMPLEn ; i-- ; --float_ptr){
 8000c3a:	eeb0 6a64 	vmov.f32	s12, s9
 8000c3e:	eef0 5a64 	vmov.f32	s11, s9
 8000c42:	eeb0 5a64 	vmov.f32	s10, s9
 8000c46:	f240 13ff 	movw	r3, #511	; 0x1ff
		float b = i * Delta_t;
 8000c4a:	ee07 3a90 	vmov	s15, r3
 8000c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c52:	3b01      	subs	r3, #1
 8000c54:	ee67 7a84 	vmul.f32	s15, s15, s8
	for(uint16_t i = READ_SAMPLEn; i-- ; ){
 8000c58:	1c5a      	adds	r2, r3, #1
		sum_b1 += step_b ;		step_b = step_b * b;
 8000c5a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8000c5e:	ee35 5a27 	vadd.f32	s10, s10, s15
		sum_b2 += step_b; 		step_b = step_b * b;
 8000c62:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8000c66:	ee75 5aa6 	vadd.f32	s11, s11, s13
		sum_b3 += step_b; 		step_b = step_b * b;
 8000c6a:	ee36 6a07 	vadd.f32	s12, s12, s14
		sum_b4 += step_b;
 8000c6e:	eee7 4a87 	vfma.f32	s9, s15, s14
	for(uint16_t i = READ_SAMPLEn; i-- ; ){
 8000c72:	d1ea      	bne.n	8000c4a <LookUp_Init+0xaa>
		determinant += (mat_m[0][i]*(mat_m[1][(i+1)%3]*mat_m[2][(i+2)%3] - mat_m[1][(i+2)%3]*mat_m[2][(i+1)%3]));
 8000c74:	ee66 6a46 	vnmul.f32	s13, s12, s12
 8000c78:	ee24 7ac5 	vnmul.f32	s14, s9, s10
 8000c7c:	eee5 6aa4 	vfma.f32	s13, s11, s9
	Set_sin(&SIN_ARRAY[READ_SAMPLEn-1]);
	Set_cos(&COS_ARRAY[READ_SAMPLEn-1]);

	Set_MAT_J();

}
 8000c80:	ecbd 8b02 	vpop	{d8}
		determinant += (mat_m[0][i]*(mat_m[1][(i+1)%3]*mat_m[2][(i+2)%3] - mat_m[1][(i+2)%3]*mat_m[2][(i+1)%3]));
 8000c84:	eddf 2a29 	vldr	s5, [pc, #164]	; 8000d2c <LookUp_Init+0x18c>
	        	mat_i[i*3+j] = ((mat_m[(i+1)%3][(j+1)%3] * mat_m[(i+2)%3][(j+2)%3]) - (mat_m[(i+1)%3][(j+2)%3]*mat_m[(i+2)%3][(j+1)%3]))/ determinant;
 8000c88:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <LookUp_Init+0x190>)
		determinant += (mat_m[0][i]*(mat_m[1][(i+1)%3]*mat_m[2][(i+2)%3] - mat_m[1][(i+2)%3]*mat_m[2][(i+1)%3]));
 8000c8a:	eea5 7a86 	vfma.f32	s14, s11, s12
 8000c8e:	ee65 7ae5 	vnmul.f32	s15, s11, s11
 8000c92:	ee26 3aa2 	vmul.f32	s6, s13, s5
 8000c96:	eef0 3a67 	vmov.f32	s7, s15
 8000c9a:	eee5 3a06 	vfma.f32	s7, s10, s12
 8000c9e:	eea7 3a05 	vfma.f32	s6, s14, s10
 8000ca2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8000ca6:	eea5 3aa3 	vfma.f32	s6, s11, s7
	        	mat_i[i*3+j] = ((mat_m[(i+1)%3][(j+1)%3] * mat_m[(i+2)%3][(j+2)%3]) - (mat_m[(i+1)%3][(j+2)%3]*mat_m[(i+2)%3][(j+1)%3]))/ determinant;
 8000caa:	ee22 6ac6 	vnmul.f32	s12, s5, s12
 8000cae:	ee82 4a03 	vdiv.f32	s8, s4, s6
 8000cb2:	ee25 3a45 	vnmul.f32	s6, s10, s10
 8000cb6:	eea5 6a25 	vfma.f32	s12, s10, s11
 8000cba:	eee4 7aa2 	vfma.f32	s15, s9, s5
 8000cbe:	eeb0 5a43 	vmov.f32	s10, s6
 8000cc2:	eea5 5aa2 	vfma.f32	s10, s11, s5
 8000cc6:	eef0 4a67 	vmov.f32	s9, s15
 8000cca:	ee64 5a23 	vmul.f32	s11, s8, s7
 8000cce:	ee66 7a04 	vmul.f32	s15, s12, s8
 8000cd2:	ee27 7a04 	vmul.f32	s14, s14, s8
 8000cd6:	ee25 5a04 	vmul.f32	s10, s10, s8
 8000cda:	ee24 6a84 	vmul.f32	s12, s9, s8
 8000cde:	ee66 6a84 	vmul.f32	s13, s13, s8
 8000ce2:	ed83 5a08 	vstr	s10, [r3, #32]
 8000ce6:	edc3 7a07 	vstr	s15, [r3, #28]
 8000cea:	edc3 5a06 	vstr	s11, [r3, #24]
 8000cee:	edc3 7a05 	vstr	s15, [r3, #20]
 8000cf2:	ed83 6a04 	vstr	s12, [r3, #16]
 8000cf6:	ed83 7a03 	vstr	s14, [r3, #12]
 8000cfa:	edc3 5a02 	vstr	s11, [r3, #8]
 8000cfe:	ed83 7a01 	vstr	s14, [r3, #4]
 8000d02:	edc3 6a00 	vstr	s13, [r3]
}
 8000d06:	bd70      	pop	{r4, r5, r6, pc}
 8000d08:	31518c40 	.word	0x31518c40
 8000d0c:	bf8921bf 	.word	0xbf8921bf
 8000d10:	1787c54a 	.word	0x1787c54a
 8000d14:	3fefff62 	.word	0x3fefff62
 8000d18:	20019090 	.word	0x20019090
 8000d1c:	3c490fdb 	.word	0x3c490fdb
 8000d20:	20000830 	.word	0x20000830
 8000d24:	00000000 	.word	0x00000000
 8000d28:	3823d70a 	.word	0x3823d70a
 8000d2c:	44000000 	.word	0x44000000
 8000d30:	20019120 	.word	0x20019120

08000d34 <uPMU_Process_Mode>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Read Process **/
void uPMU_Process_Mode(volatile Channel_Typedef* data, const uint16_t sample){
 8000d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	OUTPUT_Typedef* out_sum = SUM_PHASOR;
	Phasor_Typedef* result  = OUT_ARRAY[Read_Buffer][sample];

	Channel_Typedef* data_0 = ADC_BUFFER;

    float b_1 = sample * Delta_t;
 8000d38:	ee07 1a90 	vmov	s15, r1
    float b_2 = b_1 * b_1;
    //float J0 = mat_i[0] + mat_i[1] * b_1 + mat_i[2] * b_2;
    float J1 = mat_i[3] + mat_i[4] * b_1 + mat_i[5] * b_2;
 8000d3c:	4a25      	ldr	r2, [pc, #148]	; (8000dd4 <uPMU_Process_Mode+0xa0>)
    float b_1 = sample * Delta_t;
 8000d3e:	ed9f 5a26 	vldr	s10, [pc, #152]	; 8000dd8 <uPMU_Process_Mode+0xa4>
	Phasor_Typedef* result  = OUT_ARRAY[Read_Buffer][sample];
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <uPMU_Process_Mode+0xa8>)
    float J1 = mat_i[3] + mat_i[4] * b_1 + mat_i[5] * b_2;
 8000d44:	edd2 5a04 	vldr	s11, [r2, #16]
    float J2 = mat_i[6] + mat_i[7] * b_1 + mat_i[8] * b_2;
 8000d48:	ed92 6a07 	vldr	s12, [r2, #28]
	float sin_f = SIN_ARRAY[sample];
 8000d4c:	4f24      	ldr	r7, [pc, #144]	; (8000de0 <uPMU_Process_Mode+0xac>)
	float cos_f = COS_ARRAY[sample];
 8000d4e:	4c25      	ldr	r4, [pc, #148]	; (8000de4 <uPMU_Process_Mode+0xb0>)
    float J1 = mat_i[3] + mat_i[4] * b_1 + mat_i[5] * b_2;
 8000d50:	edd2 6a05 	vldr	s13, [r2, #20]
    float J2 = mat_i[6] + mat_i[7] * b_1 + mat_i[8] * b_2;
 8000d54:	ed92 7a08 	vldr	s14, [r2, #32]
 8000d58:	4d23      	ldr	r5, [pc, #140]	; (8000de8 <uPMU_Process_Mode+0xb4>)
		value->A.Real += ((data->A - data_0->A) * cos_f);

		value->V.Imag += ((data->V - data_0->V) * sin_f);
		value->A.Imag += ((data->A - data_0->A) * sin_f);

		result->V.Absl = (value->V.Real * value->V.Real + value->V.Imag * value->V.Imag) * FACTOR;
 8000d5a:	eddf 3a24 	vldr	s7, [pc, #144]	; 8000dec <uPMU_Process_Mode+0xb8>
 8000d5e:	eddf 2a24 	vldr	s5, [pc, #144]	; 8000df0 <uPMU_Process_Mode+0xbc>
 8000d62:	ed9f 3a24 	vldr	s6, [pc, #144]	; 8000df4 <uPMU_Process_Mode+0xc0>
			temp  = temp * step * TAN_F[i];
 8000d66:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8000df8 <uPMU_Process_Mode+0xc4>
 8000d6a:	eddf 0a24 	vldr	s1, [pc, #144]	; 8000dfc <uPMU_Process_Mode+0xc8>
 8000d6e:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8000e00 <uPMU_Process_Mode+0xcc>
 8000d72:	eddf 1a24 	vldr	s3, [pc, #144]	; 8000e04 <uPMU_Process_Mode+0xd0>
 8000d76:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8000e08 <uPMU_Process_Mode+0xd4>
void uPMU_Process_Mode(volatile Channel_Typedef* data, const uint16_t sample){
 8000d7a:	ed2d 8b0c 	vpush	{d8-d13}
    float b_1 = sample * Delta_t;
 8000d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    float J1 = mat_i[3] + mat_i[4] * b_1 + mat_i[5] * b_2;
 8000d82:	ed92 9a03 	vldr	s18, [r2, #12]
    float J2 = mat_i[6] + mat_i[7] * b_1 + mat_i[8] * b_2;
 8000d86:	edd2 8a06 	vldr	s17, [r2, #24]
	Phasor_Typedef* result  = OUT_ARRAY[Read_Buffer][sample];
 8000d8a:	781b      	ldrb	r3, [r3, #0]
			temp  = temp * step * TAN_F[i];
 8000d8c:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8000e0c <uPMU_Process_Mode+0xd8>
 8000d90:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <uPMU_Process_Mode+0xdc>)
    float b_1 = sample * Delta_t;
 8000d92:	ee67 7a85 	vmul.f32	s15, s15, s10
 8000d96:	eb03 0643 	add.w	r6, r3, r3, lsl #1
    float J1 = mat_i[3] + mat_i[4] * b_1 + mat_i[5] * b_2;
 8000d9a:	eea7 9aa5 	vfma.f32	s18, s15, s11
 8000d9e:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
 8000da2:	03b6      	lsls	r6, r6, #14
    float J2 = mat_i[6] + mat_i[7] * b_1 + mat_i[8] * b_2;
 8000da4:	eee7 8a86 	vfma.f32	s17, s15, s12
	float sin_f = SIN_ARRAY[sample];
 8000da8:	0089      	lsls	r1, r1, #2
 8000daa:	187b      	adds	r3, r7, r1
    float b_2 = b_1 * b_1;
 8000dac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000db0:	eb06 164e 	add.w	r6, r6, lr, lsl #5
	float cos_f = COS_ARRAY[sample];
 8000db4:	4421      	add	r1, r4
	float sin_f = SIN_ARRAY[sample];
 8000db6:	ed93 4a00 	vldr	s8, [r3]
 8000dba:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8000e18 <uPMU_Process_Mode+0xe4>
	float cos_f = COS_ARRAY[sample];
 8000dbe:	edd1 4a00 	vldr	s9, [r1]
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <uPMU_Process_Mode+0xe0>)
    float J1 = mat_i[3] + mat_i[4] * b_1 + mat_i[5] * b_2;
 8000dc4:	eea7 9aa6 	vfma.f32	s18, s15, s13
 8000dc8:	442e      	add	r6, r5
	for(uint8_t i = ADC_CHANNELn; i-- ;  ++value, ++data, ++data_0, ++result, ++out_sum){
 8000dca:	2705      	movs	r7, #5
    float J2 = mat_i[6] + mat_i[7] * b_1 + mat_i[8] * b_2;
 8000dcc:	eee7 8a87 	vfma.f32	s17, s15, s14
 8000dd0:	e092      	b.n	8000ef8 <uPMU_Process_Mode+0x1c4>
 8000dd2:	bf00      	nop
 8000dd4:	20019120 	.word	0x20019120
 8000dd8:	3823d70a 	.word	0x3823d70a
 8000ddc:	2001f148 	.word	0x2001f148
 8000de0:	20018890 	.word	0x20018890
 8000de4:	20000030 	.word	0x20000030
 8000de8:	200008a0 	.word	0x200008a0
 8000dec:	2a2c02b0 	.word	0x2a2c02b0
 8000df0:	42652ee0 	.word	0x42652ee0
 8000df4:	3b360b61 	.word	0x3b360b61
 8000df8:	3e4ccccd 	.word	0x3e4ccccd
 8000dfc:	3e124925 	.word	0x3e124925
 8000e00:	3de38e39 	.word	0x3de38e39
 8000e04:	3dba2e8c 	.word	0x3dba2e8c
 8000e08:	3d9d89d9 	.word	0x3d9d89d9
 8000e0c:	3eaaaaab 	.word	0x3eaaaaab
 8000e10:	20000840 	.word	0x20000840
 8000e14:	200190a8 	.word	0x200190a8
 8000e18:	2001f2cc 	.word	0x2001f2cc
 8000e1c:	00000000 	.word	0x00000000
 8000e20:	43b40000 	.word	0x43b40000
 8000e24:	3fc75923 	.word	0x3fc75923
 8000e28:	3d888889 	.word	0x3d888889
 8000e2c:	3d70f0f1 	.word	0x3d70f0f1
 8000e30:	3d430c31 	.word	0x3d430c31
 8000e34:	3d579436 	.word	0x3d579436
 8000e38:	3fc90fdb 	.word	0x3fc90fdb
 8000e3c:	40490fdb 	.word	0x40490fdb
		angle = PI_2 * (y != 0);
 8000e40:	eef5 9a40 	vcmp.f32	s19, #0.0
 8000e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e48:	f040 81f4 	bne.w	8001234 <uPMU_Process_Mode+0x500>
 8000e4c:	ed1f aa0d 	vldr	s20, [pc, #-52]	; 8000e1c <uPMU_Process_Mode+0xe8>
	if (x == 0){
 8000e50:	eef5 6a40 	vcmp.f32	s13, #0.0
		angle = PI_2 * (y != 0);
 8000e54:	eeb0 7a4a 	vmov.f32	s14, s20
	if (x == 0){
 8000e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		result->A.Absl = (value->A.Real * value->A.Real + value->A.Imag * value->A.Imag) * FACTOR;

		result->V.Angl = Get_atan(-value->V.Imag, value->V.Real);
 8000e5c:	ed06 7a03 	vstr	s14, [r6, #-12]
	if (x == 0){
 8000e60:	f040 8140 	bne.w	80010e4 <uPMU_Process_Mode+0x3b0>
		angle = PI_2 * (y != 0);
 8000e64:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8000e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6c:	f040 81d4 	bne.w	8001218 <uPMU_Process_Mode+0x4e4>
 8000e70:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 8000e1c <uPMU_Process_Mode+0xe8>
 8000e74:	eef0 7a66 	vmov.f32	s15, s13
		result->A.Angl = Get_atan(-value->A.Imag, value->A.Real);

		out_sum->V.Absl += result->V.Absl ;
 8000e78:	ed53 9a06 	vldr	s19, [r3, #-24]	; 0xffffffe8
		out_sum->A.Absl += result->A.Absl ;
 8000e7c:	ed13 6a04 	vldr	s12, [r3, #-16]
		result->A.Angl = Get_atan(-value->A.Imag, value->A.Real);
 8000e80:	ed46 7a01 	vstr	s15, [r6, #-4]
		out_sum->V.Absl += result->V.Absl ;
 8000e84:	ee39 5a85 	vadd.f32	s10, s19, s10
		out_sum->A.Absl += result->A.Absl ;
 8000e88:	ee76 5a25 	vadd.f32	s11, s12, s11

		if(i >= PHASEn){
 8000e8c:	2f02      	cmp	r7, #2
		out_sum->V.Absl += result->V.Absl ;
 8000e8e:	ed03 5a06 	vstr	s10, [r3, #-24]	; 0xffffffe8
		out_sum->A.Absl += result->A.Absl ;
 8000e92:	ed43 5a04 	vstr	s11, [r3, #-16]
		if(i >= PHASEn){
 8000e96:	f200 81e5 	bhi.w	8001264 <uPMU_Process_Mode+0x530>
	if(angle_f < 0){
 8000e9a:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		angle_f += 360;
 8000ea2:	bf48      	it	mi
 8000ea4:	ed5f 7a22 	vldrmi	s15, [pc, #-136]	; 8000e20 <uPMU_Process_Mode+0xec>
	if(angle_f < 0){
 8000ea8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
		angle_f += 360;
 8000eac:	bf48      	it	mi
 8000eae:	ee3a aa27 	vaddmi.f32	s20, s20, s15
			out_sum->F.Absl += (result->V.Angl * J1);
			out_sum->F.Angl += (result->V.Angl * J2);
		}

		out_sum->V.Angl += Adjust_Angle(result->V.Angl  * DEGREE);
 8000eb2:	ed53 7a05 	vldr	s15, [r3, #-20]	; 0xffffffec
	if(angle_f < 0){
 8000eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		out_sum->V.Angl += Adjust_Angle(result->V.Angl  * DEGREE);
 8000eba:	ee37 aa8a 	vadd.f32	s20, s15, s20
		angle_f += 360;
 8000ebe:	bf48      	it	mi
 8000ec0:	ed5f 7a29 	vldrmi	s15, [pc, #-164]	; 8000e20 <uPMU_Process_Mode+0xec>
		out_sum->V.Angl += Adjust_Angle(result->V.Angl  * DEGREE);
 8000ec4:	ed03 aa05 	vstr	s20, [r3, #-20]	; 0xffffffec
		angle_f += 360;
 8000ec8:	bf48      	it	mi
 8000eca:	ee76 6aa7 	vaddmi.f32	s13, s13, s15
		out_sum->A.Angl += Adjust_Angle(result->A.Angl  * DEGREE);
 8000ece:	ed53 7a03 	vldr	s15, [r3, #-12]
	for(uint8_t i = ADC_CHANNELn; i-- ;  ++value, ++data, ++data_0, ++result, ++out_sum){
 8000ed2:	3f01      	subs	r7, #1
		out_sum->A.Angl += Adjust_Angle(result->A.Angl  * DEGREE);
 8000ed4:	ee77 6aa6 	vadd.f32	s13, s15, s13
	for(uint8_t i = ADC_CHANNELn; i-- ;  ++value, ++data, ++data_0, ++result, ++out_sum){
 8000ed8:	b2ff      	uxtb	r7, r7
 8000eda:	2fff      	cmp	r7, #255	; 0xff
		out_sum->A.Angl += Adjust_Angle(result->A.Angl  * DEGREE);
 8000edc:	ed43 6a03 	vstr	s13, [r3, #-12]
	for(uint8_t i = ADC_CHANNELn; i-- ;  ++value, ++data, ++data_0, ++result, ++out_sum){
 8000ee0:	f100 0004 	add.w	r0, r0, #4
 8000ee4:	f102 0210 	add.w	r2, r2, #16
 8000ee8:	f10e 0e04 	add.w	lr, lr, #4
 8000eec:	f106 0610 	add.w	r6, r6, #16
 8000ef0:	f103 0318 	add.w	r3, r3, #24
 8000ef4:	f000 81ac 	beq.w	8001250 <uPMU_Process_Mode+0x51c>
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000ef8:	8804      	ldrh	r4, [r0, #0]
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000efa:	8841      	ldrh	r1, [r0, #2]
		value->V.Imag += ((data->V - data_0->V) * sin_f);
 8000efc:	f8b0 9000 	ldrh.w	r9, [r0]
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000f00:	f93e 8c04 	ldrsh.w	r8, [lr, #-4]
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000f04:	8845      	ldrh	r5, [r0, #2]
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000f06:	f93e cc02 	ldrsh.w	ip, [lr, #-2]
		value->V.Imag += ((data->V - data_0->V) * sin_f);
 8000f0a:	ed52 9a03 	vldr	s19, [r2, #-12]
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000f0e:	ed12 6a01 	vldr	s12, [r2, #-4]
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000f12:	ed12 aa04 	vldr	s20, [r2, #-16]
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000f16:	ed52 6a02 	vldr	s13, [r2, #-8]
		value->V.Imag += ((data->V - data_0->V) * sin_f);
 8000f1a:	fa0f f989 	sxth.w	r9, r9
 8000f1e:	eba9 0908 	sub.w	r9, r9, r8
 8000f22:	ee07 9a90 	vmov	s15, r9
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000f26:	b22d      	sxth	r5, r5
 8000f28:	eba5 050c 	sub.w	r5, r5, ip
		value->V.Imag += ((data->V - data_0->V) * sin_f);
 8000f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000f30:	ee07 5a90 	vmov	s15, r5
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000f34:	b224      	sxth	r4, r4
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000f3a:	b209      	sxth	r1, r1
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000f3c:	eba4 0408 	sub.w	r4, r4, r8
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000f40:	eba1 010c 	sub.w	r1, r1, ip
		value->V.Imag += ((data->V - data_0->V) * sin_f);
 8000f44:	eee4 9a07 	vfma.f32	s19, s8, s14
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000f48:	eea4 6a27 	vfma.f32	s12, s8, s15
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000f4c:	ee07 4a10 	vmov	s14, r4
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000f50:	ee07 1a90 	vmov	s15, r1
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000f54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000f5c:	eea4 aa87 	vfma.f32	s20, s9, s14
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000f60:	eee4 6aa7 	vfma.f32	s13, s9, s15
		result->V.Absl = (value->V.Real * value->V.Real + value->V.Imag * value->V.Imag) * FACTOR;
 8000f64:	ee29 5aa9 	vmul.f32	s10, s19, s19
		result->A.Absl = (value->A.Real * value->A.Real + value->A.Imag * value->A.Imag) * FACTOR;
 8000f68:	ee66 5a06 	vmul.f32	s11, s12, s12
		result->V.Absl = (value->V.Real * value->V.Real + value->V.Imag * value->V.Imag) * FACTOR;
 8000f6c:	eeaa 5a0a 	vfma.f32	s10, s20, s20
		result->A.Absl = (value->A.Real * value->A.Real + value->A.Imag * value->A.Imag) * FACTOR;
 8000f70:	eee6 5aa6 	vfma.f32	s11, s13, s13
		result->V.Absl = (value->V.Real * value->V.Real + value->V.Imag * value->V.Imag) * FACTOR;
 8000f74:	ee25 5a23 	vmul.f32	s10, s10, s7
		result->A.Absl = (value->A.Real * value->A.Real + value->A.Imag * value->A.Imag) * FACTOR;
 8000f78:	ee65 5aa3 	vmul.f32	s11, s11, s7
	if (x == 0){
 8000f7c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8000f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		value->V.Imag += ((data->V - data_0->V) * sin_f);
 8000f84:	ed42 9a03 	vstr	s19, [r2, #-12]
		value->V.Real += ((data->V - data_0->V) * cos_f);
 8000f88:	ed02 aa04 	vstr	s20, [r2, #-16]
		result->V.Absl = (value->V.Real * value->V.Real + value->V.Imag * value->V.Imag) * FACTOR;
 8000f8c:	ed06 5a04 	vstr	s10, [r6, #-16]
		value->A.Imag += ((data->A - data_0->A) * sin_f);
 8000f90:	ed02 6a01 	vstr	s12, [r2, #-4]
		result->A.Absl = (value->A.Real * value->A.Real + value->A.Imag * value->A.Imag) * FACTOR;
 8000f94:	ed46 5a02 	vstr	s11, [r6, #-8]
		value->A.Real += ((data->A - data_0->A) * cos_f);
 8000f98:	ed42 6a02 	vstr	s13, [r2, #-8]
	if (x == 0){
 8000f9c:	f43f af50 	beq.w	8000e40 <uPMU_Process_Mode+0x10c>
		result->V.Angl = Get_atan(-value->V.Imag, value->V.Real);
 8000fa0:	eeb1 7a69 	vneg.f32	s14, s19
		float taylor = y / x;
 8000fa4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
		if(taylor > 1){
 8000fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000fac:	eef0 7ae7 	vabs.f32	s15, s15
 8000fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	f340 8151 	ble.w	800125e <uPMU_Process_Mode+0x52a>
			taylor = 1 / taylor;
 8000fbc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000fc0:	2403      	movs	r4, #3
			flag = 1;
 8000fc2:	2101      	movs	r1, #1
		if(taylor > 0.5){
 8000fc4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd0:	dd0a      	ble.n	8000fe8 <uPMU_Process_Mode+0x2b4>
			taylor = (TAN_1 - taylor) / (1 + TAN_1 * taylor);
 8000fd2:	ed1f 7a6c 	vldr	s14, [pc, #-432]	; 8000e24 <uPMU_Process_Mode+0xf0>
 8000fd6:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8000fda:	eee7 aa87 	vfma.f32	s21, s15, s14
			flag = flag + 2;
 8000fde:	4621      	mov	r1, r4
			taylor = (TAN_1 - taylor) / (1 + TAN_1 * taylor);
 8000fe0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fe4:	eec7 7a2a 	vdiv.f32	s15, s14, s21
		if(flag >= 2){
 8000fe8:	2901      	cmp	r1, #1
		float step = -taylor * taylor;
 8000fea:	ee67 aae7 	vnmul.f32	s21, s15, s15
			temp  = temp * step * TAN_F[i];
 8000fee:	ee27 ca88 	vmul.f32	s24, s15, s16
 8000ff2:	ee2a da80 	vmul.f32	s26, s21, s0
 8000ff6:	ee2c ca2a 	vmul.f32	s24, s24, s21
 8000ffa:	ee6a caa0 	vmul.f32	s25, s21, s1
 8000ffe:	ee2d da0c 	vmul.f32	s26, s26, s24
			angle = angle + temp;
 8001002:	ee37 7a8c 	vadd.f32	s14, s15, s24
			temp  = temp * step * TAN_F[i];
 8001006:	ee6c ca8d 	vmul.f32	s25, s25, s26
 800100a:	ee2a ca81 	vmul.f32	s24, s21, s2
			angle = angle + temp;
 800100e:	ee37 7a0d 	vadd.f32	s14, s14, s26
			temp  = temp * step * TAN_F[i];
 8001012:	ee2c ca2c 	vmul.f32	s24, s24, s25
 8001016:	ee2a daa1 	vmul.f32	s26, s21, s3
			angle = angle + temp;
 800101a:	ee37 7a2c 	vadd.f32	s14, s14, s25
			temp  = temp * step * TAN_F[i];
 800101e:	ee2d da0c 	vmul.f32	s26, s26, s24
 8001022:	ee6a ca82 	vmul.f32	s25, s21, s4
			angle = angle + temp;
 8001026:	ee37 7a0c 	vadd.f32	s14, s14, s24
			temp  = temp * step * TAN_F[i];
 800102a:	ed1f ca81 	vldr	s24, [pc, #-516]	; 8000e28 <uPMU_Process_Mode+0xf4>
 800102e:	ed1f ba81 	vldr	s22, [pc, #-516]	; 8000e2c <uPMU_Process_Mode+0xf8>
 8001032:	ed5f 7a80 	vldr	s15, [pc, #-512]	; 8000e34 <uPMU_Process_Mode+0x100>
			angle = angle + temp;
 8001036:	ed5f ba82 	vldr	s23, [pc, #-520]	; 8000e30 <uPMU_Process_Mode+0xfc>
			temp  = temp * step * TAN_F[i];
 800103a:	ee6c ca8d 	vmul.f32	s25, s25, s26
 800103e:	ee2a ca8c 	vmul.f32	s24, s21, s24
			angle = angle + temp;
 8001042:	ee37 7a0d 	vadd.f32	s14, s14, s26
			temp  = temp * step * TAN_F[i];
 8001046:	ee2c ca2c 	vmul.f32	s24, s24, s25
 800104a:	ee2a ba8b 	vmul.f32	s22, s21, s22
			angle = angle + temp;
 800104e:	ee37 7a2c 	vadd.f32	s14, s14, s25
			temp  = temp * step * TAN_F[i];
 8001052:	ee2b ba0c 	vmul.f32	s22, s22, s24
 8001056:	ee6a 7aa7 	vmul.f32	s15, s21, s15
			angle = angle + temp;
 800105a:	ee37 7a0c 	vadd.f32	s14, s14, s24
			temp  = temp * step * TAN_F[i];
 800105e:	ee67 7a8b 	vmul.f32	s15, s15, s22
			angle = angle + temp;
 8001062:	ee37 7a0b 	vadd.f32	s14, s14, s22
 8001066:	ee6a aaab 	vmul.f32	s21, s21, s23
 800106a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800106e:	eeaa 7aa7 	vfma.f32	s14, s21, s15
		if(flag >= 2){
 8001072:	d905      	bls.n	8001080 <uPMU_Process_Mode+0x34c>
			angle = 1 - angle;
 8001074:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			flag = flag - 2;
 8001078:	3902      	subs	r1, #2
			angle = 1 - angle;
 800107a:	ee37 7ac7 	vsub.f32	s14, s15, s14
			flag = flag - 2;
 800107e:	b2c9      	uxtb	r1, r1
		if(flag == 1){
 8001080:	2901      	cmp	r1, #1
			angle = PI_2 - angle;
 8001082:	bf08      	it	eq
 8001084:	ed5f 7a94 	vldreq	s15, [pc, #-592]	; 8000e38 <uPMU_Process_Mode+0x104>
	if(x < 0){
 8001088:	eeb5 aac0 	vcmpe.f32	s20, #0.0
			angle = PI_2 - angle;
 800108c:	bf08      	it	eq
 800108e:	ee37 7ac7 	vsubeq.f32	s14, s15, s14
	if(x < 0){
 8001092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001096:	f140 80cf 	bpl.w	8001238 <uPMU_Process_Mode+0x504>
		if(y < 0){
 800109a:	eef5 9ac0 	vcmpe.f32	s19, #0.0
			return (angle - PI);
 800109e:	ed5f 7a99 	vldr	s15, [pc, #-612]	; 8000e3c <uPMU_Process_Mode+0x108>
		if(y < 0){
 80010a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			return (angle - PI);
 80010a6:	bfcc      	ite	gt
 80010a8:	ee37 7a67 	vsubgt.f32	s14, s14, s15
			return (PI - angle);
 80010ac:	ee37 7ac7 	vsuble.f32	s14, s15, s14
 80010b0:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80010b4:	ee67 9a22 	vmul.f32	s19, s14, s5
 80010b8:	ee69 7a83 	vmul.f32	s15, s19, s6
	if (x == 0){
 80010bc:	eef5 6a40 	vcmp.f32	s13, #0.0
 80010c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c8:	ee17 4a90 	vmov	r4, s15
 80010cc:	fb01 f404 	mul.w	r4, r1, r4
 80010d0:	ee0a 4a10 	vmov	s20, r4
 80010d4:	eef8 7aca 	vcvt.f32.s32	s15, s20
		result->V.Angl = Get_atan(-value->V.Imag, value->V.Real);
 80010d8:	ed06 7a03 	vstr	s14, [r6, #-12]
 80010dc:	ee39 aae7 	vsub.f32	s20, s19, s15
	if (x == 0){
 80010e0:	f43f aec0 	beq.w	8000e64 <uPMU_Process_Mode+0x130>
		result->A.Angl = Get_atan(-value->A.Imag, value->A.Real);
 80010e4:	eef1 9a46 	vneg.f32	s19, s12
		float taylor = y / x;
 80010e8:	eec9 7aa6 	vdiv.f32	s15, s19, s13
		if(taylor > 1){
 80010ec:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 80010f0:	eef0 7ae7 	vabs.f32	s15, s15
 80010f4:	eef4 7ae9 	vcmpe.f32	s15, s19
 80010f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fc:	f340 80ac 	ble.w	8001258 <uPMU_Process_Mode+0x524>
			taylor = 1 / taylor;
 8001100:	eec9 7aa7 	vdiv.f32	s15, s19, s15
 8001104:	2403      	movs	r4, #3
			flag = 1;
 8001106:	2101      	movs	r1, #1
		if(taylor > 0.5){
 8001108:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800110c:	eef4 7ae9 	vcmpe.f32	s15, s19
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	dd0a      	ble.n	800112c <uPMU_Process_Mode+0x3f8>
			taylor = (TAN_1 - taylor) / (1 + TAN_1 * taylor);
 8001116:	ed5f 9abd 	vldr	s19, [pc, #-756]	; 8000e24 <uPMU_Process_Mode+0xf0>
 800111a:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 800111e:	eee7 aaa9 	vfma.f32	s21, s15, s19
			flag = flag + 2;
 8001122:	4621      	mov	r1, r4
			taylor = (TAN_1 - taylor) / (1 + TAN_1 * taylor);
 8001124:	ee79 9ae7 	vsub.f32	s19, s19, s15
 8001128:	eec9 7aaa 	vdiv.f32	s15, s19, s21
		if(flag >= 2){
 800112c:	2901      	cmp	r1, #1
		float step = -taylor * taylor;
 800112e:	ee67 9ae7 	vnmul.f32	s19, s15, s15
			temp  = temp * step * TAN_F[i];
 8001132:	ee27 ca88 	vmul.f32	s24, s15, s16
 8001136:	ee29 da80 	vmul.f32	s26, s19, s0
 800113a:	ee2c ca29 	vmul.f32	s24, s24, s19
 800113e:	ee69 caa0 	vmul.f32	s25, s19, s1
 8001142:	ee2d da0c 	vmul.f32	s26, s26, s24
			angle = angle + temp;
 8001146:	ee77 7a8c 	vadd.f32	s15, s15, s24
			temp  = temp * step * TAN_F[i];
 800114a:	ee6c ca8d 	vmul.f32	s25, s25, s26
 800114e:	ee29 ca81 	vmul.f32	s24, s19, s2
			angle = angle + temp;
 8001152:	ee77 7a8d 	vadd.f32	s15, s15, s26
			temp  = temp * step * TAN_F[i];
 8001156:	ee2c ca2c 	vmul.f32	s24, s24, s25
 800115a:	ee29 daa1 	vmul.f32	s26, s19, s3
			angle = angle + temp;
 800115e:	ee77 7aac 	vadd.f32	s15, s15, s25
			temp  = temp * step * TAN_F[i];
 8001162:	ee2d da0c 	vmul.f32	s26, s26, s24
 8001166:	ee69 ca82 	vmul.f32	s25, s19, s4
			angle = angle + temp;
 800116a:	ee77 7a8c 	vadd.f32	s15, s15, s24
			temp  = temp * step * TAN_F[i];
 800116e:	ed1f cad2 	vldr	s24, [pc, #-840]	; 8000e28 <uPMU_Process_Mode+0xf4>
 8001172:	ed1f bad2 	vldr	s22, [pc, #-840]	; 8000e2c <uPMU_Process_Mode+0xf8>
 8001176:	ed5f aad1 	vldr	s21, [pc, #-836]	; 8000e34 <uPMU_Process_Mode+0x100>
			angle = angle + temp;
 800117a:	ed5f bad3 	vldr	s23, [pc, #-844]	; 8000e30 <uPMU_Process_Mode+0xfc>
			temp  = temp * step * TAN_F[i];
 800117e:	ee6c ca8d 	vmul.f32	s25, s25, s26
 8001182:	ee29 ca8c 	vmul.f32	s24, s19, s24
			angle = angle + temp;
 8001186:	ee77 7a8d 	vadd.f32	s15, s15, s26
			temp  = temp * step * TAN_F[i];
 800118a:	ee2c ca2c 	vmul.f32	s24, s24, s25
 800118e:	ee29 ba8b 	vmul.f32	s22, s19, s22
			angle = angle + temp;
 8001192:	ee77 7aac 	vadd.f32	s15, s15, s25
			temp  = temp * step * TAN_F[i];
 8001196:	ee2b ba0c 	vmul.f32	s22, s22, s24
 800119a:	ee69 aaaa 	vmul.f32	s21, s19, s21
			angle = angle + temp;
 800119e:	ee77 7a8c 	vadd.f32	s15, s15, s24
			temp  = temp * step * TAN_F[i];
 80011a2:	ee6a aa8b 	vmul.f32	s21, s21, s22
			angle = angle + temp;
 80011a6:	ee77 7a8b 	vadd.f32	s15, s15, s22
 80011aa:	ee69 9aab 	vmul.f32	s19, s19, s23
 80011ae:	ee77 7aaa 	vadd.f32	s15, s15, s21
 80011b2:	eee9 7aaa 	vfma.f32	s15, s19, s21
		if(flag >= 2){
 80011b6:	d905      	bls.n	80011c4 <uPMU_Process_Mode+0x490>
			angle = 1 - angle;
 80011b8:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
			flag = flag - 2;
 80011bc:	3902      	subs	r1, #2
			angle = 1 - angle;
 80011be:	ee79 7ae7 	vsub.f32	s15, s19, s15
			flag = flag - 2;
 80011c2:	b2c9      	uxtb	r1, r1
		if(flag == 1){
 80011c4:	2901      	cmp	r1, #1
			angle = PI_2 - angle;
 80011c6:	bf08      	it	eq
 80011c8:	ed5f 9ae5 	vldreq	s19, [pc, #-916]	; 8000e38 <uPMU_Process_Mode+0x104>
	if(x < 0){
 80011cc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
			angle = PI_2 - angle;
 80011d0:	bf08      	it	eq
 80011d2:	ee79 7ae7 	vsubeq.f32	s15, s19, s15
	if(x < 0){
 80011d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011da:	d51f      	bpl.n	800121c <uPMU_Process_Mode+0x4e8>
		if(y < 0){
 80011dc:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
			return (angle - PI);
 80011e0:	ed5f 6aea 	vldr	s13, [pc, #-936]	; 8000e3c <uPMU_Process_Mode+0x108>
		if(y < 0){
 80011e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			return (angle - PI);
 80011e8:	bfcc      	ite	gt
 80011ea:	ee77 7ae6 	vsubgt.f32	s15, s15, s13
			return (PI - angle);
 80011ee:	ee76 7ae7 	vsuble.f32	s15, s13, s15
 80011f2:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80011f6:	ee27 6aa2 	vmul.f32	s12, s15, s5
 80011fa:	ee66 6a03 	vmul.f32	s13, s12, s6
 80011fe:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8001202:	ee16 4a90 	vmov	r4, s13
 8001206:	fb01 f404 	mul.w	r4, r1, r4
 800120a:	ee06 4a90 	vmov	s13, r4
 800120e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001212:	ee76 6a66 	vsub.f32	s13, s12, s13
 8001216:	e62f      	b.n	8000e78 <uPMU_Process_Mode+0x144>
		angle = PI_2 * (y != 0);
 8001218:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001280 <uPMU_Process_Mode+0x54c>
	}else if(y < 0){
 800121c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		return (-angle);
 8001224:	bfc8      	it	gt
 8001226:	eef1 7a67 	vneggt.f32	s15, s15
 800122a:	ee27 6aa2 	vmul.f32	s12, s15, s5
 800122e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001232:	e7e2      	b.n	80011fa <uPMU_Process_Mode+0x4c6>
		angle = PI_2 * (y != 0);
 8001234:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001280 <uPMU_Process_Mode+0x54c>
	}else if(y < 0){
 8001238:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		return (-angle);
 8001240:	bfc8      	it	gt
 8001242:	eeb1 7a47 	vneggt.f32	s14, s14
 8001246:	ee67 9a22 	vmul.f32	s19, s14, s5
 800124a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800124e:	e733      	b.n	80010b8 <uPMU_Process_Mode+0x384>

	}

	//time -= SysTick->VAL;
}
 8001250:	ecbd 8b0c 	vpop	{d8-d13}
 8001254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(taylor > 1){
 8001258:	2402      	movs	r4, #2
		uint8_t flag = 0;
 800125a:	2100      	movs	r1, #0
 800125c:	e754      	b.n	8001108 <uPMU_Process_Mode+0x3d4>
		if(taylor > 1){
 800125e:	2402      	movs	r4, #2
		uint8_t flag = 0;
 8001260:	2100      	movs	r1, #0
 8001262:	e6af      	b.n	8000fc4 <uPMU_Process_Mode+0x290>
			out_sum->F.Absl += (result->V.Angl * J1);
 8001264:	ed13 6a02 	vldr	s12, [r3, #-8]
			out_sum->F.Angl += (result->V.Angl * J2);
 8001268:	ed53 7a01 	vldr	s15, [r3, #-4]
			out_sum->F.Absl += (result->V.Angl * J1);
 800126c:	eea9 6a07 	vfma.f32	s12, s18, s14
			out_sum->F.Angl += (result->V.Angl * J2);
 8001270:	eee8 7a87 	vfma.f32	s15, s17, s14
			out_sum->F.Absl += (result->V.Angl * J1);
 8001274:	ed03 6a02 	vstr	s12, [r3, #-8]
			out_sum->F.Angl += (result->V.Angl * J2);
 8001278:	ed43 7a01 	vstr	s15, [r3, #-4]
 800127c:	e60d      	b.n	8000e9a <uPMU_Process_Mode+0x166>
 800127e:	bf00      	nop
 8001280:	3fc90fdb 	.word	0x3fc90fdb

08001284 <uPMU_Get_Result>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Frequency Estimation **/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Get Result **/
void uPMU_Get_Result(void){
 8001284:	b430      	push	{r4, r5}
	OUTPUT_Typedef* out_sum = SUM_PHASOR;
	OUTPUT_Typedef* out     = OUT_PHASOR;

	for(uint8_t i = ADC_CHANNELn; i-- ; ++out, ++out_sum){

		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001286:	4b79      	ldr	r3, [pc, #484]	; (800146c <uPMU_Get_Result+0x1e8>)
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;

		if(i >= PHASEn){
			out->F.Angl  = out_sum->F.Angl / PI;
			out->F.Absl  = FREQUENCY + out_sum->F.Absl / PI2 + out->F.Angl * Freq_t;
 8001288:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001470 <uPMU_Get_Result+0x1ec>
 800128c:	ed93 0a04 	vldr	s0, [r3, #16]
 8001290:	eddf 1a78 	vldr	s3, [pc, #480]	; 8001474 <uPMU_Get_Result+0x1f0>
 8001294:	edd3 0a0a 	vldr	s1, [r3, #40]	; 0x28
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001298:	eddf 7a77 	vldr	s15, [pc, #476]	; 8001478 <uPMU_Get_Result+0x1f4>
 800129c:	ed93 1a00 	vldr	s2, [r3]
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80012a0:	edd3 2a02 	vldr	s5, [r3, #8]
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80012a4:	ed93 3a01 	vldr	s6, [r3, #4]
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80012a8:	edd3 3a03 	vldr	s7, [r3, #12]
			out->F.Angl  = out_sum->F.Angl / PI;
 80012ac:	ed9f 2a73 	vldr	s4, [pc, #460]	; 800147c <uPMU_Get_Result+0x1f8>
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80012b0:	edd3 5a07 	vldr	s11, [r3, #28]
			out->F.Angl  = out_sum->F.Angl / PI;
 80012b4:	ed93 4a05 	vldr	s8, [r3, #20]
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80012b8:	edd3 4a06 	vldr	s9, [r3, #24]
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80012bc:	ed93 5a08 	vldr	s10, [r3, #32]
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80012c0:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
			out->F.Angl  = out_sum->F.Angl / PI;
 80012c4:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80012c8:	496d      	ldr	r1, [pc, #436]	; (8001480 <uPMU_Get_Result+0x1fc>)
void uPMU_Get_Result(void){
 80012ca:	ed2d 8b02 	vpush	{d8}
			out->F.Absl  = FREQUENCY + out_sum->F.Absl / PI2 + out->F.Angl * Freq_t;
 80012ce:	eeb0 8a47 	vmov.f32	s16, s14
 80012d2:	eea0 8a21 	vfma.f32	s16, s0, s3
//		out_sum->V.Angl = 0;
//		out_sum->A.Angl = 0;
//		out_sum->F.Angl = 0;

		//*(out_sum) = (OUTPUT_Typedef){(Result_Typedef){0.0, 0.0}, (Result_Typedef){0.0, 0.0}, (Result_Typedef){0.0, 0.0}};
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0}};
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80012da:	ee21 1a27 	vmul.f32	s2, s2, s15
			out->F.Absl  = FREQUENCY + out_sum->F.Absl / PI2 + out->F.Angl * Freq_t;
 80012de:	eeb0 0a48 	vmov.f32	s0, s16
 80012e2:	eeb0 8a47 	vmov.f32	s16, s14
 80012e6:	eea0 8aa1 	vfma.f32	s16, s1, s3
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0}};
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80012ee:	ee62 2aa7 	vmul.f32	s5, s5, s15
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80012f2:	ee23 3a27 	vmul.f32	s6, s6, s15
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80012f6:	ee63 3aa7 	vmul.f32	s7, s7, s15
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80012fa:	ee64 4aa7 	vmul.f32	s9, s9, s15
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80012fe:	ee25 5a27 	vmul.f32	s10, s10, s15
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001302:	ee65 5aa7 	vmul.f32	s11, s11, s15
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001306:	ee26 6a27 	vmul.f32	s12, s12, s15
			out->F.Angl  = out_sum->F.Angl / PI;
 800130a:	ee24 4a02 	vmul.f32	s8, s8, s4
 800130e:	ee66 6a82 	vmul.f32	s13, s13, s4
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001312:	ed81 1a00 	vstr	s2, [r1]
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 8001316:	edc1 2a02 	vstr	s5, [r1, #8]
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 800131a:	ed81 3a01 	vstr	s6, [r1, #4]
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 800131e:	edc1 3a03 	vstr	s7, [r1, #12]
			out->F.Angl  = out_sum->F.Angl / PI;
 8001322:	ed81 4a05 	vstr	s8, [r1, #20]
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001326:	edc1 4a06 	vstr	s9, [r1, #24]
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800132a:	ed81 5a08 	vstr	s10, [r1, #32]
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 800132e:	edc1 5a07 	vstr	s11, [r1, #28]
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001332:	ed81 6a09 	vstr	s12, [r1, #36]	; 0x24
			out->F.Angl  = out_sum->F.Angl / PI;
 8001336:	edc1 6a0b 	vstr	s13, [r1, #44]	; 0x2c
			out->F.Absl  = FREQUENCY + out_sum->F.Absl / PI2 + out->F.Angl * Freq_t;
 800133a:	ed81 8a0a 	vstr	s16, [r1, #40]	; 0x28
 800133e:	ed81 0a04 	vstr	s0, [r1, #16]
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0}};
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	615a      	str	r2, [r3, #20]
			out->F.Absl  = FREQUENCY + out_sum->F.Absl / PI2 + out->F.Angl * Freq_t;
 800134a:	ed93 1a10 	vldr	s2, [r3, #64]	; 0x40
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 800134e:	ed93 3a0c 	vldr	s6, [r3, #48]	; 0x30
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 8001352:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001356:	ed93 4a0d 	vldr	s8, [r3, #52]	; 0x34
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 800135a:	edd3 4a0f 	vldr	s9, [r3, #60]	; 0x3c
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 800135e:	ed93 5a12 	vldr	s10, [r3, #72]	; 0x48
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 8001362:	edd3 5a14 	vldr	s11, [r3, #80]	; 0x50
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001366:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
			out->F.Angl  = out_sum->F.Angl / PI;
 800136a:	edd3 2a11 	vldr	s5, [r3, #68]	; 0x44
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 800136e:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0}};
 8001372:	619a      	str	r2, [r3, #24]
			out->F.Absl  = FREQUENCY + out_sum->F.Absl / PI2 + out->F.Angl * Freq_t;
 8001374:	eea1 7a21 	vfma.f32	s14, s2, s3
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0}};
 8001378:	621a      	str	r2, [r3, #32]
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800137c:	ee63 3aa7 	vmul.f32	s7, s7, s15
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001380:	ee24 4a27 	vmul.f32	s8, s8, s15
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001384:	ee64 4aa7 	vmul.f32	s9, s9, s15
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001388:	ee25 5a27 	vmul.f32	s10, s10, s15
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800138c:	ee65 5aa7 	vmul.f32	s11, s11, s15
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001390:	ee26 6a27 	vmul.f32	s12, s12, s15
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001394:	ee66 6aa7 	vmul.f32	s13, s13, s15
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001398:	ee23 3a27 	vmul.f32	s6, s6, s15
			out->F.Angl  = out_sum->F.Angl / PI;
 800139c:	ee62 2a82 	vmul.f32	s5, s5, s4
			out->F.Absl  = FREQUENCY + out_sum->F.Absl / PI2 + out->F.Angl * Freq_t;
 80013a0:	ed81 7a10 	vstr	s14, [r1, #64]	; 0x40
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80013a4:	edc1 3a0e 	vstr	s7, [r1, #56]	; 0x38
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80013a8:	ed81 4a0d 	vstr	s8, [r1, #52]	; 0x34
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80013ac:	edc1 4a0f 	vstr	s9, [r1, #60]	; 0x3c
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80013b0:	ed81 5a12 	vstr	s10, [r1, #72]	; 0x48
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80013b4:	edc1 5a14 	vstr	s11, [r1, #80]	; 0x50
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80013b8:	ed81 6a13 	vstr	s12, [r1, #76]	; 0x4c
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80013bc:	edc1 6a15 	vstr	s13, [r1, #84]	; 0x54
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0}};
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
			out->F.Angl  = out_sum->F.Angl / PI;
 80013c4:	edc1 2a11 	vstr	s5, [r1, #68]	; 0x44
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80013c8:	ed81 3a0c 	vstr	s6, [r1, #48]	; 0x30
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0}};
 80013cc:	631a      	str	r2, [r3, #48]	; 0x30
 80013ce:	649a      	str	r2, [r3, #72]	; 0x48
 80013d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80013d2:	651a      	str	r2, [r3, #80]	; 0x50
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
 80013d6:	639a      	str	r2, [r3, #56]	; 0x38
 80013d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80013da:	641a      	str	r2, [r3, #64]	; 0x40
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80013dc:	edd3 3a18 	vldr	s7, [r3, #96]	; 0x60
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80013e0:	ed93 4a1a 	vldr	s8, [r3, #104]	; 0x68
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80013e4:	edd3 4a19 	vldr	s9, [r3, #100]	; 0x64
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80013e8:	ed93 5a1b 	vldr	s10, [r3, #108]	; 0x6c
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80013ec:	edd3 5a1e 	vldr	s11, [r3, #120]	; 0x78
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 80013f0:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 80013f4:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 80013f8:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0}};
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 80013fe:	ee63 3aa7 	vmul.f32	s7, s7, s15
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 8001402:	ee24 4a27 	vmul.f32	s8, s8, s15
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001406:	ee64 4aa7 	vmul.f32	s9, s9, s15
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 800140a:	ee25 5a27 	vmul.f32	s10, s10, s15
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 800140e:	ee65 5aa7 	vmul.f32	s11, s11, s15
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 8001412:	ee26 6a27 	vmul.f32	s12, s12, s15
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001416:	ee66 6aa7 	vmul.f32	s13, s13, s15
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 800141a:	ee67 7a27 	vmul.f32	s15, s14, s15
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0}};
 800141e:	655a      	str	r2, [r3, #84]	; 0x54
 8001420:	659a      	str	r2, [r3, #88]	; 0x58
 8001422:	65da      	str	r2, [r3, #92]	; 0x5c
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001424:	edc1 3a18 	vstr	s7, [r1, #96]	; 0x60
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0}};
 8001428:	661a      	str	r2, [r3, #96]	; 0x60
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800142a:	ed81 4a1a 	vstr	s8, [r1, #104]	; 0x68
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 800142e:	edc1 4a19 	vstr	s9, [r1, #100]	; 0x64
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001432:	ed81 5a1b 	vstr	s10, [r1, #108]	; 0x6c
		out->V.Absl = out_sum->V.Absl / READ_SAMPLEn;
 8001436:	edc1 5a1e 	vstr	s11, [r1, #120]	; 0x78
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0}};
 800143a:	679a      	str	r2, [r3, #120]	; 0x78
		out->A.Absl = out_sum->A.Absl / READ_SAMPLEn;
 800143c:	ed81 6a20 	vstr	s12, [r1, #128]	; 0x80
		out->V.Angl = out_sum->V.Angl / READ_SAMPLEn;
 8001440:	edc1 6a1f 	vstr	s13, [r1, #124]	; 0x7c
		out->A.Angl = out_sum->A.Angl / READ_SAMPLEn;
 8001444:	edc1 7a21 	vstr	s15, [r1, #132]	; 0x84
		*(out_sum) = (OUTPUT_Typedef){{0.0, 0.0}, {0.0, 0.0}, {0.0, 0.0}};
 8001448:	665a      	str	r2, [r3, #100]	; 0x64
 800144a:	669a      	str	r2, [r3, #104]	; 0x68
 800144c:	66da      	str	r2, [r3, #108]	; 0x6c
 800144e:	671a      	str	r2, [r3, #112]	; 0x70
 8001450:	675a      	str	r2, [r3, #116]	; 0x74
 8001452:	67da      	str	r2, [r3, #124]	; 0x7c
 8001454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800145c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8001460:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	}
}
 8001464:	ecbd 8b02 	vpop	{d8}
 8001468:	bc30      	pop	{r4, r5}
 800146a:	4770      	bx	lr
 800146c:	20019090 	.word	0x20019090
 8001470:	42480000 	.word	0x42480000
 8001474:	3e22f983 	.word	0x3e22f983
 8001478:	3b000000 	.word	0x3b000000
 800147c:	3ea2f983 	.word	0x3ea2f983
 8001480:	2001f238 	.word	0x2001f238

08001484 <uPMU_EXTIx_Init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** EXTI Configuration function **/
void uPMU_EXTIx_Init(uint8_t port, uint16_t bit, EXTI_Trigger_TypeDef triger){

	/* Check if the bit number if available*/
	if(bit > 22)
 8001484:	2916      	cmp	r1, #22
 8001486:	d830      	bhi.n	80014ea <uPMU_EXTIx_Init+0x66>
void uPMU_EXTIx_Init(uint8_t port, uint16_t bit, EXTI_Trigger_TypeDef triger){
 8001488:	b470      	push	{r4, r5, r6}
		return;

	/* Enable SYSCFG clock */
	RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 800148a:	4d2a      	ldr	r5, [pc, #168]	; (8001534 <uPMU_EXTIx_Init+0xb0>)
 800148c:	088b      	lsrs	r3, r1, #2
 800148e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001496:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800149a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800149e:	646c      	str	r4, [r5, #68]	; 0x44

	/* Map port bit to EXTx */
	SYSCFG->EXTICR[bit >> 0x02] &= ~((uint32_t)0x0F) << (4 * (bit & 0x03));
 80014a0:	f001 0403 	and.w	r4, r1, #3
 80014a4:	689e      	ldr	r6, [r3, #8]
 80014a6:	00a4      	lsls	r4, r4, #2
 80014a8:	f06f 050f 	mvn.w	r5, #15
 80014ac:	40a5      	lsls	r5, r4
 80014ae:	4035      	ands	r5, r6
 80014b0:	609d      	str	r5, [r3, #8]
	SYSCFG->EXTICR[bit >> 0x02] |=  ((uint32_t)port) << (4 * (bit & 0x03));
 80014b2:	689d      	ldr	r5, [r3, #8]
 80014b4:	fa00 f404 	lsl.w	r4, r0, r4
 80014b8:	432c      	orrs	r4, r5

	switch(triger){
 80014ba:	2a01      	cmp	r2, #1
	SYSCFG->EXTICR[bit >> 0x02] |=  ((uint32_t)port) << (4 * (bit & 0x03));
 80014bc:	609c      	str	r4, [r3, #8]
	switch(triger){
 80014be:	d021      	beq.n	8001504 <uPMU_EXTIx_Init+0x80>
 80014c0:	d32b      	bcc.n	800151a <uPMU_EXTIx_Init+0x96>
 80014c2:	2a02      	cmp	r2, #2
 80014c4:	d012      	beq.n	80014ec <uPMU_EXTIx_Init+0x68>
 80014c6:	2201      	movs	r2, #1
 80014c8:	fa02 f101 	lsl.w	r1, r2, r1
 80014cc:	43cc      	mvns	r4, r1
		EXTI->FTSR |=  (uint32_t)(1U << bit);
		break;
	}

	/* Clear Registers */
	EXTI->IMR &= ~(uint32_t)(1U << bit);
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <uPMU_EXTIx_Init+0xb4>)
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	4020      	ands	r0, r4
 80014d4:	6018      	str	r0, [r3, #0]
	EXTI->EMR &= ~(uint32_t)(1U << bit);
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4022      	ands	r2, r4
 80014da:	605a      	str	r2, [r3, #4]

	/* Enable interrupt line */
	EXTI->IMR |=  (uint32_t)(1U << bit);
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
	/* Enable event line */
	EXTI->EMR |=  (uint32_t)(1U << bit);

}
 80014e2:	bc70      	pop	{r4, r5, r6}
	EXTI->EMR |=  (uint32_t)(1U << bit);
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4311      	orrs	r1, r2
 80014e8:	6059      	str	r1, [r3, #4]
}
 80014ea:	4770      	bx	lr
		EXTI->RTSR |=  (uint32_t)(1U << bit);
 80014ec:	4b12      	ldr	r3, [pc, #72]	; (8001538 <uPMU_EXTIx_Init+0xb4>)
 80014ee:	2001      	movs	r0, #1
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	fa00 f101 	lsl.w	r1, r0, r1
 80014f6:	430a      	orrs	r2, r1
 80014f8:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |=  (uint32_t)(1U << bit);
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	43cc      	mvns	r4, r1
		break;
 8001502:	e7e4      	b.n	80014ce <uPMU_EXTIx_Init+0x4a>
		EXTI->RTSR &= ~(uint32_t)(1U << bit);
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <uPMU_EXTIx_Init+0xb4>)
 8001506:	fa02 f101 	lsl.w	r1, r2, r1
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	43cc      	mvns	r4, r1
 800150e:	4022      	ands	r2, r4
 8001510:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |=  (uint32_t)(1U << bit);
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	430a      	orrs	r2, r1
 8001516:	60da      	str	r2, [r3, #12]
		break;
 8001518:	e7d9      	b.n	80014ce <uPMU_EXTIx_Init+0x4a>
		EXTI->FTSR &= ~(uint32_t)(1U << bit);
 800151a:	4b07      	ldr	r3, [pc, #28]	; (8001538 <uPMU_EXTIx_Init+0xb4>)
 800151c:	2201      	movs	r2, #1
 800151e:	fa02 f101 	lsl.w	r1, r2, r1
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	43cc      	mvns	r4, r1
 8001526:	4022      	ands	r2, r4
 8001528:	60da      	str	r2, [r3, #12]
		EXTI->RTSR |=  (uint32_t)(1U << bit);
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	430a      	orrs	r2, r1
 800152e:	609a      	str	r2, [r3, #8]
		break;
 8001530:	e7cd      	b.n	80014ce <uPMU_EXTIx_Init+0x4a>
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40013c00 	.word	0x40013c00

0800153c <EXTI_Line_Check>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Check if the EXCTI Line is Pending and IT **/
FlagStatus EXTI_Line_Check(uint32_t EXTI_Line) {

	if ((EXTI->PR & EXTI_Line) && (EXTI->IMR & EXTI_Line)){
 800153c:	4a05      	ldr	r2, [pc, #20]	; (8001554 <EXTI_Line_Check+0x18>)
 800153e:	6953      	ldr	r3, [r2, #20]
 8001540:	4003      	ands	r3, r0
 8001542:	d005      	beq.n	8001550 <EXTI_Line_Check+0x14>
 8001544:	6813      	ldr	r3, [r2, #0]
 8001546:	4218      	tst	r0, r3
 8001548:	bf14      	ite	ne
 800154a:	2001      	movne	r0, #1
 800154c:	2000      	moveq	r0, #0
 800154e:	4770      	bx	lr
 8001550:	4618      	mov	r0, r3
		return SET;
	}
	return RESET;
}
 8001552:	4770      	bx	lr
 8001554:	40013c00 	.word	0x40013c00

08001558 <EXTI_Clear_PendingBit>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Clear EXTI Pending Bit **/
void EXTI_Clear_PendingBit(uint32_t EXTI_Line){

	  EXTI->PR = EXTI_Line;
 8001558:	4b01      	ldr	r3, [pc, #4]	; (8001560 <EXTI_Clear_PendingBit+0x8>)
 800155a:	6158      	str	r0, [r3, #20]
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40013c00 	.word	0x40013c00

08001564 <EXTI_Set_PendingBit>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Set EXTI Pending Bit **/
void EXTI_Set_PendingBit(uint32_t EXTI_Line){

	EXTI->SWIER |= EXTI_Line;
 8001564:	4a02      	ldr	r2, [pc, #8]	; (8001570 <EXTI_Set_PendingBit+0xc>)
 8001566:	6913      	ldr	r3, [r2, #16]
 8001568:	4318      	orrs	r0, r3
 800156a:	6110      	str	r0, [r2, #16]
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40013c00 	.word	0x40013c00

08001574 <uPMU_GPIO_Init>:
#include "gpio.h"
#include "exti.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** uPM GPIO initialization  **/
void uPMU_GPIO_Init(void){
 8001574:	b570      	push	{r4, r5, r6, lr}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Data Port Configuration function **/
void Data_Port_Init(GPIO_TypeDef* GPIOx, uint32_t RCC_AHB1ENR_GPIOx){

	/* Enable AHB1ENR GPIOx clock */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOx;
 8001576:	4d76      	ldr	r5, [pc, #472]	; (8001750 <uPMU_GPIO_Init+0x1dc>)
 8001578:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	632b      	str	r3, [r5, #48]	; 0x30
	asm("NOP");		/* wait to Enable */
 8001580:	bf00      	nop

	/* GPIO Mode as Input*/
	GPIOx->MODER  = Mode_IN_ALL;
 8001582:	4b74      	ldr	r3, [pc, #464]	; (8001754 <uPMU_GPIO_Init+0x1e0>)
uint8_t GPIO_Bit_Init_Input(GPIO_TypeDef* GPIOx, uint32_t bit){

	bit *= 2;			/* wait to Enable*/

	/* GPIO Mode as Input*/
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 8001584:	4c74      	ldr	r4, [pc, #464]	; (8001758 <uPMU_GPIO_Init+0x1e4>)
	GPIOx->MODER  = Mode_IN_ALL;
 8001586:	2600      	movs	r6, #0
 8001588:	601e      	str	r6, [r3, #0]
	GPIOx->PUPDR  = PUPDR_NO_ALL;
 800158a:	60de      	str	r6, [r3, #12]
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOx;
 800158c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800158e:	f043 0310 	orr.w	r3, r3, #16
 8001592:	632b      	str	r3, [r5, #48]	; 0x30
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800159a:	6023      	str	r3, [r4, #0]
	GPIOx->MODER   |=  (Mode_IN		<<bit);
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	6023      	str	r3, [r4, #0]
	/* GPIO no Pull */
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 80015a0:	68e3      	ldr	r3, [r4, #12]
 80015a2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80015a6:	60e3      	str	r3, [r4, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 80015a8:	68e3      	ldr	r3, [r4, #12]
 80015aa:	60e3      	str	r3, [r4, #12]
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80015b2:	6023      	str	r3, [r4, #0]
	GPIOx->MODER   |=  (Mode_IN		<<bit);
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	6023      	str	r3, [r4, #0]
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 80015b8:	68e3      	ldr	r3, [r4, #12]
 80015ba:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80015be:	60e3      	str	r3, [r4, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 80015c0:	68e3      	ldr	r3, [r4, #12]
 80015c2:	60e3      	str	r3, [r4, #12]
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80015ca:	6023      	str	r3, [r4, #0]
	GPIOx->MODER   |=  (Mode_IN		<<bit);
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	6023      	str	r3, [r4, #0]
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 80015d0:	68e3      	ldr	r3, [r4, #12]
 80015d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80015d6:	60e3      	str	r3, [r4, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 80015d8:	68e3      	ldr	r3, [r4, #12]
 80015da:	60e3      	str	r3, [r4, #12]
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80015e2:	6023      	str	r3, [r4, #0]
	GPIOx->MODER   |=  (Mode_IN		<<bit);
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	6023      	str	r3, [r4, #0]
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 80015e8:	68e3      	ldr	r3, [r4, #12]
 80015ea:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80015ee:	60e3      	str	r3, [r4, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 80015f0:	68e3      	ldr	r3, [r4, #12]
 80015f2:	60e3      	str	r3, [r4, #12]
	uPMU_EXTIx_Init(EXTI_CONT_Port_Source, CON_ABUSY, EXTI_Falling);
 80015f4:	2201      	movs	r2, #1
 80015f6:	210b      	movs	r1, #11
 80015f8:	2004      	movs	r0, #4
 80015fa:	f7ff ff43 	bl	8001484 <uPMU_EXTIx_Init>
	uPMU_EXTIx_Init(EXTI_CONT_Port_Source, CON_BBUSY, EXTI_Falling);
 80015fe:	2201      	movs	r2, #1
 8001600:	210c      	movs	r1, #12
 8001602:	2004      	movs	r0, #4
 8001604:	f7ff ff3e 	bl	8001484 <uPMU_EXTIx_Init>
uint8_t GPIO_Bit_Init_Output(GPIO_TypeDef* GPIOx, uint32_t bit){

	bit *= 2;			/* wait to Enable*/

	/* GPIO Mode as Output*/
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 8001608:	6823      	ldr	r3, [r4, #0]
	GPIOx->MODER   |=  (Mode_OUT	<<bit);

	/* GPIO Output Type as Push Pull */
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 800160a:	4a54      	ldr	r2, [pc, #336]	; (800175c <uPMU_GPIO_Init+0x1e8>)
 800160c:	4954      	ldr	r1, [pc, #336]	; (8001760 <uPMU_GPIO_Init+0x1ec>)
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 800160e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001612:	6023      	str	r3, [r4, #0]
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 8001614:	6823      	ldr	r3, [r4, #0]
 8001616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800161a:	6023      	str	r3, [r4, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 800161c:	6016      	str	r6, [r2, #0]

	/* GPIO Output Very Speed = 50MHz*/
	GPIOx->OSPEEDR |= (OSPEEDR_VERY	<<bit);
 800161e:	68a3      	ldr	r3, [r4, #8]
 8001620:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001624:	60a3      	str	r3, [r4, #8]
	/* Check APB2ENR clock is Enable */
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 8001626:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001628:	0458      	lsls	r0, r3, #17
 800162a:	d40b      	bmi.n	8001644 <uPMU_GPIO_Init+0xd0>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 800162c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 800162e:	4a4d      	ldr	r2, [pc, #308]	; (8001764 <uPMU_GPIO_Init+0x1f0>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 8001630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001634:	646b      	str	r3, [r5, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001636:	6a13      	ldr	r3, [r2, #32]
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 800163e:	6a13      	ldr	r3, [r2, #32]
 8001640:	05db      	lsls	r3, r3, #23
 8001642:	d5fc      	bpl.n	800163e <uPMU_GPIO_Init+0xca>
	}

	/* GPIO no Pull */
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 8001644:	4b44      	ldr	r3, [pc, #272]	; (8001758 <uPMU_GPIO_Init+0x1e4>)
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 8001646:	4842      	ldr	r0, [pc, #264]	; (8001750 <uPMU_GPIO_Init+0x1dc>)
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800164e:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	60da      	str	r2, [r3, #12]
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800165a:	601a      	str	r2, [r3, #0]
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 800165c:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 800165e:	310a      	adds	r1, #10
 8001660:	0089      	lsls	r1, r1, #2
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 8001662:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 8001666:	2400      	movs	r4, #0
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 8001668:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 800166a:	600c      	str	r4, [r1, #0]
	GPIOx->OSPEEDR |= (OSPEEDR_VERY	<<bit);
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	f442 1240 	orr.w	r2, r2, #3145728	; 0x300000
 8001672:	609a      	str	r2, [r3, #8]
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 8001674:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001676:	045a      	lsls	r2, r3, #17
 8001678:	d40b      	bmi.n	8001692 <uPMU_GPIO_Init+0x11e>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 800167a:	6c43      	ldr	r3, [r0, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 800167c:	4a39      	ldr	r2, [pc, #228]	; (8001764 <uPMU_GPIO_Init+0x1f0>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 800167e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001682:	6443      	str	r3, [r0, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001684:	6a13      	ldr	r3, [r2, #32]
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 800168c:	6a13      	ldr	r3, [r2, #32]
 800168e:	05dd      	lsls	r5, r3, #23
 8001690:	d5fc      	bpl.n	800168c <uPMU_GPIO_Init+0x118>
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <uPMU_GPIO_Init+0x1e4>)
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 8001694:	482e      	ldr	r0, [pc, #184]	; (8001750 <uPMU_GPIO_Init+0x1dc>)
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800169c:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	60da      	str	r2, [r3, #12]
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80016a8:	601a      	str	r2, [r3, #0]
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 80016aa:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 80016ac:	2400      	movs	r4, #0
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 80016ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016b2:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 80016b4:	614c      	str	r4, [r1, #20]
	GPIOx->OSPEEDR |= (OSPEEDR_VERY	<<bit);
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80016bc:	609a      	str	r2, [r3, #8]
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 80016be:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80016c0:	045e      	lsls	r6, r3, #17
 80016c2:	d40b      	bmi.n	80016dc <uPMU_GPIO_Init+0x168>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 80016c4:	6c43      	ldr	r3, [r0, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 80016c6:	4a27      	ldr	r2, [pc, #156]	; (8001764 <uPMU_GPIO_Init+0x1f0>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6443      	str	r3, [r0, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 80016ce:	6a13      	ldr	r3, [r2, #32]
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 80016d6:	6a13      	ldr	r3, [r2, #32]
 80016d8:	05d8      	lsls	r0, r3, #23
 80016da:	d5fc      	bpl.n	80016d6 <uPMU_GPIO_Init+0x162>
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <uPMU_GPIO_Init+0x1e4>)
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 80016de:	481c      	ldr	r0, [pc, #112]	; (8001750 <uPMU_GPIO_Init+0x1dc>)
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80016e6:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	60da      	str	r2, [r3, #12]
	GPIOx->MODER   &= ~(Mode_AN		<<bit);
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80016f2:	601a      	str	r2, [r3, #0]
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 80016f4:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 80016f6:	2400      	movs	r4, #0
	GPIOx->MODER   |=  (Mode_OUT	<<bit);
 80016f8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80016fc:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&GPIOx->OTYPER)), (bit/2))) = OTYPER_PP;
 80016fe:	f841 4c04 	str.w	r4, [r1, #-4]
	GPIOx->OSPEEDR |= (OSPEEDR_VERY	<<bit);
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8001708:	609a      	str	r2, [r3, #8]
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 800170a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800170c:	045c      	lsls	r4, r3, #17
 800170e:	d40b      	bmi.n	8001728 <uPMU_GPIO_Init+0x1b4>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 8001710:	6c43      	ldr	r3, [r0, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001712:	4a14      	ldr	r2, [pc, #80]	; (8001764 <uPMU_GPIO_Init+0x1f0>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6443      	str	r3, [r0, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 800171a:	6a13      	ldr	r3, [r2, #32]
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 8001722:	6a13      	ldr	r3, [r2, #32]
 8001724:	05db      	lsls	r3, r3, #23
 8001726:	d5fc      	bpl.n	8001722 <uPMU_GPIO_Init+0x1ae>
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <uPMU_GPIO_Init+0x1e4>)
	ODR_CON_RST_BITBAND = SET;
 800172a:	490f      	ldr	r1, [pc, #60]	; (8001768 <uPMU_GPIO_Init+0x1f4>)
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 800172c:	68da      	ldr	r2, [r3, #12]
	ODR_CON_CV_BITBAND = SET;
 800172e:	4d0f      	ldr	r5, [pc, #60]	; (800176c <uPMU_GPIO_Init+0x1f8>)
	ODR_CON_CS_BITBAND = SET;
 8001730:	4c0f      	ldr	r4, [pc, #60]	; (8001770 <uPMU_GPIO_Init+0x1fc>)
	ODR_CON_SE_BITBAND = SET;
 8001732:	4810      	ldr	r0, [pc, #64]	; (8001774 <uPMU_GPIO_Init+0x200>)
	GPIOx->PUPDR   &= ~(PUPDR_RST	<<bit);
 8001734:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001738:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR   |=  (PUPDR_NO	<<bit);
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	60da      	str	r2, [r3, #12]
	ODR_CON_CV_BITBAND = SET;
 800173e:	2301      	movs	r3, #1
	ODR_CON_RST_BITBAND = RESET;
 8001740:	2200      	movs	r2, #0
	ODR_CON_CV_BITBAND = SET;
 8001742:	602b      	str	r3, [r5, #0]
	ODR_CON_RST_BITBAND = SET;
 8001744:	600b      	str	r3, [r1, #0]
	ODR_CON_CS_BITBAND = SET;
 8001746:	6023      	str	r3, [r4, #0]
	ODR_CON_SE_BITBAND = SET;
 8001748:	6003      	str	r3, [r0, #0]
	ODR_CON_RST_BITBAND = RESET;
 800174a:	600a      	str	r2, [r1, #0]
}
 800174c:	bd70      	pop	{r4, r5, r6, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40020800 	.word	0x40020800
 8001758:	40021000 	.word	0x40021000
 800175c:	424200a0 	.word	0x424200a0
 8001760:	10908020 	.word	0x10908020
 8001764:	40013800 	.word	0x40013800
 8001768:	424202bc 	.word	0x424202bc
 800176c:	424202a4 	.word	0x424202a4
 8001770:	424202a0 	.word	0x424202a0
 8001774:	424202a8 	.word	0x424202a8

08001778 <OnBoard_Init>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** LED initialization function **/
void GPIO_Init_LED(Led_TypeDef led){

	/* Enable AHB1ENR clock */
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 8001778:	4967      	ldr	r1, [pc, #412]	; (8001918 <OnBoard_Init+0x1a0>)
	led *= 2;		/* wait to Enable */

	/* Configure the GPIO_LED pin */
	/* GPIO Mode as Output*/
	LED_GPIO_PORT->MODER   &= ~(Mode_AN		<<led);
 800177a:	4b68      	ldr	r3, [pc, #416]	; (800191c <OnBoard_Init+0x1a4>)
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 800177c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);

	/* GPIO Output Type as Push Pull */
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 800177e:	4868      	ldr	r0, [pc, #416]	; (8001920 <OnBoard_Init+0x1a8>)
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 8001780:	f042 0208 	orr.w	r2, r2, #8
void OnBoard_Init(void){
 8001784:	b510      	push	{r4, lr}
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 8001786:	630a      	str	r2, [r1, #48]	; 0x30
	LED_GPIO_PORT->MODER   &= ~(Mode_AN		<<led);
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800178e:	601a      	str	r2, [r3, #0]
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 8001790:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 8001792:	2400      	movs	r4, #0
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 8001794:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001798:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 800179a:	6004      	str	r4, [r0, #0]

	/* GPIO Output Very Speed = 50MHz*/
	LED_GPIO_PORT->OSPEEDR |= (OSPEEDR_VERY	<<led);
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
 80017a2:	609a      	str	r2, [r3, #8]
	/* Check APB2ENR clock is Enable */
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 80017a4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80017a6:	045c      	lsls	r4, r3, #17
 80017a8:	d40b      	bmi.n	80017c2 <OnBoard_Init+0x4a>
		/* Enable APB2ENR clock */
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 80017aa:	6c4b      	ldr	r3, [r1, #68]	; 0x44
		/* Enable Compensation cell */
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 80017ac:	4a5d      	ldr	r2, [pc, #372]	; (8001924 <OnBoard_Init+0x1ac>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 80017ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b2:	644b      	str	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 80017b4:	6a13      	ldr	r3, [r2, #32]
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6213      	str	r3, [r2, #32]
		/* wait Compensation cell to be Ready */
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 80017bc:	6a13      	ldr	r3, [r2, #32]
 80017be:	05d9      	lsls	r1, r3, #23
 80017c0:	d5fc      	bpl.n	80017bc <OnBoard_Init+0x44>
	}

	/* GPIO no Pull */
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 80017c2:	4b56      	ldr	r3, [pc, #344]	; (800191c <OnBoard_Init+0x1a4>)
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 80017c4:	4954      	ldr	r1, [pc, #336]	; (8001918 <OnBoard_Init+0x1a0>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 80017c6:	68da      	ldr	r2, [r3, #12]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 80017c8:	4857      	ldr	r0, [pc, #348]	; (8001928 <OnBoard_Init+0x1b0>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 80017ca:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80017ce:	60da      	str	r2, [r3, #12]
	LED_GPIO_PORT->PUPDR   |=  (PUPDR_PU		<<led);
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80017d6:	60da      	str	r2, [r3, #12]
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 80017d8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80017da:	f042 0208 	orr.w	r2, r2, #8
 80017de:	630a      	str	r2, [r1, #48]	; 0x30
	LED_GPIO_PORT->MODER   &= ~(Mode_AN		<<led);
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017e6:	601a      	str	r2, [r3, #0]
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 80017e8:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 80017ea:	2400      	movs	r4, #0
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 80017ec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80017f0:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 80017f2:	6004      	str	r4, [r0, #0]
	LED_GPIO_PORT->OSPEEDR |= (OSPEEDR_VERY	<<led);
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80017fa:	609a      	str	r2, [r3, #8]
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 80017fc:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80017fe:	0458      	lsls	r0, r3, #17
 8001800:	d40b      	bmi.n	800181a <OnBoard_Init+0xa2>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 8001802:	6c4b      	ldr	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001804:	4a47      	ldr	r2, [pc, #284]	; (8001924 <OnBoard_Init+0x1ac>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 8001806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180a:	644b      	str	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 800180c:	6a13      	ldr	r3, [r2, #32]
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 8001814:	6a13      	ldr	r3, [r2, #32]
 8001816:	05dc      	lsls	r4, r3, #23
 8001818:	d5fc      	bpl.n	8001814 <OnBoard_Init+0x9c>
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 800181a:	4b40      	ldr	r3, [pc, #256]	; (800191c <OnBoard_Init+0x1a4>)
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 800181c:	493e      	ldr	r1, [pc, #248]	; (8001918 <OnBoard_Init+0x1a0>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 800181e:	68da      	ldr	r2, [r3, #12]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 8001820:	4842      	ldr	r0, [pc, #264]	; (800192c <OnBoard_Init+0x1b4>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 8001822:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001826:	60da      	str	r2, [r3, #12]
	LED_GPIO_PORT->PUPDR   |=  (PUPDR_PU		<<led);
 8001828:	68da      	ldr	r2, [r3, #12]
 800182a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800182e:	60da      	str	r2, [r3, #12]
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 8001830:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8001832:	f042 0208 	orr.w	r2, r2, #8
 8001836:	630a      	str	r2, [r1, #48]	; 0x30
	LED_GPIO_PORT->MODER   &= ~(Mode_AN		<<led);
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800183e:	601a      	str	r2, [r3, #0]
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 8001840:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 8001842:	2400      	movs	r4, #0
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 8001844:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001848:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 800184a:	6004      	str	r4, [r0, #0]
	LED_GPIO_PORT->OSPEEDR |= (OSPEEDR_VERY	<<led);
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001852:	609a      	str	r2, [r3, #8]
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 8001854:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8001856:	045b      	lsls	r3, r3, #17
 8001858:	d40b      	bmi.n	8001872 <OnBoard_Init+0xfa>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 800185a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 800185c:	4a31      	ldr	r2, [pc, #196]	; (8001924 <OnBoard_Init+0x1ac>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 800185e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001862:	644b      	str	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 8001864:	6a13      	ldr	r3, [r2, #32]
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 800186c:	6a13      	ldr	r3, [r2, #32]
 800186e:	05d9      	lsls	r1, r3, #23
 8001870:	d5fc      	bpl.n	800186c <OnBoard_Init+0xf4>
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 8001872:	4b2a      	ldr	r3, [pc, #168]	; (800191c <OnBoard_Init+0x1a4>)
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 8001874:	4928      	ldr	r1, [pc, #160]	; (8001918 <OnBoard_Init+0x1a0>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 8001876:	68da      	ldr	r2, [r3, #12]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 8001878:	482d      	ldr	r0, [pc, #180]	; (8001930 <OnBoard_Init+0x1b8>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 800187a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800187e:	60da      	str	r2, [r3, #12]
	LED_GPIO_PORT->PUPDR   |=  (PUPDR_PU		<<led);
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001886:	60da      	str	r2, [r3, #12]
	RCC->AHB1ENR   |= LED_GPIO_RCC_AHB1ENR;
 8001888:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800188a:	f042 0208 	orr.w	r2, r2, #8
 800188e:	630a      	str	r2, [r1, #48]	; 0x30
	LED_GPIO_PORT->MODER   &= ~(Mode_AN		<<led);
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8001896:	601a      	str	r2, [r3, #0]
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 8001898:	681a      	ldr	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 800189a:	2400      	movs	r4, #0
	LED_GPIO_PORT->MODER   |=  (Mode_OUT	<<led);
 800189c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018a0:	601a      	str	r2, [r3, #0]
	(PERIPH_BITBAND(((uint32_t)(&LED_GPIO_PORT->OTYPER)), (led/2))) = OTYPER_PP;
 80018a2:	6004      	str	r4, [r0, #0]
	LED_GPIO_PORT->OSPEEDR |= (OSPEEDR_VERY	<<led);
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80018aa:	609a      	str	r2, [r3, #8]
	if((RCC->APB2ENR & RCC_APB2LPENR_SYSCFGLPEN) != RCC_APB2LPENR_SYSCFGLPEN){
 80018ac:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80018ae:	0458      	lsls	r0, r3, #17
 80018b0:	d40b      	bmi.n	80018ca <OnBoard_Init+0x152>
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 80018b2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 80018b4:	4a1b      	ldr	r2, [pc, #108]	; (8001924 <OnBoard_Init+0x1ac>)
		RCC->APB2ENR   |= RCC_APB2LPENR_SYSCFGLPEN;
 80018b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ba:	644b      	str	r3, [r1, #68]	; 0x44
		SYSCFG->CMPCR  |= SYSCFG_CMPCR_CMP_PD;
 80018bc:	6a13      	ldr	r3, [r2, #32]
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6213      	str	r3, [r2, #32]
		while((SYSCFG->CMPCR & SYSCFG_CMPCR_READY) != SYSCFG_CMPCR_READY);
 80018c4:	6a13      	ldr	r3, [r2, #32]
 80018c6:	05db      	lsls	r3, r3, #23
 80018c8:	d5fc      	bpl.n	80018c4 <OnBoard_Init+0x14c>
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 80018ca:	4a14      	ldr	r2, [pc, #80]	; (800191c <OnBoard_Init+0x1a4>)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** BUTTON initialization function **/
void GPIO_Init_BUTTON(Button_TypeDef button, uint16_t IRQx){

	/* Enable BUTTON_GPIO_PORT AHB1ENR Clock */
	RCC->AHB1ENR   |= BUTTON_GPIO_RCC_AHB1ENR ;
 80018cc:	4812      	ldr	r0, [pc, #72]	; (8001918 <OnBoard_Init+0x1a0>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 80018ce:	68d1      	ldr	r1, [r2, #12]
	button *= 2;			/* wait to Enable*/

	/* GPIO Mode as Input*/
	BUTTON_GPIO_PORT->MODER   &= ~(Mode_AN		<<button);
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <OnBoard_Init+0x1bc>)
	LED_GPIO_PORT->PUPDR   &= ~(PUPDR_RST		<<led);
 80018d2:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80018d6:	60d1      	str	r1, [r2, #12]
	LED_GPIO_PORT->PUPDR   |=  (PUPDR_PU		<<led);
 80018d8:	68d1      	ldr	r1, [r2, #12]
 80018da:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80018de:	60d1      	str	r1, [r2, #12]
	RCC->AHB1ENR   |= BUTTON_GPIO_RCC_AHB1ENR ;
 80018e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	6302      	str	r2, [r0, #48]	; 0x30
	BUTTON_GPIO_PORT->MODER   &= ~(Mode_AN		<<button);
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	f022 0203 	bic.w	r2, r2, #3
 80018ee:	601a      	str	r2, [r3, #0]
	BUTTON_GPIO_PORT->MODER   |=  (Mode_IN		<<button);
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	601a      	str	r2, [r3, #0]
	/* GPIO no Pull */
	BUTTON_GPIO_PORT->PUPDR   &= ~(PUPDR_RST	<<button);
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	f022 0203 	bic.w	r2, r2, #3
 80018fa:	60da      	str	r2, [r3, #12]
	BUTTON_GPIO_PORT->PUPDR   |=  (PUPDR_NO		<<button);
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	60da      	str	r2, [r3, #12]

	/*get back button pin number*/
	button /= 2;

	/* EXTI0 Configuration */
	uPMU_EXTIx_Init(SYSCFG_EXTICR1_EXTI0_PA, button, EXTI_Rising);
 8001900:	2200      	movs	r2, #0
 8001902:	4611      	mov	r1, r2
 8001904:	4610      	mov	r0, r2
 8001906:	f7ff fdbd 	bl	8001484 <uPMU_EXTIx_Init>
	uPMU_EXTIx_Init(SYSCFG_EXTICR1_EXTI1_PA, uPMU_PROCESS, EXTI_Rising);
 800190a:	2200      	movs	r2, #0
 800190c:	4610      	mov	r0, r2
 800190e:	2101      	movs	r1, #1
}
 8001910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uPMU_EXTIx_Init(SYSCFG_EXTICR1_EXTI1_PA, uPMU_PROCESS, EXTI_Rising);
 8001914:	f7ff bdb6 	b.w	8001484 <uPMU_EXTIx_Init>
 8001918:	40023800 	.word	0x40023800
 800191c:	40020c00 	.word	0x40020c00
 8001920:	424180b4 	.word	0x424180b4
 8001924:	40013800 	.word	0x40013800
 8001928:	424180b0 	.word	0x424180b0
 800192c:	424180b8 	.word	0x424180b8
 8001930:	424180bc 	.word	0x424180bc
 8001934:	40020000 	.word	0x40020000

08001938 <GPIO_Write_LED>:
	switch(led){
 8001938:	380c      	subs	r0, #12
 800193a:	2803      	cmp	r0, #3
 800193c:	d805      	bhi.n	800194a <GPIO_Write_LED+0x12>
 800193e:	e8df f000 	tbb	[pc, r0]
 8001942:	080b      	.short	0x080b
 8001944:	0205      	.short	0x0205
		ODR_LED6_BITBAND = state;
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <GPIO_Write_LED+0x28>)
 8001948:	6019      	str	r1, [r3, #0]
 800194a:	4770      	bx	lr
		ODR_LED5_BITBAND = state;
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <GPIO_Write_LED+0x2c>)
 800194e:	6019      	str	r1, [r3, #0]
		break;
 8001950:	4770      	bx	lr
		ODR_LED3_BITBAND = state;
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <GPIO_Write_LED+0x30>)
 8001954:	6019      	str	r1, [r3, #0]
		break;
 8001956:	4770      	bx	lr
		ODR_LED4_BITBAND = state;
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <GPIO_Write_LED+0x34>)
 800195a:	6019      	str	r1, [r3, #0]
		break;
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	424182bc 	.word	0x424182bc
 8001964:	424182b8 	.word	0x424182b8
 8001968:	424182b4 	.word	0x424182b4
 800196c:	424182b0 	.word	0x424182b0

08001970 <uPMU_Set_Error_Code>:
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Set Error Code **/
void uPMU_Set_Error_Code(uint8_t code){
	Error_Code = code;
 8001970:	4b01      	ldr	r3, [pc, #4]	; (8001978 <uPMU_Set_Error_Code+0x8>)
 8001972:	7018      	strb	r0, [r3, #0]
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20019144 	.word	0x20019144

0800197c <uPMU_NVIC_Init>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4818      	ldr	r0, [pc, #96]	; (80019e0 <uPMU_NVIC_Init+0x64>)
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 800197e:	4919      	ldr	r1, [pc, #100]	; (80019e4 <uPMU_NVIC_Init+0x68>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	68c2      	ldr	r2, [r0, #12]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <uPMU_NVIC_Init+0x6c>)
/* Includes */
#include "nvic.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** NVIC IRQs initialization function **/
void uPMU_NVIC_Init(void){
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8001986:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800198a:	4022      	ands	r2, r4
  reg_value  =  (reg_value                                 |
 800198c:	4311      	orrs	r1, r2
  SCB->AIRCR =  reg_value;
 800198e:	60c1      	str	r1, [r0, #12]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001990:	2240      	movs	r2, #64	; 0x40
 8001992:	2610      	movs	r6, #16
 8001994:	2520      	movs	r5, #32
 8001996:	2430      	movs	r4, #48	; 0x30
 8001998:	21e0      	movs	r1, #224	; 0xe0
 800199a:	f04f 0e50 	mov.w	lr, #80	; 0x50
 800199e:	27f0      	movs	r7, #240	; 0xf0
 80019a0:	f883 6328 	strb.w	r6, [r3, #808]	; 0x328
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80019a4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80019a8:	f883 5338 	strb.w	r5, [r3, #824]	; 0x338
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80019ac:	f44f 7680 	mov.w	r6, #256	; 0x100
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80019b0:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80019b4:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80019b8:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80019bc:	f44f 3400 	mov.w	r4, #131072	; 0x20000
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80019c0:	f883 e326 	strb.w	lr, [r3, #806]	; 0x326
 80019c4:	f883 1306 	strb.w	r1, [r3, #774]	; 0x306
 80019c8:	f883 7307 	strb.w	r7, [r3, #775]	; 0x307
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	605e      	str	r6, [r3, #4]
 80019d0:	605d      	str	r5, [r3, #4]
 80019d2:	601c      	str	r4, [r3, #0]
 80019d4:	6018      	str	r0, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	6019      	str	r1, [r3, #0]
 80019dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00
 80019e4:	05fa0300 	.word	0x05fa0300
 80019e8:	e000e100 	.word	0xe000e100

080019ec <uPMU_Init_Process>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Initialize uPMU Process **/
void uPMU_Init_Process(void){

	LookUp_Init();
 80019ec:	f7ff b8d8 	b.w	8000ba0 <LookUp_Init>

080019f0 <uPMU_AD7606_Reading>:

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** uPMU ADC AD7606 Reading **/
void uPMU_AD7606_Reading(void) {
 80019f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	//uint32_t time = SysTick->VAL;
	GPIO_Write_LED(LED4, High);

	volatile Channel_Typedef* Read = ADC_ARRAY[Read_Buffer    ][SAMPLE];
 80019f4:	4d71      	ldr	r5, [pc, #452]	; (8001bbc <uPMU_AD7606_Reading+0x1cc>)
 80019f6:	4e72      	ldr	r6, [pc, #456]	; (8001bc0 <uPMU_AD7606_Reading+0x1d0>)


	for(uint8_t i = ADC_CHANNELn; i-- ; Read++, read++, old++){

		/* Start reading falling edge */
		ODR_CON_CS_BITBAND = Low;
 80019f8:	4f72      	ldr	r7, [pc, #456]	; (8001bc4 <uPMU_AD7606_Reading+0x1d4>)

		/* Select A_ADC */
		ODR_CON_SE_BITBAND = Low;
 80019fa:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8001bcc <uPMU_AD7606_Reading+0x1dc>
	GPIO_Write_LED(LED4, High);
 80019fe:	2101      	movs	r1, #1
 8001a00:	200c      	movs	r0, #12
 8001a02:	f7ff ff99 	bl	8001938 <GPIO_Write_LED>
	volatile Channel_Typedef* Read = ADC_ARRAY[Read_Buffer    ][SAMPLE];
 8001a06:	7833      	ldrb	r3, [r6, #0]
 8001a08:	8829      	ldrh	r1, [r5, #0]
	volatile Channel_Typedef* read = ADC_ARRAY[Read_Buffer ^ 1][SAMPLE];
 8001a0a:	7832      	ldrb	r2, [r6, #0]
 8001a0c:	882c      	ldrh	r4, [r5, #0]
	volatile Channel_Typedef* Read = ADC_ARRAY[Read_Buffer    ][SAMPLE];
 8001a0e:	486e      	ldr	r0, [pc, #440]	; (8001bc8 <uPMU_AD7606_Reading+0x1d8>)

		/* Read Port 16bit A_ADC Data */
		old ->V = read->V;
 8001a10:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8001bd0 <uPMU_AD7606_Reading+0x1e0>
		Read->V = DATA_GPIO_PORT->IDR;
 8001a14:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 8001bd4 <uPMU_AD7606_Reading+0x1e4>
	volatile Channel_Typedef* read = ADC_ARRAY[Read_Buffer ^ 1][SAMPLE];
 8001a18:	b2a4      	uxth	r4, r4
 8001a1a:	f082 0201 	eor.w	r2, r2, #1
 8001a1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001a22:	eb02 0942 	add.w	r9, r2, r2, lsl #1
 8001a26:	00e2      	lsls	r2, r4, #3
 8001a28:	eb02 3209 	add.w	r2, r2, r9, lsl #12
		ODR_CON_CS_BITBAND = Low;
 8001a2c:	2400      	movs	r4, #0
 8001a2e:	603c      	str	r4, [r7, #0]
		ODR_CON_SE_BITBAND = Low;
 8001a30:	f8c8 4000 	str.w	r4, [r8]
		old ->V = read->V;
 8001a34:	f830 9002 	ldrh.w	r9, [r0, r2]
 8001a38:	f8ac 9000 	strh.w	r9, [ip]
	volatile Channel_Typedef* Read = ADC_ARRAY[Read_Buffer    ][SAMPLE];
 8001a3c:	b289      	uxth	r1, r1
 8001a3e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001a42:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 8001a46:	00cb      	lsls	r3, r1, #3
		Read->V = DATA_GPIO_PORT->IDR;
 8001a48:	f8de 1010 	ldr.w	r1, [lr, #16]
	volatile Channel_Typedef* Read = ADC_ARRAY[Read_Buffer    ][SAMPLE];
 8001a4c:	eb03 3309 	add.w	r3, r3, r9, lsl #12
		Read->V = DATA_GPIO_PORT->IDR;
 8001a50:	b209      	sxth	r1, r1
 8001a52:	52c1      	strh	r1, [r0, r3]
	volatile Channel_Typedef* read = ADC_ARRAY[Read_Buffer ^ 1][SAMPLE];
 8001a54:	4402      	add	r2, r0

		/* Select B_ADC */
		ODR_CON_SE_BITBAND = High;
 8001a56:	2101      	movs	r1, #1
 8001a58:	f8c8 1000 	str.w	r1, [r8]

		/* Read Port 16bit B_ADC Data */
		old ->A = read->A;
 8001a5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8001a60:	f8ac 9002 	strh.w	r9, [ip, #2]
		Read->A = DATA_GPIO_PORT->IDR;
 8001a64:	f8de 9010 	ldr.w	r9, [lr, #16]
	volatile Channel_Typedef* Read = ADC_ARRAY[Read_Buffer    ][SAMPLE];
 8001a68:	4403      	add	r3, r0
		Read->A = DATA_GPIO_PORT->IDR;
 8001a6a:	fa0f f989 	sxth.w	r9, r9
 8001a6e:	f8a3 9002 	strh.w	r9, [r3, #2]

		/* End reading rising edge */
		ODR_CON_CS_BITBAND = High;
 8001a72:	6039      	str	r1, [r7, #0]
		ODR_CON_CS_BITBAND = Low;
 8001a74:	603c      	str	r4, [r7, #0]
		ODR_CON_SE_BITBAND = Low;
 8001a76:	f8c8 4000 	str.w	r4, [r8]
		old ->V = read->V;
 8001a7a:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 8001a7e:	f8ac 9004 	strh.w	r9, [ip, #4]
		Read->V = DATA_GPIO_PORT->IDR;
 8001a82:	f8de 9010 	ldr.w	r9, [lr, #16]
 8001a86:	fa0f f989 	sxth.w	r9, r9
 8001a8a:	f8a3 9004 	strh.w	r9, [r3, #4]
		ODR_CON_SE_BITBAND = High;
 8001a8e:	f8c8 1000 	str.w	r1, [r8]
		old ->A = read->A;
 8001a92:	f8b2 9006 	ldrh.w	r9, [r2, #6]
 8001a96:	f8ac 9006 	strh.w	r9, [ip, #6]
		Read->A = DATA_GPIO_PORT->IDR;
 8001a9a:	f8de 9010 	ldr.w	r9, [lr, #16]
 8001a9e:	fa0f f989 	sxth.w	r9, r9
 8001aa2:	f8a3 9006 	strh.w	r9, [r3, #6]
		ODR_CON_CS_BITBAND = High;
 8001aa6:	6039      	str	r1, [r7, #0]
		ODR_CON_CS_BITBAND = Low;
 8001aa8:	603c      	str	r4, [r7, #0]
		ODR_CON_SE_BITBAND = Low;
 8001aaa:	f8c8 4000 	str.w	r4, [r8]
		old ->V = read->V;
 8001aae:	f8b2 9008 	ldrh.w	r9, [r2, #8]
 8001ab2:	f8ac 9008 	strh.w	r9, [ip, #8]
		Read->V = DATA_GPIO_PORT->IDR;
 8001ab6:	f8de 9010 	ldr.w	r9, [lr, #16]
 8001aba:	fa0f f989 	sxth.w	r9, r9
 8001abe:	f8a3 9008 	strh.w	r9, [r3, #8]
		ODR_CON_SE_BITBAND = High;
 8001ac2:	f8c8 1000 	str.w	r1, [r8]
		old ->A = read->A;
 8001ac6:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 8001aca:	f8ac 900a 	strh.w	r9, [ip, #10]
		Read->A = DATA_GPIO_PORT->IDR;
 8001ace:	f8de 9010 	ldr.w	r9, [lr, #16]
 8001ad2:	fa0f f989 	sxth.w	r9, r9
 8001ad6:	f8a3 900a 	strh.w	r9, [r3, #10]
		ODR_CON_CS_BITBAND = High;
 8001ada:	6039      	str	r1, [r7, #0]
		ODR_CON_CS_BITBAND = Low;
 8001adc:	603c      	str	r4, [r7, #0]
		ODR_CON_SE_BITBAND = Low;
 8001ade:	f8c8 4000 	str.w	r4, [r8]
		old ->V = read->V;
 8001ae2:	f8b2 900c 	ldrh.w	r9, [r2, #12]
 8001ae6:	f8ac 900c 	strh.w	r9, [ip, #12]
		Read->V = DATA_GPIO_PORT->IDR;
 8001aea:	f8de 9010 	ldr.w	r9, [lr, #16]
 8001aee:	fa0f f989 	sxth.w	r9, r9
 8001af2:	f8a3 900c 	strh.w	r9, [r3, #12]
		ODR_CON_SE_BITBAND = High;
 8001af6:	f8c8 1000 	str.w	r1, [r8]
		old ->A = read->A;
 8001afa:	f8b2 900e 	ldrh.w	r9, [r2, #14]
 8001afe:	f8ac 900e 	strh.w	r9, [ip, #14]
		Read->A = DATA_GPIO_PORT->IDR;
 8001b02:	f8de 9010 	ldr.w	r9, [lr, #16]
 8001b06:	fa0f f989 	sxth.w	r9, r9
 8001b0a:	f8a3 900e 	strh.w	r9, [r3, #14]
		ODR_CON_CS_BITBAND = High;
 8001b0e:	6039      	str	r1, [r7, #0]
		ODR_CON_CS_BITBAND = Low;
 8001b10:	603c      	str	r4, [r7, #0]
		ODR_CON_SE_BITBAND = Low;
 8001b12:	f8c8 4000 	str.w	r4, [r8]
		old ->V = read->V;
 8001b16:	f8b2 9010 	ldrh.w	r9, [r2, #16]
 8001b1a:	f8ac 9010 	strh.w	r9, [ip, #16]
		Read->V = DATA_GPIO_PORT->IDR;
 8001b1e:	f8de 9010 	ldr.w	r9, [lr, #16]
 8001b22:	fa0f f989 	sxth.w	r9, r9
 8001b26:	f8a3 9010 	strh.w	r9, [r3, #16]
		ODR_CON_SE_BITBAND = High;
 8001b2a:	f8c8 1000 	str.w	r1, [r8]
		old ->A = read->A;
 8001b2e:	f8b2 9012 	ldrh.w	r9, [r2, #18]
 8001b32:	f8ac 9012 	strh.w	r9, [ip, #18]
		Read->A = DATA_GPIO_PORT->IDR;
 8001b36:	f8de 9010 	ldr.w	r9, [lr, #16]
 8001b3a:	fa0f f989 	sxth.w	r9, r9
 8001b3e:	f8a3 9012 	strh.w	r9, [r3, #18]
		ODR_CON_CS_BITBAND = High;
 8001b42:	6039      	str	r1, [r7, #0]
		ODR_CON_CS_BITBAND = Low;
 8001b44:	603c      	str	r4, [r7, #0]
		ODR_CON_SE_BITBAND = Low;
 8001b46:	f8c8 4000 	str.w	r4, [r8]
		old ->V = read->V;
 8001b4a:	f8b2 9014 	ldrh.w	r9, [r2, #20]
 8001b4e:	f8ac 9014 	strh.w	r9, [ip, #20]
		Read->V = DATA_GPIO_PORT->IDR;
 8001b52:	f8de 9010 	ldr.w	r9, [lr, #16]
 8001b56:	fa0f f989 	sxth.w	r9, r9
 8001b5a:	f8a3 9014 	strh.w	r9, [r3, #20]
		ODR_CON_SE_BITBAND = High;
 8001b5e:	f8c8 1000 	str.w	r1, [r8]
		old ->A = read->A;
 8001b62:	8ad2      	ldrh	r2, [r2, #22]
 8001b64:	f8ac 2016 	strh.w	r2, [ip, #22]
		Read->A = DATA_GPIO_PORT->IDR;
 8001b68:	f8de 2010 	ldr.w	r2, [lr, #16]
 8001b6c:	b212      	sxth	r2, r2
 8001b6e:	82da      	strh	r2, [r3, #22]
		ODR_CON_CS_BITBAND = High;
 8001b70:	6039      	str	r1, [r7, #0]
//			break;
//		}

	}

	uPMU_Process_Mode(ADC_ARRAY[Read_Buffer][SAMPLE], SAMPLE);
 8001b72:	7833      	ldrb	r3, [r6, #0]
 8001b74:	882a      	ldrh	r2, [r5, #0]
 8001b76:	8829      	ldrh	r1, [r5, #0]
 8001b78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001b7c:	b292      	uxth	r2, r2
 8001b7e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001b82:	031b      	lsls	r3, r3, #12
 8001b84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001b88:	4418      	add	r0, r3
 8001b8a:	b289      	uxth	r1, r1
 8001b8c:	f7ff f8d2 	bl	8000d34 <uPMU_Process_Mode>

	/* Index Increment */
	if((++SAMPLE) >= READ_SAMPLEn){
 8001b90:	882b      	ldrh	r3, [r5, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b9a:	802b      	strh	r3, [r5, #0]
 8001b9c:	d307      	bcc.n	8001bae <uPMU_AD7606_Reading+0x1be>
		SAMPLE = 0;
 8001b9e:	802c      	strh	r4, [r5, #0]
		Read_Buffer ^= 1;
 8001ba0:	7833      	ldrb	r3, [r6, #0]
		EXTI_Set_PendingBit(uPMU_PROCESS_Line);
 8001ba2:	2002      	movs	r0, #2
		Read_Buffer ^= 1;
 8001ba4:	f083 0301 	eor.w	r3, r3, #1
 8001ba8:	7033      	strb	r3, [r6, #0]
		EXTI_Set_PendingBit(uPMU_PROCESS_Line);
 8001baa:	f7ff fcdb 	bl	8001564 <EXTI_Set_PendingBit>
	}

	GPIO_Write_LED(LED4, Low);
 8001bae:	2100      	movs	r1, #0
 8001bb0:	200c      	movs	r0, #12
	//time -= SysTick->VAL;
}
 8001bb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	GPIO_Write_LED(LED4, Low);
 8001bb6:	f7ff bebf 	b.w	8001938 <GPIO_Write_LED>
 8001bba:	bf00      	nop
 8001bbc:	2001f14a 	.word	0x2001f14a
 8001bc0:	2001f148 	.word	0x2001f148
 8001bc4:	424202a0 	.word	0x424202a0
 8001bc8:	20019148 	.word	0x20019148
 8001bcc:	424202a8 	.word	0x424202a8
 8001bd0:	2001f2c8 	.word	0x2001f2c8
 8001bd4:	40020800 	.word	0x40020800

08001bd8 <uPMU_Str_Data>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** uPMU Data Process **/
void uPMU_Str_Data(void) {
 8001bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** uPMU Data Process **/
void uPMU_Str_Result(const Result_Typedef* out, char** str) {

	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8001bdc:	f8df b3d4 	ldr.w	fp, [pc, #980]	; 8001fb4 <uPMU_Str_Data+0x3dc>

	*((*str)++) = (data / 10000) % 10 + '0';
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001be0:	f8df 93d4 	ldr.w	r9, [pc, #980]	; 8001fb8 <uPMU_Str_Data+0x3e0>
 8001be4:	4dee      	ldr	r5, [pc, #952]	; (8001fa0 <uPMU_Str_Data+0x3c8>)
	*((*str)++) = '.';
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001be6:	f8df 83d4 	ldr.w	r8, [pc, #980]	; 8001fbc <uPMU_Str_Data+0x3e4>
	*((*str)++) = (data / 10000) % 10 + '0';
 8001bea:	4cee      	ldr	r4, [pc, #952]	; (8001fa4 <uPMU_Str_Data+0x3cc>)
void uPMU_Str_Data(void) {
 8001bec:	b083      	sub	sp, #12
	uPMU_Get_Result();
 8001bee:	f7ff fb49 	bl	8001284 <uPMU_Get_Result>
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8001bf2:	f8db 0000 	ldr.w	r0, [fp]
 8001bf6:	f7fe fc4b 	bl	8000490 <__aeabi_f2d>
 8001bfa:	a3e5      	add	r3, pc, #916	; (adr r3, 8001f90 <uPMU_Str_Data+0x3b8>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fae8 	bl	80001d4 <__adddf3>
 8001c04:	2200      	movs	r2, #0
 8001c06:	4be8      	ldr	r3, [pc, #928]	; (8001fa8 <uPMU_Str_Data+0x3d0>)
 8001c08:	f7fe fc96 	bl	8000538 <__aeabi_dmul>
 8001c0c:	f7fe ff56 	bl	8000abc <__aeabi_d2uiz>
 8001c10:	b280      	uxth	r0, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001c12:	fba9 2100 	umull	r2, r1, r9, r0
 8001c16:	0989      	lsrs	r1, r1, #6
 8001c18:	fba5 7c01 	umull	r7, ip, r5, r1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001c1c:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001c20:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001c24:	fba8 7200 	umull	r7, r2, r8, r0
 8001c28:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001c2a:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001c2e:	eba1 014c 	sub.w	r1, r1, ip, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001c32:	fba5 7c02 	umull	r7, ip, r5, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001c36:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001c38:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001c3c:	fa1f fe83 	uxth.w	lr, r3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001c40:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8001c44:	eba2 024c 	sub.w	r2, r2, ip, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001c48:	fba5 7c0e 	umull	r7, ip, r5, lr
	*((*str)++) = (data / 10000) % 10 + '0';
 8001c4c:	4fd7      	ldr	r7, [pc, #860]	; (8001fac <uPMU_Str_Data+0x3d4>)
	*((*str)++) = (data        ) % 10 + '0';
 8001c4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001c52:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8001c56:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
	*((*str)++) = (data        ) % 10 + '0';
 8001c5a:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8001c5e:	fba7 7000 	umull	r7, r0, r7, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001c62:	ebae 0e4c 	sub.w	lr, lr, ip, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8001c66:	0b40      	lsrs	r0, r0, #13
	*((*str)++) = '.';
 8001c68:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001c6c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001c70:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 8001c72:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8001c74:	3030      	adds	r0, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001c76:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001c78:	f884 e004 	strb.w	lr, [r4, #4]
	*((*str)++) = (data / 10000) % 10 + '0';
 8001c7c:	7020      	strb	r0, [r4, #0]
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001c7e:	70e2      	strb	r2, [r4, #3]
	//*((*str)++) = '<';

	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8001c80:	f8db 0004 	ldr.w	r0, [fp, #4]
	*((*str)++) = '.';
 8001c84:	f884 a002 	strb.w	sl, [r4, #2]
	*((*str)++) = (data        ) % 10 + '0';
 8001c88:	7163      	strb	r3, [r4, #5]
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001c8a:	7061      	strb	r1, [r4, #1]
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8001c8c:	f7fe fc00 	bl	8000490 <__aeabi_f2d>
 8001c90:	a3c1      	add	r3, pc, #772	; (adr r3, 8001f98 <uPMU_Str_Data+0x3c0>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fa9d 	bl	80001d4 <__adddf3>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4bc4      	ldr	r3, [pc, #784]	; (8001fb0 <uPMU_Str_Data+0x3d8>)
 8001c9e:	f7fe fc4b 	bl	8000538 <__aeabi_dmul>
 8001ca2:	f7fe ff0b 	bl	8000abc <__aeabi_d2uiz>
 8001ca6:	b280      	uxth	r0, r0

	*((*str)++) = (data / 10000) % 10 + '0';
	*((*str)++) = (data / 1000 ) % 10 + '0';
	*((*str)++) = (data / 100  ) % 10 + '0';
	*((*str)++) = '.';
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001ca8:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001cac:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001cb0:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001cb2:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8001cb6:	4fbd      	ldr	r7, [pc, #756]	; (8001fac <uPMU_Str_Data+0x3d4>)
	*((*str)++) = '.';
 8001cb8:	f884 a009 	strb.w	sl, [r4, #9]
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001cbc:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001cc0:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 8001cc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8001cc6:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 8001cca:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001cce:	fba5 7301 	umull	r7, r3, r5, r1
 8001cd2:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001cd4:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001cd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cda:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001cde:	fba5 7302 	umull	r7, r3, r5, r2
 8001ce2:	08db      	lsrs	r3, r3, #3
 8001ce4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ce8:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001cec:	fba5 730c 	umull	r7, r3, r5, ip
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cf6:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8001cfa:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 8001cfe:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8001d02:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001d06:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001d08:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001d0a:	3130      	adds	r1, #48	; 0x30
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8001d0c:	f8db 0018 	ldr.w	r0, [fp, #24]
	*((*str)++) = (data / 10000) % 10 + '0';
 8001d10:	f884 e006 	strb.w	lr, [r4, #6]
	*((*str)++) = (data        ) % 10 + '0';
 8001d14:	f884 c00b 	strb.w	ip, [r4, #11]
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001d18:	7222      	strb	r2, [r4, #8]
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001d1a:	72a3      	strb	r3, [r4, #10]
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001d1c:	71e1      	strb	r1, [r4, #7]
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8001d1e:	f7fe fbb7 	bl	8000490 <__aeabi_f2d>
 8001d22:	a39b      	add	r3, pc, #620	; (adr r3, 8001f90 <uPMU_Str_Data+0x3b8>)
 8001d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d28:	f7fe fa54 	bl	80001d4 <__adddf3>
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	4b9e      	ldr	r3, [pc, #632]	; (8001fa8 <uPMU_Str_Data+0x3d0>)
 8001d30:	f7fe fc02 	bl	8000538 <__aeabi_dmul>
 8001d34:	f7fe fec2 	bl	8000abc <__aeabi_d2uiz>
 8001d38:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001d3a:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001d3e:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001d42:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001d44:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8001d48:	4f98      	ldr	r7, [pc, #608]	; (8001fac <uPMU_Str_Data+0x3d4>)
	*((*str)++) = '.';
 8001d4a:	f884 a00e 	strb.w	sl, [r4, #14]
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001d4e:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001d52:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 8001d54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8001d58:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 8001d5c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001d60:	fba5 7301 	umull	r7, r3, r5, r1
 8001d64:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001d66:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001d68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d6c:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001d70:	fba5 7302 	umull	r7, r3, r5, r2
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d7a:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001d7e:	fba5 730c 	umull	r7, r3, r5, ip
 8001d82:	08db      	lsrs	r3, r3, #3
 8001d84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001d88:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8001d8c:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 8001d90:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8001d94:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001d98:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001d9a:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001d9c:	3130      	adds	r1, #48	; 0x30
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8001d9e:	f8db 001c 	ldr.w	r0, [fp, #28]
	*((*str)++) = (data / 10000) % 10 + '0';
 8001da2:	f884 e00c 	strb.w	lr, [r4, #12]
	*((*str)++) = (data        ) % 10 + '0';
 8001da6:	f884 c011 	strb.w	ip, [r4, #17]
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001daa:	73e2      	strb	r2, [r4, #15]
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001dac:	7423      	strb	r3, [r4, #16]
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001dae:	7361      	strb	r1, [r4, #13]
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8001db0:	f7fe fb6e 	bl	8000490 <__aeabi_f2d>
 8001db4:	a378      	add	r3, pc, #480	; (adr r3, 8001f98 <uPMU_Str_Data+0x3c0>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fa0b 	bl	80001d4 <__adddf3>
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	4b7b      	ldr	r3, [pc, #492]	; (8001fb0 <uPMU_Str_Data+0x3d8>)
 8001dc2:	f7fe fbb9 	bl	8000538 <__aeabi_dmul>
 8001dc6:	f7fe fe79 	bl	8000abc <__aeabi_d2uiz>
 8001dca:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001dcc:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001dd0:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001dd4:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001dd6:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8001dda:	4f74      	ldr	r7, [pc, #464]	; (8001fac <uPMU_Str_Data+0x3d4>)
	*((*str)++) = '.';
 8001ddc:	f884 a015 	strb.w	sl, [r4, #21]
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001de0:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001de4:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 8001de6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8001dea:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 8001dee:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001df2:	fba5 7301 	umull	r7, r3, r5, r1
 8001df6:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001df8:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001dfa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001dfe:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001e02:	fba5 7302 	umull	r7, r3, r5, r2
 8001e06:	08db      	lsrs	r3, r3, #3
 8001e08:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e0c:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001e10:	fba5 730c 	umull	r7, r3, r5, ip
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e1a:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8001e1e:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 8001e22:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8001e26:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001e2a:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001e2c:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001e2e:	3130      	adds	r1, #48	; 0x30
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8001e30:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8001e34:	f884 e012 	strb.w	lr, [r4, #18]
	*((*str)++) = (data        ) % 10 + '0';
 8001e38:	f884 c017 	strb.w	ip, [r4, #23]
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001e3c:	7522      	strb	r2, [r4, #20]
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001e3e:	75a3      	strb	r3, [r4, #22]
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001e40:	74e1      	strb	r1, [r4, #19]
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8001e42:	f7fe fb25 	bl	8000490 <__aeabi_f2d>
 8001e46:	a352      	add	r3, pc, #328	; (adr r3, 8001f90 <uPMU_Str_Data+0x3b8>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe f9c2 	bl	80001d4 <__adddf3>
 8001e50:	2200      	movs	r2, #0
 8001e52:	4b55      	ldr	r3, [pc, #340]	; (8001fa8 <uPMU_Str_Data+0x3d0>)
 8001e54:	f7fe fb70 	bl	8000538 <__aeabi_dmul>
 8001e58:	f7fe fe30 	bl	8000abc <__aeabi_d2uiz>
 8001e5c:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001e5e:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001e62:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001e66:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001e68:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8001e6c:	4f4f      	ldr	r7, [pc, #316]	; (8001fac <uPMU_Str_Data+0x3d4>)
	*((*str)++) = '.';
 8001e6e:	f884 a01a 	strb.w	sl, [r4, #26]
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001e72:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001e76:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 8001e78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8001e7c:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 8001e80:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001e84:	fba5 7301 	umull	r7, r3, r5, r1
 8001e88:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001e8a:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001e8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e90:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001e94:	fba5 7302 	umull	r7, r3, r5, r2
 8001e98:	08db      	lsrs	r3, r3, #3
 8001e9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e9e:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001ea2:	fba5 730c 	umull	r7, r3, r5, ip
 8001ea6:	08db      	lsrs	r3, r3, #3
 8001ea8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001eac:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8001eb0:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 8001eb4:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8001eb8:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001ebc:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001ebe:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001ec0:	3130      	adds	r1, #48	; 0x30
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8001ec2:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
	*((*str)++) = (data / 10000) % 10 + '0';
 8001ec6:	f884 e018 	strb.w	lr, [r4, #24]
	*((*str)++) = (data        ) % 10 + '0';
 8001eca:	f884 c01d 	strb.w	ip, [r4, #29]
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001ece:	76e2      	strb	r2, [r4, #27]
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001ed0:	7723      	strb	r3, [r4, #28]
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001ed2:	7661      	strb	r1, [r4, #25]
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8001ed4:	f7fe fadc 	bl	8000490 <__aeabi_f2d>
 8001ed8:	a32f      	add	r3, pc, #188	; (adr r3, 8001f98 <uPMU_Str_Data+0x3c0>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe f979 	bl	80001d4 <__adddf3>
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <uPMU_Str_Data+0x3d8>)
 8001ee6:	f7fe fb27 	bl	8000538 <__aeabi_dmul>
 8001eea:	f7fe fde7 	bl	8000abc <__aeabi_d2uiz>
 8001eee:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001ef0:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001ef4:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001ef8:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001efa:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8001efe:	4f2b      	ldr	r7, [pc, #172]	; (8001fac <uPMU_Str_Data+0x3d4>)
	*((*str)++) = '.';
 8001f00:	f884 a021 	strb.w	sl, [r4, #33]	; 0x21
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001f04:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001f08:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 8001f0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8001f0e:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 8001f12:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001f16:	fba5 7301 	umull	r7, r3, r5, r1
 8001f1a:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001f1c:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001f1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f22:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001f26:	fba5 7302 	umull	r7, r3, r5, r2
 8001f2a:	08db      	lsrs	r3, r3, #3
 8001f2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f30:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001f34:	fba5 730c 	umull	r7, r3, r5, ip
 8001f38:	08db      	lsrs	r3, r3, #3
 8001f3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001f3e:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8001f42:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 8001f46:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8001f4a:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001f4e:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001f50:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001f52:	3130      	adds	r1, #48	; 0x30
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8001f54:	f8db 0048 	ldr.w	r0, [fp, #72]	; 0x48
	*((*str)++) = (data / 10000) % 10 + '0';
 8001f58:	f884 e01e 	strb.w	lr, [r4, #30]
	*((*str)++) = (data        ) % 10 + '0';
 8001f5c:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001f60:	f884 2020 	strb.w	r2, [r4, #32]
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001f64:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001f68:	77e1      	strb	r1, [r4, #31]
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8001f6a:	f7fe fa91 	bl	8000490 <__aeabi_f2d>
 8001f6e:	a308      	add	r3, pc, #32	; (adr r3, 8001f90 <uPMU_Str_Data+0x3b8>)
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	f7fe f92e 	bl	80001d4 <__adddf3>
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <uPMU_Str_Data+0x3d0>)
 8001f7c:	f7fe fadc 	bl	8000538 <__aeabi_dmul>
 8001f80:	f7fe fd9c 	bl	8000abc <__aeabi_d2uiz>
 8001f84:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001f86:	fba5 2300 	umull	r2, r3, r5, r0
 8001f8a:	e019      	b.n	8001fc0 <uPMU_Str_Data+0x3e8>
 8001f8c:	f3af 8000 	nop.w
 8001f90:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f94:	3f40624d 	.word	0x3f40624d
 8001f98:	47ae147b 	.word	0x47ae147b
 8001f9c:	3f747ae1 	.word	0x3f747ae1
 8001fa0:	cccccccd 	.word	0xcccccccd
 8001fa4:	2001f180 	.word	0x2001f180
 8001fa8:	408f4000 	.word	0x408f4000
 8001fac:	d1b71759 	.word	0xd1b71759
 8001fb0:	40590000 	.word	0x40590000
 8001fb4:	2001f238 	.word	0x2001f238
 8001fb8:	10624dd3 	.word	0x10624dd3
 8001fbc:	51eb851f 	.word	0x51eb851f
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001fc0:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001fc4:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001fc6:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8001fca:	4ff1      	ldr	r7, [pc, #964]	; (8002390 <uPMU_Str_Data+0x7b8>)
	*((*str)++) = '.';
 8001fcc:	f884 a026 	strb.w	sl, [r4, #38]	; 0x26
	*((*str)++) = (data / 10   ) % 10 + '0';
 8001fd0:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001fd4:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 8001fd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8001fda:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 8001fde:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001fe2:	fba5 7301 	umull	r7, r3, r5, r1
 8001fe6:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001fe8:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8001fea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001fee:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8001ff2:	fba5 7302 	umull	r7, r3, r5, r2
 8001ff6:	08db      	lsrs	r3, r3, #3
 8001ff8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ffc:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002000:	fba5 730c 	umull	r7, r3, r5, ip
 8002004:	08db      	lsrs	r3, r3, #3
 8002006:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800200a:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 800200e:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 8002012:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002016:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 800201a:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 800201c:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800201e:	3130      	adds	r1, #48	; 0x30
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002020:	f8db 004c 	ldr.w	r0, [fp, #76]	; 0x4c
	*((*str)++) = (data / 10000) % 10 + '0';
 8002024:	f884 e024 	strb.w	lr, [r4, #36]	; 0x24
	*((*str)++) = (data        ) % 10 + '0';
 8002028:	f884 c029 	strb.w	ip, [r4, #41]	; 0x29
	*((*str)++) = (data / 100  ) % 10 + '0';
 800202c:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002030:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002034:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002038:	f7fe fa2a 	bl	8000490 <__aeabi_f2d>
 800203c:	a3d0      	add	r3, pc, #832	; (adr r3, 8002380 <uPMU_Str_Data+0x7a8>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	f7fe f8c7 	bl	80001d4 <__adddf3>
 8002046:	2200      	movs	r2, #0
 8002048:	4bd2      	ldr	r3, [pc, #840]	; (8002394 <uPMU_Str_Data+0x7bc>)
 800204a:	f7fe fa75 	bl	8000538 <__aeabi_dmul>
 800204e:	f7fe fd35 	bl	8000abc <__aeabi_d2uiz>
 8002052:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002054:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002058:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 800205c:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 800205e:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8002062:	4fcb      	ldr	r7, [pc, #812]	; (8002390 <uPMU_Str_Data+0x7b8>)
	*((*str)++) = '.';
 8002064:	f884 a02d 	strb.w	sl, [r4, #45]	; 0x2d
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002068:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800206c:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 800206e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8002072:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 8002076:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800207a:	fba5 7301 	umull	r7, r3, r5, r1
 800207e:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002080:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002082:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002086:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 800208a:	fba5 7302 	umull	r7, r3, r5, r2
 800208e:	08db      	lsrs	r3, r3, #3
 8002090:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002094:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002098:	fba5 730c 	umull	r7, r3, r5, ip
 800209c:	08db      	lsrs	r3, r3, #3
 800209e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80020a2:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 80020a6:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 80020aa:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 80020ae:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 80020b2:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 80020b4:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80020b6:	3130      	adds	r1, #48	; 0x30
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 80020b8:	f8db 0060 	ldr.w	r0, [fp, #96]	; 0x60
	*((*str)++) = (data / 10000) % 10 + '0';
 80020bc:	f884 e02a 	strb.w	lr, [r4, #42]	; 0x2a
	*((*str)++) = (data        ) % 10 + '0';
 80020c0:	f884 c02f 	strb.w	ip, [r4, #47]	; 0x2f
	*((*str)++) = (data / 100  ) % 10 + '0';
 80020c4:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	*((*str)++) = (data / 10   ) % 10 + '0';
 80020c8:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80020cc:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 80020d0:	f7fe f9de 	bl	8000490 <__aeabi_f2d>
 80020d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8002388 <uPMU_Str_Data+0x7b0>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe f87b 	bl	80001d4 <__adddf3>
 80020de:	2200      	movs	r2, #0
 80020e0:	4bad      	ldr	r3, [pc, #692]	; (8002398 <uPMU_Str_Data+0x7c0>)
 80020e2:	f7fe fa29 	bl	8000538 <__aeabi_dmul>
 80020e6:	f7fe fce9 	bl	8000abc <__aeabi_d2uiz>
 80020ea:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 80020ec:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80020f0:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 80020f4:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 80020f6:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 80020fa:	4fa5      	ldr	r7, [pc, #660]	; (8002390 <uPMU_Str_Data+0x7b8>)
	*((*str)++) = '.';
 80020fc:	f884 a032 	strb.w	sl, [r4, #50]	; 0x32
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002100:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002104:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 8002106:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 800210a:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 800210e:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002112:	fba5 7301 	umull	r7, r3, r5, r1
 8002116:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002118:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800211a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800211e:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002122:	fba5 7302 	umull	r7, r3, r5, r2
 8002126:	08db      	lsrs	r3, r3, #3
 8002128:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800212c:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002130:	fba5 730c 	umull	r7, r3, r5, ip
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800213a:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 800213e:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 8002142:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002146:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 800214a:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 800214c:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800214e:	3130      	adds	r1, #48	; 0x30
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002150:	f8db 0064 	ldr.w	r0, [fp, #100]	; 0x64
	*((*str)++) = (data / 10000) % 10 + '0';
 8002154:	f884 e030 	strb.w	lr, [r4, #48]	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 8002158:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
	*((*str)++) = (data / 100  ) % 10 + '0';
 800215c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002160:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002164:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002168:	f7fe f992 	bl	8000490 <__aeabi_f2d>
 800216c:	a384      	add	r3, pc, #528	; (adr r3, 8002380 <uPMU_Str_Data+0x7a8>)
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	f7fe f82f 	bl	80001d4 <__adddf3>
 8002176:	2200      	movs	r2, #0
 8002178:	4b86      	ldr	r3, [pc, #536]	; (8002394 <uPMU_Str_Data+0x7bc>)
 800217a:	f7fe f9dd 	bl	8000538 <__aeabi_dmul>
 800217e:	f7fe fc9d 	bl	8000abc <__aeabi_d2uiz>
 8002182:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002184:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002188:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 800218c:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 800218e:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8002192:	4f7f      	ldr	r7, [pc, #508]	; (8002390 <uPMU_Str_Data+0x7b8>)
	*((*str)++) = '.';
 8002194:	f884 a039 	strb.w	sl, [r4, #57]	; 0x39
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002198:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800219c:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 800219e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 80021a2:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 80021a6:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80021aa:	fba5 7301 	umull	r7, r3, r5, r1
 80021ae:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 80021b0:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80021b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021b6:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 80021ba:	fba5 7302 	umull	r7, r3, r5, r2
 80021be:	08db      	lsrs	r3, r3, #3
 80021c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021c4:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 80021c8:	fba5 730c 	umull	r7, r3, r5, ip
 80021cc:	08db      	lsrs	r3, r3, #3
 80021ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021d2:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 80021d6:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 80021da:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 80021de:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 80021e2:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 80021e4:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80021e6:	3130      	adds	r1, #48	; 0x30
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 80021e8:	f8db 0078 	ldr.w	r0, [fp, #120]	; 0x78
	*((*str)++) = (data / 10000) % 10 + '0';
 80021ec:	f884 e036 	strb.w	lr, [r4, #54]	; 0x36
	*((*str)++) = (data        ) % 10 + '0';
 80021f0:	f884 c03b 	strb.w	ip, [r4, #59]	; 0x3b
	*((*str)++) = (data / 100  ) % 10 + '0';
 80021f4:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	*((*str)++) = (data / 10   ) % 10 + '0';
 80021f8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80021fc:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002200:	f7fe f946 	bl	8000490 <__aeabi_f2d>
 8002204:	a360      	add	r3, pc, #384	; (adr r3, 8002388 <uPMU_Str_Data+0x7b0>)
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	f7fd ffe3 	bl	80001d4 <__adddf3>
 800220e:	4b62      	ldr	r3, [pc, #392]	; (8002398 <uPMU_Str_Data+0x7c0>)
 8002210:	2200      	movs	r2, #0
 8002212:	f7fe f991 	bl	8000538 <__aeabi_dmul>
 8002216:	f7fe fc51 	bl	8000abc <__aeabi_d2uiz>
 800221a:	b280      	uxth	r0, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800221c:	fba9 3200 	umull	r3, r2, r9, r0
 8002220:	ea4f 1e92 	mov.w	lr, r2, lsr #6
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002224:	fba8 1300 	umull	r1, r3, r8, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002228:	fba5 2100 	umull	r2, r1, r5, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 800222c:	4a58      	ldr	r2, [pc, #352]	; (8002390 <uPMU_Str_Data+0x7b8>)
	*((*str)++) = '.';
 800222e:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
	*((*str)++) = (data / 10000) % 10 + '0';
 8002232:	fba2 2c00 	umull	r2, ip, r2, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002236:	fba5 720e 	umull	r7, r2, r5, lr
 800223a:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 800223c:	095b      	lsrs	r3, r3, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800223e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002242:	ebae 0242 	sub.w	r2, lr, r2, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002246:	fba5 7e03 	umull	r7, lr, r5, r3
 800224a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
	*((*str)++) = (data / 10   ) % 10 + '0';
 800224e:	08c9      	lsrs	r1, r1, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002250:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8002254:	eba3 034e 	sub.w	r3, r3, lr, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002258:	fa1f fe81 	uxth.w	lr, r1
	*((*str)++) = (data        ) % 10 + '0';
 800225c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002260:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002264:	fba5 710e 	umull	r7, r1, r5, lr
 8002268:	08c9      	lsrs	r1, r1, #3
 800226a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800226e:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002270:	ebae 0e41 	sub.w	lr, lr, r1, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8002274:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
 8002278:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 800227c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002280:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002282:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
	*((*str)++) = (data        ) % 10 + '0';
 8002286:	f100 0230 	add.w	r2, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 800228a:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
	*((*str)++) = (data / 100  ) % 10 + '0';
 800228e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002292:	f8db 007c 	ldr.w	r0, [fp, #124]	; 0x7c
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002296:	f884 e040 	strb.w	lr, [r4, #64]	; 0x40
	*((*str)++) = (data        ) % 10 + '0';
 800229a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 800229e:	f7fe f8f7 	bl	8000490 <__aeabi_f2d>
 80022a2:	a337      	add	r3, pc, #220	; (adr r3, 8002380 <uPMU_Str_Data+0x7a8>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	f7fd ff94 	bl	80001d4 <__adddf3>
 80022ac:	2200      	movs	r2, #0
 80022ae:	4b39      	ldr	r3, [pc, #228]	; (8002394 <uPMU_Str_Data+0x7bc>)
 80022b0:	f7fe f942 	bl	8000538 <__aeabi_dmul>
 80022b4:	f7fe fc02 	bl	8000abc <__aeabi_d2uiz>
 80022b8:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 80022ba:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80022be:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 80022c2:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 80022c4:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 80022c8:	4f31      	ldr	r7, [pc, #196]	; (8002390 <uPMU_Str_Data+0x7b8>)
	*((*str)++) = '.';
 80022ca:	f884 a045 	strb.w	sl, [r4, #69]	; 0x45
	*((*str)++) = (data / 10   ) % 10 + '0';
 80022ce:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80022d2:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 80022d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 80022d8:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 80022dc:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80022e0:	fba5 7301 	umull	r7, r3, r5, r1
 80022e4:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 80022e6:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80022e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022ec:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 80022f0:	fba5 7302 	umull	r7, r3, r5, r2
 80022f4:	08db      	lsrs	r3, r3, #3
 80022f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022fa:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 80022fe:	fba5 730c 	umull	r7, r3, r5, ip
 8002302:	08db      	lsrs	r3, r3, #3
 8002304:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002308:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 800230c:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 8002310:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002314:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002318:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 800231a:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800231c:	3130      	adds	r1, #48	; 0x30
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 800231e:	f8db 0008 	ldr.w	r0, [fp, #8]
	*((*str)++) = (data / 10000) % 10 + '0';
 8002322:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
	*((*str)++) = (data        ) % 10 + '0';
 8002326:	f884 c047 	strb.w	ip, [r4, #71]	; 0x47
	*((*str)++) = (data / 100  ) % 10 + '0';
 800232a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	*((*str)++) = (data / 10   ) % 10 + '0';
 800232e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002336:	f7fe f8ab 	bl	8000490 <__aeabi_f2d>
 800233a:	a313      	add	r3, pc, #76	; (adr r3, 8002388 <uPMU_Str_Data+0x7b0>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fd ff48 	bl	80001d4 <__adddf3>
 8002344:	2200      	movs	r2, #0
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <uPMU_Str_Data+0x7c0>)
 8002348:	f7fe f8f6 	bl	8000538 <__aeabi_dmul>
 800234c:	f7fe fbb6 	bl	8000abc <__aeabi_d2uiz>
 8002350:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002352:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002356:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 800235a:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 800235c:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8002360:	4f0b      	ldr	r7, [pc, #44]	; (8002390 <uPMU_Str_Data+0x7b8>)
	*((*str)++) = '.';
 8002362:	f884 a04a 	strb.w	sl, [r4, #74]	; 0x4a
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002366:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800236a:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 800236c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8002370:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 8002374:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002378:	fba5 7301 	umull	r7, r3, r5, r1
 800237c:	e00e      	b.n	800239c <uPMU_Str_Data+0x7c4>
 800237e:	bf00      	nop
 8002380:	47ae147b 	.word	0x47ae147b
 8002384:	3f747ae1 	.word	0x3f747ae1
 8002388:	d2f1a9fc 	.word	0xd2f1a9fc
 800238c:	3f40624d 	.word	0x3f40624d
 8002390:	d1b71759 	.word	0xd1b71759
 8002394:	40590000 	.word	0x40590000
 8002398:	408f4000 	.word	0x408f4000
 800239c:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 800239e:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80023a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023a4:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 80023a8:	fba5 7302 	umull	r7, r3, r5, r2
 80023ac:	08db      	lsrs	r3, r3, #3
 80023ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023b2:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 80023b6:	fba5 730c 	umull	r7, r3, r5, ip
 80023ba:	08db      	lsrs	r3, r3, #3
 80023bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80023c0:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 80023c4:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 80023c8:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 80023cc:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 80023d0:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 80023d2:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80023d4:	3130      	adds	r1, #48	; 0x30
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 80023d6:	f8db 000c 	ldr.w	r0, [fp, #12]
	*((*str)++) = (data / 10000) % 10 + '0';
 80023da:	f884 e048 	strb.w	lr, [r4, #72]	; 0x48
	*((*str)++) = (data        ) % 10 + '0';
 80023de:	f884 c04d 	strb.w	ip, [r4, #77]	; 0x4d
	*((*str)++) = (data / 100  ) % 10 + '0';
 80023e2:	f884 204b 	strb.w	r2, [r4, #75]	; 0x4b
	*((*str)++) = (data / 10   ) % 10 + '0';
 80023e6:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80023ea:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 80023ee:	f7fe f84f 	bl	8000490 <__aeabi_f2d>
 80023f2:	a3ef      	add	r3, pc, #956	; (adr r3, 80027b0 <uPMU_Str_Data+0xbd8>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fd feec 	bl	80001d4 <__adddf3>
 80023fc:	2200      	movs	r2, #0
 80023fe:	4bee      	ldr	r3, [pc, #952]	; (80027b8 <uPMU_Str_Data+0xbe0>)
 8002400:	f7fe f89a 	bl	8000538 <__aeabi_dmul>
 8002404:	f7fe fb5a 	bl	8000abc <__aeabi_d2uiz>
 8002408:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 800240a:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800240e:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002412:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002414:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8002418:	4fe8      	ldr	r7, [pc, #928]	; (80027bc <uPMU_Str_Data+0xbe4>)
	*((*str)++) = '.';
 800241a:	f884 a051 	strb.w	sl, [r4, #81]	; 0x51
	*((*str)++) = (data / 10   ) % 10 + '0';
 800241e:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002422:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 8002424:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8002428:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 800242c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002430:	fba5 7301 	umull	r7, r3, r5, r1
 8002434:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002436:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002438:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800243c:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002440:	fba5 7302 	umull	r7, r3, r5, r2
 8002444:	08db      	lsrs	r3, r3, #3
 8002446:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800244a:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 800244e:	fba5 730c 	umull	r7, r3, r5, ip
 8002452:	08db      	lsrs	r3, r3, #3
 8002454:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002458:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 800245c:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 8002460:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002464:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002468:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 800246a:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800246c:	3130      	adds	r1, #48	; 0x30
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 800246e:	f8db 0020 	ldr.w	r0, [fp, #32]
	*((*str)++) = (data / 10000) % 10 + '0';
 8002472:	f884 e04e 	strb.w	lr, [r4, #78]	; 0x4e
	*((*str)++) = (data        ) % 10 + '0';
 8002476:	f884 c053 	strb.w	ip, [r4, #83]	; 0x53
	*((*str)++) = (data / 100  ) % 10 + '0';
 800247a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
	*((*str)++) = (data / 10   ) % 10 + '0';
 800247e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002482:	f884 104f 	strb.w	r1, [r4, #79]	; 0x4f
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002486:	f7fe f803 	bl	8000490 <__aeabi_f2d>
 800248a:	a3c7      	add	r3, pc, #796	; (adr r3, 80027a8 <uPMU_Str_Data+0xbd0>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fd fea0 	bl	80001d4 <__adddf3>
 8002494:	2200      	movs	r2, #0
 8002496:	4bca      	ldr	r3, [pc, #808]	; (80027c0 <uPMU_Str_Data+0xbe8>)
 8002498:	f7fe f84e 	bl	8000538 <__aeabi_dmul>
 800249c:	f7fe fb0e 	bl	8000abc <__aeabi_d2uiz>
 80024a0:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 80024a2:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80024a6:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 80024aa:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 80024ac:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 80024b0:	4fc2      	ldr	r7, [pc, #776]	; (80027bc <uPMU_Str_Data+0xbe4>)
	*((*str)++) = '.';
 80024b2:	f884 a056 	strb.w	sl, [r4, #86]	; 0x56
	*((*str)++) = (data / 10   ) % 10 + '0';
 80024b6:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80024ba:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 80024bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 80024c0:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 80024c4:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80024c8:	fba5 7301 	umull	r7, r3, r5, r1
 80024cc:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 80024ce:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80024d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80024d4:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 80024d8:	fba5 7302 	umull	r7, r3, r5, r2
 80024dc:	08db      	lsrs	r3, r3, #3
 80024de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80024e2:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 80024e6:	fba5 730c 	umull	r7, r3, r5, ip
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80024f0:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 80024f4:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 80024f8:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 80024fc:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002500:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002502:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002504:	3130      	adds	r1, #48	; 0x30
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002506:	f8db 0024 	ldr.w	r0, [fp, #36]	; 0x24
	*((*str)++) = (data / 10000) % 10 + '0';
 800250a:	f884 e054 	strb.w	lr, [r4, #84]	; 0x54
	*((*str)++) = (data        ) % 10 + '0';
 800250e:	f884 c059 	strb.w	ip, [r4, #89]	; 0x59
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002512:	f884 2057 	strb.w	r2, [r4, #87]	; 0x57
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002516:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800251a:	f884 1055 	strb.w	r1, [r4, #85]	; 0x55
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 800251e:	f7fd ffb7 	bl	8000490 <__aeabi_f2d>
 8002522:	a3a3      	add	r3, pc, #652	; (adr r3, 80027b0 <uPMU_Str_Data+0xbd8>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	f7fd fe54 	bl	80001d4 <__adddf3>
 800252c:	2200      	movs	r2, #0
 800252e:	4ba2      	ldr	r3, [pc, #648]	; (80027b8 <uPMU_Str_Data+0xbe0>)
 8002530:	f7fe f802 	bl	8000538 <__aeabi_dmul>
 8002534:	f7fe fac2 	bl	8000abc <__aeabi_d2uiz>
 8002538:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 800253a:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800253e:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002542:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002544:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8002548:	4f9c      	ldr	r7, [pc, #624]	; (80027bc <uPMU_Str_Data+0xbe4>)
	*((*str)++) = '.';
 800254a:	f884 a05d 	strb.w	sl, [r4, #93]	; 0x5d
	*((*str)++) = (data / 10   ) % 10 + '0';
 800254e:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002552:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 8002554:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8002558:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 800255c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002560:	fba5 7301 	umull	r7, r3, r5, r1
 8002564:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002566:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002568:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800256c:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002570:	fba5 7302 	umull	r7, r3, r5, r2
 8002574:	08db      	lsrs	r3, r3, #3
 8002576:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800257a:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 800257e:	fba5 730c 	umull	r7, r3, r5, ip
 8002582:	08db      	lsrs	r3, r3, #3
 8002584:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002588:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 800258c:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 8002590:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002594:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002598:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 800259a:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800259c:	3130      	adds	r1, #48	; 0x30
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 800259e:	f8db 0038 	ldr.w	r0, [fp, #56]	; 0x38
	*((*str)++) = (data / 10000) % 10 + '0';
 80025a2:	f884 e05a 	strb.w	lr, [r4, #90]	; 0x5a
	*((*str)++) = (data        ) % 10 + '0';
 80025a6:	f884 c05f 	strb.w	ip, [r4, #95]	; 0x5f
	*((*str)++) = (data / 100  ) % 10 + '0';
 80025aa:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
	*((*str)++) = (data / 10   ) % 10 + '0';
 80025ae:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80025b2:	f884 105b 	strb.w	r1, [r4, #91]	; 0x5b
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 80025b6:	f7fd ff6b 	bl	8000490 <__aeabi_f2d>
 80025ba:	a37b      	add	r3, pc, #492	; (adr r3, 80027a8 <uPMU_Str_Data+0xbd0>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fd fe08 	bl	80001d4 <__adddf3>
 80025c4:	2200      	movs	r2, #0
 80025c6:	4b7e      	ldr	r3, [pc, #504]	; (80027c0 <uPMU_Str_Data+0xbe8>)
 80025c8:	f7fd ffb6 	bl	8000538 <__aeabi_dmul>
 80025cc:	f7fe fa76 	bl	8000abc <__aeabi_d2uiz>
 80025d0:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 80025d2:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80025d6:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 80025da:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 80025dc:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 80025e0:	4f76      	ldr	r7, [pc, #472]	; (80027bc <uPMU_Str_Data+0xbe4>)
	*((*str)++) = '.';
 80025e2:	f884 a062 	strb.w	sl, [r4, #98]	; 0x62
	*((*str)++) = (data / 10   ) % 10 + '0';
 80025e6:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80025ea:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 80025ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 80025f0:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 80025f4:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80025f8:	fba5 7301 	umull	r7, r3, r5, r1
 80025fc:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 80025fe:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002600:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002604:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002608:	fba5 7302 	umull	r7, r3, r5, r2
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002612:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002616:	fba5 730c 	umull	r7, r3, r5, ip
 800261a:	08db      	lsrs	r3, r3, #3
 800261c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002620:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8002624:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 8002628:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 800262c:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002630:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002632:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002634:	3130      	adds	r1, #48	; 0x30
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002636:	f8db 003c 	ldr.w	r0, [fp, #60]	; 0x3c
	*((*str)++) = (data / 10000) % 10 + '0';
 800263a:	f884 e060 	strb.w	lr, [r4, #96]	; 0x60
	*((*str)++) = (data        ) % 10 + '0';
 800263e:	f884 c065 	strb.w	ip, [r4, #101]	; 0x65
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002642:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002646:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800264a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 800264e:	f7fd ff1f 	bl	8000490 <__aeabi_f2d>
 8002652:	a357      	add	r3, pc, #348	; (adr r3, 80027b0 <uPMU_Str_Data+0xbd8>)
 8002654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002658:	f7fd fdbc 	bl	80001d4 <__adddf3>
 800265c:	2200      	movs	r2, #0
 800265e:	4b56      	ldr	r3, [pc, #344]	; (80027b8 <uPMU_Str_Data+0xbe0>)
 8002660:	f7fd ff6a 	bl	8000538 <__aeabi_dmul>
 8002664:	f7fe fa2a 	bl	8000abc <__aeabi_d2uiz>
 8002668:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 800266a:	fba5 2300 	umull	r2, r3, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800266e:	fba9 2100 	umull	r2, r1, r9, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002672:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002674:	fba8 7200 	umull	r7, r2, r8, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8002678:	4f50      	ldr	r7, [pc, #320]	; (80027bc <uPMU_Str_Data+0xbe4>)
	*((*str)++) = '.';
 800267a:	f884 a069 	strb.w	sl, [r4, #105]	; 0x69
	*((*str)++) = (data / 10   ) % 10 + '0';
 800267e:	fa1f fc83 	uxth.w	ip, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002682:	0989      	lsrs	r1, r1, #6
	*((*str)++) = (data        ) % 10 + '0';
 8002684:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8002688:	fba7 7e00 	umull	r7, lr, r7, r0
	*((*str)++) = (data        ) % 10 + '0';
 800268c:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002690:	fba5 7301 	umull	r7, r3, r5, r1
 8002694:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002696:	0952      	lsrs	r2, r2, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002698:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800269c:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 80026a0:	fba5 7302 	umull	r7, r3, r5, r2
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026aa:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 80026ae:	fba5 730c 	umull	r7, r3, r5, ip
 80026b2:	08db      	lsrs	r3, r3, #3
 80026b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80026b8:	ebac 0343 	sub.w	r3, ip, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 80026bc:	ea4f 3e5e 	mov.w	lr, lr, lsr #13
	*((*str)++) = (data        ) % 10 + '0';
 80026c0:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 80026c4:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 80026c8:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 80026ca:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80026cc:	3130      	adds	r1, #48	; 0x30
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 80026ce:	f8db 0050 	ldr.w	r0, [fp, #80]	; 0x50
	*((*str)++) = (data / 10000) % 10 + '0';
 80026d2:	f884 e066 	strb.w	lr, [r4, #102]	; 0x66
	*((*str)++) = (data        ) % 10 + '0';
 80026d6:	f884 c06b 	strb.w	ip, [r4, #107]	; 0x6b
	*((*str)++) = (data / 100  ) % 10 + '0';
 80026da:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
	*((*str)++) = (data / 10   ) % 10 + '0';
 80026de:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80026e2:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 80026e6:	f7fd fed3 	bl	8000490 <__aeabi_f2d>
 80026ea:	a32f      	add	r3, pc, #188	; (adr r3, 80027a8 <uPMU_Str_Data+0xbd0>)
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	f7fd fd70 	bl	80001d4 <__adddf3>
 80026f4:	4b32      	ldr	r3, [pc, #200]	; (80027c0 <uPMU_Str_Data+0xbe8>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	f7fd ff1e 	bl	8000538 <__aeabi_dmul>
 80026fc:	f7fe f9de 	bl	8000abc <__aeabi_d2uiz>
 8002700:	b282      	uxth	r2, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002702:	fba9 3c02 	umull	r3, ip, r9, r2
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002706:	fba8 1e02 	umull	r1, lr, r8, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 800270a:	fba5 1302 	umull	r1, r3, r5, r2
	*((*str)++) = (data / 10000) % 10 + '0';
 800270e:	492b      	ldr	r1, [pc, #172]	; (80027bc <uPMU_Str_Data+0xbe4>)
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002710:	f8cd b004 	str.w	fp, [sp, #4]
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002714:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 10000) % 10 + '0';
 8002716:	fba1 0102 	umull	r0, r1, r1, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 800271a:	b298      	uxth	r0, r3
	*((*str)++) = (data        ) % 10 + '0';
 800271c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002720:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002724:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	*((*str)++) = (data        ) % 10 + '0';
 8002728:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
 800272c:	461f      	mov	r7, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800272e:	fba5 320c 	umull	r3, r2, r5, ip
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002732:	fba5 b30e 	umull	fp, r3, r5, lr
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002736:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002738:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800273a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 100  ) % 10 + '0';
 800273e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002742:	ebae 0343 	sub.w	r3, lr, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002746:	ebac 0242 	sub.w	r2, ip, r2, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 800274a:	fba5 ec00 	umull	lr, ip, r5, r0
 800274e:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8002752:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002756:	3230      	adds	r2, #48	; 0x30
 8002758:	f884 206d 	strb.w	r2, [r4, #109]	; 0x6d
	*((*str)++) = (data / 10   ) % 10 + '0';
 800275c:	eba0 004c 	sub.w	r0, r0, ip, lsl #1
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002760:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <uPMU_Str_Data+0xbec>)
	*((*str)++) = '.';
 8002762:	f884 a06e 	strb.w	sl, [r4, #110]	; 0x6e
	*((*str)++) = (data / 10000) % 10 + '0';
 8002766:	0b49      	lsrs	r1, r1, #13
	*((*str)++) = (data        ) % 10 + '0';
 8002768:	f107 0e30 	add.w	lr, r7, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 800276c:	f100 0c30 	add.w	ip, r0, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002770:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002772:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 8002774:	f884 e071 	strb.w	lr, [r4, #113]	; 0x71
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002778:	f884 c070 	strb.w	ip, [r4, #112]	; 0x70
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 800277c:	6d50      	ldr	r0, [r2, #84]	; 0x54
	*((*str)++) = (data / 100  ) % 10 + '0';
 800277e:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
	*((*str)++) = (data / 10000) % 10 + '0';
 8002782:	f884 106c 	strb.w	r1, [r4, #108]	; 0x6c
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002786:	f7fd fe83 	bl	8000490 <__aeabi_f2d>
 800278a:	a309      	add	r3, pc, #36	; (adr r3, 80027b0 <uPMU_Str_Data+0xbd8>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd fd20 	bl	80001d4 <__adddf3>
 8002794:	2200      	movs	r2, #0
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <uPMU_Str_Data+0xbe0>)
	*((*str)++) = (data / 10000) % 10 + '0';
 8002798:	4f08      	ldr	r7, [pc, #32]	; (80027bc <uPMU_Str_Data+0xbe4>)
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 800279a:	f7fd fecd 	bl	8000538 <__aeabi_dmul>
 800279e:	f7fe f98d 	bl	8000abc <__aeabi_d2uiz>
 80027a2:	b282      	uxth	r2, r0
 80027a4:	e010      	b.n	80027c8 <uPMU_Str_Data+0xbf0>
 80027a6:	bf00      	nop
 80027a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80027ac:	3f40624d 	.word	0x3f40624d
 80027b0:	47ae147b 	.word	0x47ae147b
 80027b4:	3f747ae1 	.word	0x3f747ae1
 80027b8:	40590000 	.word	0x40590000
 80027bc:	d1b71759 	.word	0xd1b71759
 80027c0:	408f4000 	.word	0x408f4000
 80027c4:	2001f238 	.word	0x2001f238
	*((*str)++) = (data / 10   ) % 10 + '0';
 80027c8:	fba5 1302 	umull	r1, r3, r5, r2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80027cc:	fba9 1e02 	umull	r1, lr, r9, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 80027d0:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 80027d2:	fba8 0102 	umull	r0, r1, r8, r2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80027d6:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
	*((*str)++) = (data / 10   ) % 10 + '0';
 80027da:	b298      	uxth	r0, r3
	*((*str)++) = (data        ) % 10 + '0';
 80027dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 80027e0:	fba7 bc02 	umull	fp, ip, r7, r2
	*((*str)++) = (data        ) % 10 + '0';
 80027e4:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80027e8:	fba5 b30e 	umull	fp, r3, r5, lr
 80027ec:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 80027ee:	0949      	lsrs	r1, r1, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80027f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027f4:	ebae 0e43 	sub.w	lr, lr, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 80027f8:	fba5 b301 	umull	fp, r3, r5, r1
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002802:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002806:	fba5 b300 	umull	fp, r3, r5, r0
 800280a:	08db      	lsrs	r3, r3, #3
 800280c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002810:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8002814:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002818:	9801      	ldr	r0, [sp, #4]
	*((*str)++) = '.';
 800281a:	f884 a075 	strb.w	sl, [r4, #117]	; 0x75
	*((*str)++) = (data / 10000) % 10 + '0';
 800281e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002822:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 8002826:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002828:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 800282a:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 800282c:	f884 c072 	strb.w	ip, [r4, #114]	; 0x72
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002830:	f884 e073 	strb.w	lr, [r4, #115]	; 0x73
	*((*str)++) = (data        ) % 10 + '0';
 8002834:	f884 2077 	strb.w	r2, [r4, #119]	; 0x77
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002838:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 800283c:	6e80      	ldr	r0, [r0, #104]	; 0x68
	*((*str)++) = (data / 100  ) % 10 + '0';
 800283e:	f884 1074 	strb.w	r1, [r4, #116]	; 0x74
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002842:	f7fd fe25 	bl	8000490 <__aeabi_f2d>
 8002846:	a3f4      	add	r3, pc, #976	; (adr r3, 8002c18 <uPMU_Str_Data+0x1040>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fd fcc2 	bl	80001d4 <__adddf3>
 8002850:	4bf3      	ldr	r3, [pc, #972]	; (8002c20 <uPMU_Str_Data+0x1048>)
 8002852:	2200      	movs	r2, #0
 8002854:	f7fd fe70 	bl	8000538 <__aeabi_dmul>
 8002858:	f7fe f930 	bl	8000abc <__aeabi_d2uiz>
 800285c:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 800285e:	fba5 3200 	umull	r3, r2, r5, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002862:	fba9 3900 	umull	r3, r9, r9, r0
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002866:	fba8 3800 	umull	r3, r8, r8, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 800286a:	08d2      	lsrs	r2, r2, #3
 800286c:	462e      	mov	r6, r5
 800286e:	fa1f fe82 	uxth.w	lr, r2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002872:	ea4f 1999 	mov.w	r9, r9, lsr #6
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002876:	ea4f 1858 	mov.w	r8, r8, lsr #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800287a:	fba5 1309 	umull	r1, r3, r5, r9
	*((*str)++) = (data / 100  ) % 10 + '0';
 800287e:	fba5 1508 	umull	r1, r5, r5, r8
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002882:	fba6 c10e 	umull	ip, r1, r6, lr
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002886:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002888:	08ed      	lsrs	r5, r5, #3
	*((*str)++) = (data / 10   ) % 10 + '0';
 800288a:	08c9      	lsrs	r1, r1, #3
	*((*str)++) = (data / 10000) % 10 + '0';
 800288c:	fba7 c700 	umull	ip, r7, r7, r0
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002890:	eb05 0585 	add.w	r5, r5, r5, lsl #2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002894:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data        ) % 10 + '0';
 8002898:	eb02 0282 	add.w	r2, r2, r2, lsl #2
	*((*str)++) = (data / 10   ) % 10 + '0';
 800289c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80028a0:	ebae 0141 	sub.w	r1, lr, r1, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80028a4:	eba9 0343 	sub.w	r3, r9, r3, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 80028a8:	eba8 0845 	sub.w	r8, r8, r5, lsl #1
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 80028ac:	f8df 937c 	ldr.w	r9, [pc, #892]	; 8002c2c <uPMU_Str_Data+0x1054>
	*((*str)++) = '.';
 80028b0:	f884 a07a 	strb.w	sl, [r4, #122]	; 0x7a
	*((*str)++) = (data        ) % 10 + '0';
 80028b4:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 80028b8:	0b7f      	lsrs	r7, r7, #13
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80028ba:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 80028bc:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 80028be:	3730      	adds	r7, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 80028c0:	f108 0830 	add.w	r8, r8, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 80028c4:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 80028c6:	f884 7078 	strb.w	r7, [r4, #120]	; 0x78
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80028ca:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
	*((*str)++) = (data / 100  ) % 10 + '0';
 80028ce:	f884 807b 	strb.w	r8, [r4, #123]	; 0x7b
	*((*str)++) = (data        ) % 10 + '0';
 80028d2:	f884 207d 	strb.w	r2, [r4, #125]	; 0x7d
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 80028d6:	f8d9 006c 	ldr.w	r0, [r9, #108]	; 0x6c
	*((*str)++) = (data / 10   ) % 10 + '0';
 80028da:	f884 107c 	strb.w	r1, [r4, #124]	; 0x7c
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 80028de:	f7fd fdd7 	bl	8000490 <__aeabi_f2d>
 80028e2:	a3cb      	add	r3, pc, #812	; (adr r3, 8002c10 <uPMU_Str_Data+0x1038>)
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	f7fd fc74 	bl	80001d4 <__adddf3>
 80028ec:	2200      	movs	r2, #0
 80028ee:	4bcd      	ldr	r3, [pc, #820]	; (8002c24 <uPMU_Str_Data+0x104c>)
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80028f0:	f8df a33c 	ldr.w	sl, [pc, #828]	; 8002c30 <uPMU_Str_Data+0x1058>
	*((*str)++) = (data / 10000) % 10 + '0';
 80028f4:	f8df 833c 	ldr.w	r8, [pc, #828]	; 8002c34 <uPMU_Str_Data+0x105c>
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 80028f8:	f7fd fe1e 	bl	8000538 <__aeabi_dmul>
 80028fc:	f7fe f8de 	bl	8000abc <__aeabi_d2uiz>
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002900:	4625      	mov	r5, r4
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002902:	b280      	uxth	r0, r0
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002904:	4cc8      	ldr	r4, [pc, #800]	; (8002c28 <uPMU_Str_Data+0x1050>)
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002906:	fbaa 3e00 	umull	r3, lr, sl, r0
	*((*str)++) = (data / 100  ) % 10 + '0';
 800290a:	fba4 3100 	umull	r3, r1, r4, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800290e:	ea4f 1b9e 	mov.w	fp, lr, lsr #6
 8002912:	fba6 2e0b 	umull	r2, lr, r6, fp
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002916:	094f      	lsrs	r7, r1, #5
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002918:	fba6 2300 	umull	r2, r3, r6, r0
	*((*str)++) = (data / 100  ) % 10 + '0';
 800291c:	fba6 2107 	umull	r2, r1, r6, r7
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002920:	ea4f 0ede 	mov.w	lr, lr, lsr #3
	*((*str)++) = (data / 10000) % 10 + '0';
 8002924:	fba8 2c00 	umull	r2, ip, r8, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002928:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800292a:	eb0e 028e 	add.w	r2, lr, lr, lsl #2
	*((*str)++) = (data / 100  ) % 10 + '0';
 800292e:	08c9      	lsrs	r1, r1, #3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002930:	ebab 0e42 	sub.w	lr, fp, r2, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002934:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002938:	b29a      	uxth	r2, r3
	*((*str)++) = (data / 100  ) % 10 + '0';
 800293a:	eba7 0141 	sub.w	r1, r7, r1, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 800293e:	fba6 b702 	umull	fp, r7, r6, r2
 8002942:	08ff      	lsrs	r7, r7, #3
 8002944:	eb07 0787 	add.w	r7, r7, r7, lsl #2
	*((*str)++) = (data        ) % 10 + '0';
 8002948:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800294c:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002950:	eba2 0247 	sub.w	r2, r2, r7, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8002954:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
	*((*str)++) = '.';
 8002958:	272e      	movs	r7, #46	; 0x2e
	*((*str)++) = (data / 10000) % 10 + '0';
 800295a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800295e:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 8002962:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002964:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002966:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002968:	f885 c07e 	strb.w	ip, [r5, #126]	; 0x7e
	*((*str)++) = (data / 1000 ) % 10 + '0';
 800296c:	f885 e07f 	strb.w	lr, [r5, #127]	; 0x7f
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002970:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002974:	f885 2082 	strb.w	r2, [r5, #130]	; 0x82
	*((*str)++) = (data        ) % 10 + '0';
 8002978:	f885 3083 	strb.w	r3, [r5, #131]	; 0x83
	*((*str)++) = (data / 100  ) % 10 + '0';
 800297c:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
	*((*str)++) = '.';
 8002980:	f885 7081 	strb.w	r7, [r5, #129]	; 0x81
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002984:	f7fd fd84 	bl	8000490 <__aeabi_f2d>
 8002988:	a3a3      	add	r3, pc, #652	; (adr r3, 8002c18 <uPMU_Str_Data+0x1040>)
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	f7fd fc21 	bl	80001d4 <__adddf3>
 8002992:	2200      	movs	r2, #0
 8002994:	4ba2      	ldr	r3, [pc, #648]	; (8002c20 <uPMU_Str_Data+0x1048>)
 8002996:	f7fd fdcf 	bl	8000538 <__aeabi_dmul>
 800299a:	f7fe f88f 	bl	8000abc <__aeabi_d2uiz>
 800299e:	b282      	uxth	r2, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 80029a0:	fba6 1302 	umull	r1, r3, r6, r2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80029a4:	fbaa 1002 	umull	r1, r0, sl, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 80029a8:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 80029aa:	fba4 1b02 	umull	r1, fp, r4, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 80029ae:	fa1f fe83 	uxth.w	lr, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80029b2:	0981      	lsrs	r1, r0, #6
	*((*str)++) = (data        ) % 10 + '0';
 80029b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 80029b8:	fba8 0c02 	umull	r0, ip, r8, r2
	*((*str)++) = (data        ) % 10 + '0';
 80029bc:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80029c0:	fba6 0201 	umull	r0, r2, r6, r1
 80029c4:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 80029c6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80029ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80029ce:	eba1 0042 	sub.w	r0, r1, r2, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 80029d2:	fba6 120b 	umull	r1, r2, r6, fp
 80029d6:	08d2      	lsrs	r2, r2, #3
 80029d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80029dc:	ebab 0142 	sub.w	r1, fp, r2, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 80029e0:	fba6 b20e 	umull	fp, r2, r6, lr
 80029e4:	08d2      	lsrs	r2, r2, #3
 80029e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80029ea:	ebae 0242 	sub.w	r2, lr, r2, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 80029ee:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
	*((*str)++) = (data / 1000 ) % 10 + '0';
 80029f2:	f100 0e30 	add.w	lr, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 80029f6:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 80029fa:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 80029fc:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 80029fe:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002a00:	f885 c084 	strb.w	ip, [r5, #132]	; 0x84
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002a04:	f885 e085 	strb.w	lr, [r5, #133]	; 0x85
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002a08:	f8d9 0084 	ldr.w	r0, [r9, #132]	; 0x84
	*((*str)++) = (data        ) % 10 + '0';
 8002a0c:	f885 3089 	strb.w	r3, [r5, #137]	; 0x89
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002a10:	f885 2088 	strb.w	r2, [r5, #136]	; 0x88
	*((*str)++) = '.';
 8002a14:	f885 7086 	strb.w	r7, [r5, #134]	; 0x86
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002a18:	f885 1087 	strb.w	r1, [r5, #135]	; 0x87
	data = (uint16_t)((out->Angl + 0.005 ) * 100.0 );
 8002a1c:	f7fd fd38 	bl	8000490 <__aeabi_f2d>
 8002a20:	a37b      	add	r3, pc, #492	; (adr r3, 8002c10 <uPMU_Str_Data+0x1038>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fbd5 	bl	80001d4 <__adddf3>
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	4b7d      	ldr	r3, [pc, #500]	; (8002c24 <uPMU_Str_Data+0x104c>)
 8002a2e:	f7fd fd83 	bl	8000538 <__aeabi_dmul>
 8002a32:	f7fe f843 	bl	8000abc <__aeabi_d2uiz>
 8002a36:	b282      	uxth	r2, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002a38:	fba6 1302 	umull	r1, r3, r6, r2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002a3c:	fbaa 1002 	umull	r1, r0, sl, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002a40:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002a42:	fba4 1b02 	umull	r1, fp, r4, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002a46:	fa1f fe83 	uxth.w	lr, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002a4a:	0981      	lsrs	r1, r0, #6
	*((*str)++) = (data        ) % 10 + '0';
 8002a4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8002a50:	fba8 0c02 	umull	r0, ip, r8, r2
	*((*str)++) = (data        ) % 10 + '0';
 8002a54:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002a58:	fba6 0201 	umull	r0, r2, r6, r1
 8002a5c:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002a5e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002a62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a66:	eba1 0042 	sub.w	r0, r1, r2, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002a6a:	fba6 120b 	umull	r1, r2, r6, fp
 8002a6e:	08d2      	lsrs	r2, r2, #3
 8002a70:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a74:	ebab 0142 	sub.w	r1, fp, r2, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002a78:	fba6 b20e 	umull	fp, r2, r6, lr
 8002a7c:	08d2      	lsrs	r2, r2, #3
 8002a7e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002a82:	ebae 0242 	sub.w	r2, lr, r2, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8002a86:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002a8a:	f100 0e30 	add.w	lr, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002a8e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 8002a92:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002a94:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002a96:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002a98:	f885 c08a 	strb.w	ip, [r5, #138]	; 0x8a
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002a9c:	f885 e08b 	strb.w	lr, [r5, #139]	; 0x8b

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** uPMU Data Process **/
void uPMU_Str_Freq(const Result_Typedef* out, char** str) {

	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002aa0:	f8d9 0010 	ldr.w	r0, [r9, #16]
	*((*str)++) = (data        ) % 10 + '0';
 8002aa4:	f885 308f 	strb.w	r3, [r5, #143]	; 0x8f
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002aa8:	f885 208e 	strb.w	r2, [r5, #142]	; 0x8e
	*((*str)++) = '.';
 8002aac:	f885 708d 	strb.w	r7, [r5, #141]	; 0x8d
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002ab0:	f885 108c 	strb.w	r1, [r5, #140]	; 0x8c
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002ab4:	f7fd fcec 	bl	8000490 <__aeabi_f2d>
 8002ab8:	a357      	add	r3, pc, #348	; (adr r3, 8002c18 <uPMU_Str_Data+0x1040>)
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	f7fd fb89 	bl	80001d4 <__adddf3>
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	4b56      	ldr	r3, [pc, #344]	; (8002c20 <uPMU_Str_Data+0x1048>)
 8002ac6:	f7fd fd37 	bl	8000538 <__aeabi_dmul>
 8002aca:	f7fd fff7 	bl	8000abc <__aeabi_d2uiz>
 8002ace:	b282      	uxth	r2, r0

	*((*str)++) = (data / 10000) % 10 + '0';
	*((*str)++) = (data / 1000 ) % 10 + '0';
	*((*str)++) = '.';
	*((*str)++) = (data / 100  ) % 10 + '0';
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002ad0:	fba6 1302 	umull	r1, r3, r6, r2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002ad4:	fbaa 1002 	umull	r1, r0, sl, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002ad8:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002ada:	fba4 1b02 	umull	r1, fp, r4, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002ade:	fa1f fe83 	uxth.w	lr, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002ae2:	0981      	lsrs	r1, r0, #6
	*((*str)++) = (data        ) % 10 + '0';
 8002ae4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8002ae8:	fba8 0c02 	umull	r0, ip, r8, r2
	*((*str)++) = (data        ) % 10 + '0';
 8002aec:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002af0:	fba6 0201 	umull	r0, r2, r6, r1
 8002af4:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002af6:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002afa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002afe:	eba1 0042 	sub.w	r0, r1, r2, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002b02:	fba6 120b 	umull	r1, r2, r6, fp
 8002b06:	08d2      	lsrs	r2, r2, #3
 8002b08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b0c:	ebab 0142 	sub.w	r1, fp, r2, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002b10:	fba6 b20e 	umull	fp, r2, r6, lr
 8002b14:	08d2      	lsrs	r2, r2, #3
 8002b16:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b1a:	ebae 0242 	sub.w	r2, lr, r2, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8002b1e:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002b22:	f100 0e30 	add.w	lr, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002b26:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 8002b2a:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002b2c:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002b2e:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002b30:	f885 c090 	strb.w	ip, [r5, #144]	; 0x90
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002b34:	f885 e091 	strb.w	lr, [r5, #145]	; 0x91
	//*((*str)++) = '<';

	data = (uint16_t)((out->Angl + 0.0005) * 1000.0);
 8002b38:	f8d9 0014 	ldr.w	r0, [r9, #20]
	*((*str)++) = (data        ) % 10 + '0';
 8002b3c:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002b40:	f885 2094 	strb.w	r2, [r5, #148]	; 0x94
	*((*str)++) = '.';
 8002b44:	f885 7092 	strb.w	r7, [r5, #146]	; 0x92
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002b48:	f885 1093 	strb.w	r1, [r5, #147]	; 0x93
	data = (uint16_t)((out->Angl + 0.0005) * 1000.0);
 8002b4c:	f7fd fca0 	bl	8000490 <__aeabi_f2d>
 8002b50:	a331      	add	r3, pc, #196	; (adr r3, 8002c18 <uPMU_Str_Data+0x1040>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f7fd fb3d 	bl	80001d4 <__adddf3>
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	4b30      	ldr	r3, [pc, #192]	; (8002c20 <uPMU_Str_Data+0x1048>)
 8002b5e:	f7fd fceb 	bl	8000538 <__aeabi_dmul>
 8002b62:	f7fd ffab 	bl	8000abc <__aeabi_d2uiz>
 8002b66:	b282      	uxth	r2, r0

	*((*str)++) = (data / 10000) % 10 + '0';
	*((*str)++) = (data / 1000 ) % 10 + '0';
	*((*str)++) = '.';
	*((*str)++) = (data / 100  ) % 10 + '0';
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002b68:	fba6 1302 	umull	r1, r3, r6, r2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002b6c:	fbaa 1002 	umull	r1, r0, sl, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002b70:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002b72:	fba4 1b02 	umull	r1, fp, r4, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002b76:	fa1f fe83 	uxth.w	lr, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002b7a:	0981      	lsrs	r1, r0, #6
	*((*str)++) = (data        ) % 10 + '0';
 8002b7c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8002b80:	fba8 0c02 	umull	r0, ip, r8, r2
	*((*str)++) = (data        ) % 10 + '0';
 8002b84:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002b88:	fba6 0201 	umull	r0, r2, r6, r1
 8002b8c:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002b8e:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002b92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b96:	eba1 0042 	sub.w	r0, r1, r2, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002b9a:	fba6 120b 	umull	r1, r2, r6, fp
 8002b9e:	08d2      	lsrs	r2, r2, #3
 8002ba0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ba4:	ebab 0142 	sub.w	r1, fp, r2, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002ba8:	fba6 b20e 	umull	fp, r2, r6, lr
 8002bac:	08d2      	lsrs	r2, r2, #3
 8002bae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002bb2:	ebae 0242 	sub.w	r2, lr, r2, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8002bb6:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002bba:	f100 0e30 	add.w	lr, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002bbe:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 8002bc2:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002bc4:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002bc6:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002bc8:	f885 c096 	strb.w	ip, [r5, #150]	; 0x96
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002bcc:	f885 e097 	strb.w	lr, [r5, #151]	; 0x97
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002bd0:	f8d9 0028 	ldr.w	r0, [r9, #40]	; 0x28
	*((*str)++) = (data        ) % 10 + '0';
 8002bd4:	f885 309b 	strb.w	r3, [r5, #155]	; 0x9b
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002bd8:	f885 209a 	strb.w	r2, [r5, #154]	; 0x9a
	*((*str)++) = '.';
 8002bdc:	f885 7098 	strb.w	r7, [r5, #152]	; 0x98
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002be0:	f885 1099 	strb.w	r1, [r5, #153]	; 0x99
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002be4:	f7fd fc54 	bl	8000490 <__aeabi_f2d>
 8002be8:	a30b      	add	r3, pc, #44	; (adr r3, 8002c18 <uPMU_Str_Data+0x1040>)
 8002bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bee:	f7fd faf1 	bl	80001d4 <__adddf3>
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <uPMU_Str_Data+0x1048>)
 8002bf6:	f7fd fc9f 	bl	8000538 <__aeabi_dmul>
 8002bfa:	f7fd ff5f 	bl	8000abc <__aeabi_d2uiz>
 8002bfe:	b282      	uxth	r2, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002c00:	fba6 1302 	umull	r1, r3, r6, r2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002c04:	fbaa 1002 	umull	r1, r0, sl, r2
 8002c08:	e016      	b.n	8002c38 <uPMU_Str_Data+0x1060>
 8002c0a:	bf00      	nop
 8002c0c:	f3af 8000 	nop.w
 8002c10:	47ae147b 	.word	0x47ae147b
 8002c14:	3f747ae1 	.word	0x3f747ae1
 8002c18:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c1c:	3f40624d 	.word	0x3f40624d
 8002c20:	408f4000 	.word	0x408f4000
 8002c24:	40590000 	.word	0x40590000
 8002c28:	51eb851f 	.word	0x51eb851f
 8002c2c:	2001f238 	.word	0x2001f238
 8002c30:	10624dd3 	.word	0x10624dd3
 8002c34:	d1b71759 	.word	0xd1b71759
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002c38:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002c3a:	fba4 1b02 	umull	r1, fp, r4, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002c3e:	fa1f fe83 	uxth.w	lr, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002c42:	0981      	lsrs	r1, r0, #6
	*((*str)++) = (data        ) % 10 + '0';
 8002c44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8002c48:	fba8 0c02 	umull	r0, ip, r8, r2
	*((*str)++) = (data        ) % 10 + '0';
 8002c4c:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002c50:	fba6 0201 	umull	r0, r2, r6, r1
 8002c54:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002c56:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002c5a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002c5e:	eba1 0042 	sub.w	r0, r1, r2, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002c62:	fba6 120b 	umull	r1, r2, r6, fp
 8002c66:	08d2      	lsrs	r2, r2, #3
 8002c68:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002c6c:	ebab 0142 	sub.w	r1, fp, r2, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002c70:	fba6 b20e 	umull	fp, r2, r6, lr
 8002c74:	08d2      	lsrs	r2, r2, #3
 8002c76:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002c7a:	ebae 0242 	sub.w	r2, lr, r2, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8002c7e:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002c82:	f100 0e30 	add.w	lr, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002c86:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 8002c8a:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002c8c:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002c8e:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002c90:	f885 c09c 	strb.w	ip, [r5, #156]	; 0x9c
	data = (uint16_t)((out->Angl + 0.0005) * 1000.0);
 8002c94:	f8d9 002c 	ldr.w	r0, [r9, #44]	; 0x2c
	*((*str)++) = '.';
 8002c98:	f885 709e 	strb.w	r7, [r5, #158]	; 0x9e
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002c9c:	f885 e09d 	strb.w	lr, [r5, #157]	; 0x9d
	*((*str)++) = (data        ) % 10 + '0';
 8002ca0:	f885 30a1 	strb.w	r3, [r5, #161]	; 0xa1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002ca4:	f885 20a0 	strb.w	r2, [r5, #160]	; 0xa0
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002ca8:	f885 109f 	strb.w	r1, [r5, #159]	; 0x9f
	data = (uint16_t)((out->Angl + 0.0005) * 1000.0);
 8002cac:	f7fd fbf0 	bl	8000490 <__aeabi_f2d>
 8002cb0:	a375      	add	r3, pc, #468	; (adr r3, 8002e88 <uPMU_Str_Data+0x12b0>)
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	f7fd fa8d 	bl	80001d4 <__adddf3>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	4b74      	ldr	r3, [pc, #464]	; (8002e90 <uPMU_Str_Data+0x12b8>)
 8002cbe:	f7fd fc3b 	bl	8000538 <__aeabi_dmul>
 8002cc2:	f7fd fefb 	bl	8000abc <__aeabi_d2uiz>
 8002cc6:	b282      	uxth	r2, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002cc8:	fba6 1302 	umull	r1, r3, r6, r2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002ccc:	fbaa 1002 	umull	r1, r0, sl, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002cd0:	08db      	lsrs	r3, r3, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002cd2:	fba4 1b02 	umull	r1, fp, r4, r2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002cd6:	fa1f fe83 	uxth.w	lr, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002cda:	0981      	lsrs	r1, r0, #6
	*((*str)++) = (data        ) % 10 + '0';
 8002cdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10000) % 10 + '0';
 8002ce0:	fba8 0c02 	umull	r0, ip, r8, r2
	*((*str)++) = (data        ) % 10 + '0';
 8002ce4:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002ce8:	fba6 0201 	umull	r0, r2, r6, r1
 8002cec:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002cee:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002cf2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002cf6:	eba1 0042 	sub.w	r0, r1, r2, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002cfa:	fba6 120b 	umull	r1, r2, r6, fp
 8002cfe:	08d2      	lsrs	r2, r2, #3
 8002d00:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d04:	ebab 0142 	sub.w	r1, fp, r2, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002d08:	fba6 b20e 	umull	fp, r2, r6, lr
 8002d0c:	08d2      	lsrs	r2, r2, #3
 8002d0e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d12:	ebae 0242 	sub.w	r2, lr, r2, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8002d16:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002d1a:	f100 0e30 	add.w	lr, r0, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002d1e:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 8002d22:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002d24:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002d26:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002d28:	f885 c0a2 	strb.w	ip, [r5, #162]	; 0xa2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002d2c:	f885 e0a3 	strb.w	lr, [r5, #163]	; 0xa3
	*((*str)++) = (data        ) % 10 + '0';
 8002d30:	f885 30a7 	strb.w	r3, [r5, #167]	; 0xa7
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002d34:	f885 20a6 	strb.w	r2, [r5, #166]	; 0xa6
	*((*str)++) = '.';
 8002d38:	f885 70a4 	strb.w	r7, [r5, #164]	; 0xa4
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002d3c:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002d40:	f885 10a5 	strb.w	r1, [r5, #165]	; 0xa5
	uint16_t data = (uint16_t)((out->Absl + 0.0005) * 1000.0);
 8002d44:	f7fd fba4 	bl	8000490 <__aeabi_f2d>
 8002d48:	a34f      	add	r3, pc, #316	; (adr r3, 8002e88 <uPMU_Str_Data+0x12b0>)
 8002d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4e:	f7fd fa41 	bl	80001d4 <__adddf3>
 8002d52:	2200      	movs	r2, #0
 8002d54:	4b4e      	ldr	r3, [pc, #312]	; (8002e90 <uPMU_Str_Data+0x12b8>)
 8002d56:	f7fd fbef 	bl	8000538 <__aeabi_dmul>
 8002d5a:	f7fd feaf 	bl	8000abc <__aeabi_d2uiz>
 8002d5e:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002d60:	fba6 2300 	umull	r2, r3, r6, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002d64:	fbaa 2e00 	umull	r2, lr, sl, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002d68:	08db      	lsrs	r3, r3, #3
 8002d6a:	fa1f fb83 	uxth.w	fp, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002d6e:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
	*((*str)++) = (data        ) % 10 + '0';
 8002d72:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002d76:	fba4 2100 	umull	r2, r1, r4, r0
	*((*str)++) = (data / 10000) % 10 + '0';
 8002d7a:	fba8 2c00 	umull	r2, ip, r8, r0
	*((*str)++) = (data        ) % 10 + '0';
 8002d7e:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002d82:	fba6 020e 	umull	r0, r2, r6, lr
 8002d86:	08d2      	lsrs	r2, r2, #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002d88:	0949      	lsrs	r1, r1, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002d8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d8e:	ebae 0e42 	sub.w	lr, lr, r2, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002d92:	fba6 0201 	umull	r0, r2, r6, r1
 8002d96:	08d2      	lsrs	r2, r2, #3
 8002d98:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d9c:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002da0:	fba6 020b 	umull	r0, r2, r6, fp
 8002da4:	08d2      	lsrs	r2, r2, #3
 8002da6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002daa:	ebab 0242 	sub.w	r2, fp, r2, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8002dae:	ea4f 3c5c 	mov.w	ip, ip, lsr #13
 8002db2:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002db6:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 8002dba:	3330      	adds	r3, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002dbc:	3230      	adds	r2, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002dbe:	3130      	adds	r1, #48	; 0x30
	*((*str)++) = (data / 10000) % 10 + '0';
 8002dc0:	f885 c0a8 	strb.w	ip, [r5, #168]	; 0xa8
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002dc4:	f885 e0a9 	strb.w	lr, [r5, #169]	; 0xa9
	*((*str)++) = (data        ) % 10 + '0';
 8002dc8:	f885 30ad 	strb.w	r3, [r5, #173]	; 0xad
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002dcc:	f885 20ac 	strb.w	r2, [r5, #172]	; 0xac
	data = (uint16_t)((out->Angl + 0.0005) * 1000.0);
 8002dd0:	f8d9 0044 	ldr.w	r0, [r9, #68]	; 0x44
	*((*str)++) = '.';
 8002dd4:	f885 70aa 	strb.w	r7, [r5, #170]	; 0xaa
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002dd8:	f885 10ab 	strb.w	r1, [r5, #171]	; 0xab
	data = (uint16_t)((out->Angl + 0.0005) * 1000.0);
 8002ddc:	f7fd fb58 	bl	8000490 <__aeabi_f2d>
 8002de0:	a329      	add	r3, pc, #164	; (adr r3, 8002e88 <uPMU_Str_Data+0x12b0>)
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	f7fd f9f5 	bl	80001d4 <__adddf3>
 8002dea:	2200      	movs	r2, #0
 8002dec:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <uPMU_Str_Data+0x12b8>)
 8002dee:	f7fd fba3 	bl	8000538 <__aeabi_dmul>
 8002df2:	f7fd fe63 	bl	8000abc <__aeabi_d2uiz>
 8002df6:	b280      	uxth	r0, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002df8:	fba6 2300 	umull	r2, r3, r6, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002dfc:	fbaa 2a00 	umull	r2, sl, sl, r0
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002e00:	fba4 2400 	umull	r2, r4, r4, r0
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002e04:	08db      	lsrs	r3, r3, #3
 8002e06:	b29a      	uxth	r2, r3
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002e08:	ea4f 1a9a 	mov.w	sl, sl, lsr #6
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002e0c:	0964      	lsrs	r4, r4, #5
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002e0e:	fba6 1e0a 	umull	r1, lr, r6, sl
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002e12:	fba6 c104 	umull	ip, r1, r6, r4
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002e16:	fba6 c602 	umull	ip, r6, r6, r2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002e1a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002e1e:	08c9      	lsrs	r1, r1, #3
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002e20:	08f6      	lsrs	r6, r6, #3
	*((*str)++) = (data / 10000) % 10 + '0';
 8002e22:	fba8 c800 	umull	ip, r8, r8, r0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002e26:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002e2a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	*((*str)++) = (data        ) % 10 + '0';
 8002e2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002e32:	eb06 0686 	add.w	r6, r6, r6, lsl #2
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002e36:	ebaa 0a4e 	sub.w	sl, sl, lr, lsl #1
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002e3a:	eba4 0441 	sub.w	r4, r4, r1, lsl #1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002e3e:	eba2 0646 	sub.w	r6, r2, r6, lsl #1
	*((*str)++) = (data        ) % 10 + '0';
 8002e42:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
	*((*str)++) = (data / 10000) % 10 + '0';
 8002e46:	ea4f 3858 	mov.w	r8, r8, lsr #13
 8002e4a:	f108 0830 	add.w	r8, r8, #48	; 0x30
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002e4e:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002e52:	3430      	adds	r4, #48	; 0x30
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002e54:	3630      	adds	r6, #48	; 0x30
	*((*str)++) = (data        ) % 10 + '0';
 8002e56:	3030      	adds	r0, #48	; 0x30
	*str++ = '\n';
 8002e58:	210a      	movs	r1, #10
	*str++ = '\r';
 8002e5a:	220d      	movs	r2, #13
	*str++ = '\0';
 8002e5c:	2300      	movs	r3, #0
	*((*str)++) = (data / 10000) % 10 + '0';
 8002e5e:	f885 80ae 	strb.w	r8, [r5, #174]	; 0xae
	*((*str)++) = '.';
 8002e62:	f885 70b0 	strb.w	r7, [r5, #176]	; 0xb0
	*((*str)++) = (data / 1000 ) % 10 + '0';
 8002e66:	f885 a0af 	strb.w	sl, [r5, #175]	; 0xaf
	*((*str)++) = (data / 100  ) % 10 + '0';
 8002e6a:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
	*((*str)++) = (data / 10   ) % 10 + '0';
 8002e6e:	f885 60b2 	strb.w	r6, [r5, #178]	; 0xb2
	*((*str)++) = (data        ) % 10 + '0';
 8002e72:	f885 00b3 	strb.w	r0, [r5, #179]	; 0xb3
	*str++ = '\n';
 8002e76:	f885 10b4 	strb.w	r1, [r5, #180]	; 0xb4
	*str++ = '\r';
 8002e7a:	f885 20b5 	strb.w	r2, [r5, #181]	; 0xb5
	*str++ = '\0';
 8002e7e:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
}
 8002e82:	b003      	add	sp, #12
 8002e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e88:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e8c:	3f40624d 	.word	0x3f40624d
 8002e90:	408f4000 	.word	0x408f4000

08002e94 <uPMU_Send_Data>:
	//*((*str)++) = '#';

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void uPMU_Send_Data(void){
	USART2_Tx_Str(DATA_String,sizeof(DATA_String));
 8002e94:	21b7      	movs	r1, #183	; 0xb7
 8002e96:	4801      	ldr	r0, [pc, #4]	; (8002e9c <uPMU_Send_Data+0x8>)
 8002e98:	f000 b9c6 	b.w	8003228 <USART2_Tx_Str>
 8002e9c:	2001f180 	.word	0x2001f180

08002ea0 <SysTick_Init>:

volatile uint32_t SysTickCounter = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** SysTick initial configuration **/
void SysTick_Init(void) {
 8002ea0:	b538      	push	{r3, r4, r5, lr}

	/* Update clock configuration */
	SystemCoreClockUpdate();
 8002ea2:	f000 fb1b 	bl	80034dc <SystemCoreClockUpdate>

	/* Check clock configuration */
	if(SystemCoreClock != CPU_PLL_CLK) {
 8002ea6:	4a0a      	ldr	r2, [pc, #40]	; (8002ed0 <SysTick_Init+0x30>)
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <SysTick_Init+0x34>)
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d000      	beq.n	8002eb2 <SysTick_Init+0x12>
 8002eb0:	e7fe      	b.n	8002eb0 <SysTick_Init+0x10>
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <SysTick_Init+0x38>)
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002eb4:	4a09      	ldr	r2, [pc, #36]	; (8002edc <SysTick_Init+0x3c>)
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002eb6:	2100      	movs	r1, #0
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002eb8:	f641 15a1 	movw	r5, #6561	; 0x19a1
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002ebc:	24f0      	movs	r4, #240	; 0xf0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ebe:	2007      	movs	r0, #7
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002ec0:	605d      	str	r5, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002ec2:	f882 4023 	strb.w	r4, [r2, #35]	; 0x23
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002ec6:	6099      	str	r1, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ec8:	6018      	str	r0, [r3, #0]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002eca:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 8002ece:	bd38      	pop	{r3, r4, r5, pc}
 8002ed0:	20000010 	.word	0x20000010
 8002ed4:	0a037a00 	.word	0x0a037a00
 8002ed8:	e000e010 	.word	0xe000e010
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <SysTick_IncrementTicks_CallBack>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** increment SysTick counter callback **/
void SysTick_IncrementTicks_CallBack(void) {

	/* Falling Edge of the Convert Signal */
	ODR_CON_CV_BITBAND = RESET;
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <SysTick_IncrementTicks_CallBack+0x28>)

	/* Accumulate the SysTick Timer Clock */
	if(!((++SysTickCounter) % SYSTICK_ACC)){
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <SysTick_IncrementTicks_CallBack+0x2c>)
	ODR_CON_CV_BITBAND = RESET;
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	6019      	str	r1, [r3, #0]
	if(!((++SysTickCounter) % SYSTICK_ACC)){
 8002ee8:	6813      	ldr	r3, [r2, #0]
 8002eea:	3301      	adds	r3, #1
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	f013 0f01 	tst.w	r3, #1
		SysTick->LOAD  = SYSTICK_CONFIG1;
 8002ef2:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <SysTick_IncrementTicks_CallBack+0x30>)
 8002ef4:	bf0c      	ite	eq
 8002ef6:	f641 12a1 	movweq	r2, #6561	; 0x19a1
	}else{
		SysTick->LOAD  = SYSTICK_CONFIG0;
 8002efa:	f641 12a2 	movwne	r2, #6562	; 0x19a2
 8002efe:	605a      	str	r2, [r3, #4]
	}

	/* Rising Edge of the Convert Signal */
	ODR_CON_CV_BITBAND = SET;
 8002f00:	4b01      	ldr	r3, [pc, #4]	; (8002f08 <SysTick_IncrementTicks_CallBack+0x28>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	4770      	bx	lr
 8002f08:	424202a4 	.word	0x424202a4
 8002f0c:	2001f14c 	.word	0x2001f14c
 8002f10:	e000e010 	.word	0xe000e010

08002f14 <SysTick_GetCurrentTick>:
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Return current SysTick counter **/
uint32_t SysTick_GetCurrentTick(void) {
	return(SysTickCounter);
 8002f14:	4b01      	ldr	r3, [pc, #4]	; (8002f1c <SysTick_GetCurrentTick+0x8>)
 8002f16:	6818      	ldr	r0, [r3, #0]
}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	2001f14c 	.word	0x2001f14c

08002f20 <USART2_TX_DMA_Config>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Configure DMA USART2 TX  **/
void USART2_TX_DMA_Config(void){

	/* Enable DMA clock in RCC */
	RCC->AHB1ENR |= USART2_DMA_CLOCK;
 8002f20:	491f      	ldr	r1, [pc, #124]	; (8002fa0 <USART2_TX_DMA_Config+0x80>)

	/* Make sure that the DMA2 stream 7 is disabled */
	if(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_TX_STREAM->CR)) {
 8002f22:	4a20      	ldr	r2, [pc, #128]	; (8002fa4 <USART2_TX_DMA_Config+0x84>)
	RCC->AHB1ENR |= USART2_DMA_CLOCK;
 8002f24:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002f26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f2a:	630b      	str	r3, [r1, #48]	; 0x30
	if(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_TX_STREAM->CR)) {
 8002f2c:	6813      	ldr	r3, [r2, #0]
 8002f2e:	07d9      	lsls	r1, r3, #31
 8002f30:	d506      	bpl.n	8002f40 <USART2_TX_DMA_Config+0x20>

	    /* DMA 2 stream 7 is enabled, shall be disabled first */
	    USART2_TX_STREAM->CR &= ~DMA_SxCR_EN;
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	6013      	str	r3, [r2, #0]

	    /* Wait until EN bit is cleared */
	    while(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_TX_STREAM->CR));
 8002f3a:	6813      	ldr	r3, [r2, #0]
 8002f3c:	07db      	lsls	r3, r3, #31
 8002f3e:	d4fc      	bmi.n	8002f3a <USART2_TX_DMA_Config+0x1a>
	}

	/* Select the DMA USART2 STREAM CHSEL in CHSEL[2:0] in the DMA_SxCR */
	USART2_TX_STREAM->CR &= ~DMA_SxCR_CHSEL;
 8002f40:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <USART2_TX_DMA_Config+0x84>)

	/* Enable DMA transfer complete interrupt */
	USART2_TX_STREAM->CR |= DMA_SxCR_TCIE;

	/* Set peripheral address */
	USART2_TX_STREAM->PAR = (uint32_t)&USART2->DR;
 8002f42:	4919      	ldr	r1, [pc, #100]	; (8002fa8 <USART2_TX_DMA_Config+0x88>)
	USART2_TX_STREAM->CR &= ~DMA_SxCR_CHSEL;
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8002f4a:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR |= USART2_STREAM_CHSEL;
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002f52:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR |= DMA_SxCR_PL;
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002f5a:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR &= ~DMA_SxCR_DIR;
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002f62:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR |=  DMA_SxCR_DIR_0;
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f6a:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR &= ~DMA_SxCR_MSIZE;
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8002f72:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR &= ~DMA_SxCR_PSIZE;
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8002f7a:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->FCR |= DMA_SxFCR_DMDIS;
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	f042 0204 	orr.w	r2, r2, #4
 8002f82:	615a      	str	r2, [r3, #20]
	USART2_TX_STREAM->FCR |= (DMA_SxFCR_FTH_0 | DMA_SxFCR_FTH_1);
 8002f84:	695a      	ldr	r2, [r3, #20]
 8002f86:	f042 0203 	orr.w	r2, r2, #3
 8002f8a:	615a      	str	r2, [r3, #20]
	USART2_TX_STREAM->CR |= DMA_SxCR_MINC;
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f92:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->CR |= DMA_SxCR_TCIE;
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	f042 0210 	orr.w	r2, r2, #16
 8002f9a:	601a      	str	r2, [r3, #0]
	USART2_TX_STREAM->PAR = (uint32_t)&USART2->DR;
 8002f9c:	6099      	str	r1, [r3, #8]
}
 8002f9e:	4770      	bx	lr
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	400260a0 	.word	0x400260a0
 8002fa8:	40004404 	.word	0x40004404

08002fac <USART2_RX_DMA_Config>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Configure DMA USART2 RX   **/
void USART2_RX_DMA_Config(void){

	/* Enable DMA clock in RCC */
	RCC->AHB1ENR |= USART2_DMA_CLOCK;
 8002fac:	4921      	ldr	r1, [pc, #132]	; (8003034 <USART2_RX_DMA_Config+0x88>)

	/* Make sure that the DMA2 stream 5 is disabled */
	if(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_RX_STREAM->CR)) {
 8002fae:	4a22      	ldr	r2, [pc, #136]	; (8003038 <USART2_RX_DMA_Config+0x8c>)
	RCC->AHB1ENR |= USART2_DMA_CLOCK;
 8002fb0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
void USART2_RX_DMA_Config(void){
 8002fb6:	b410      	push	{r4}
	RCC->AHB1ENR |= USART2_DMA_CLOCK;
 8002fb8:	630b      	str	r3, [r1, #48]	; 0x30
	if(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_RX_STREAM->CR)) {
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	07d9      	lsls	r1, r3, #31
 8002fbe:	d506      	bpl.n	8002fce <USART2_RX_DMA_Config+0x22>

		/* DMA USART2 TX STREAM is enabled, shall be disabled first */
		USART2_RX_STREAM->CR &= ~DMA_SxCR_EN;
 8002fc0:	6813      	ldr	r3, [r2, #0]
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	6013      	str	r3, [r2, #0]

		/* Wait until EN bit is cleared */
		while(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_RX_STREAM->CR));
 8002fc8:	6813      	ldr	r3, [r2, #0]
 8002fca:	07db      	lsls	r3, r3, #31
 8002fcc:	d4fc      	bmi.n	8002fc8 <USART2_RX_DMA_Config+0x1c>
	}

	/* Select the DMA USART2 channel in CHSEL[2:0] in the DMA_SxCR */
	USART2_RX_STREAM->CR &= ~DMA_SxCR_CHSEL;
 8002fce:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <USART2_RX_DMA_Config+0x8c>)

	/* Enable DMA transfer complete interrupt */
	USART2_RX_STREAM->CR |= DMA_SxCR_TCIE;

	/* Set peripheral address */
	USART2_RX_STREAM->PAR = (uint32_t)&USART2->DR;
 8002fd0:	481a      	ldr	r0, [pc, #104]	; (800303c <USART2_RX_DMA_Config+0x90>)
	USART2_RX_STREAM->CR &= ~DMA_SxCR_CHSEL;
 8002fd2:	681a      	ldr	r2, [r3, #0]

	/* Set memory address */
	USART2_RX_STREAM->M0AR = (uint32_t)RxDMABuffer;
 8002fd4:	491a      	ldr	r1, [pc, #104]	; (8003040 <USART2_RX_DMA_Config+0x94>)
	USART2_RX_STREAM->CR &= ~DMA_SxCR_CHSEL;
 8002fd6:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8002fda:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->CR |= USART2_STREAM_CHSEL;
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002fe2:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->CR |= DMA_SxCR_PL;
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002fea:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->CR &= ~DMA_SxCR_DIR;
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002ff2:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->CR &= ~DMA_SxCR_MSIZE;
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8002ffa:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->CR &= ~DMA_SxCR_PSIZE;
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8003002:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->FCR |= DMA_SxFCR_DMDIS;
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	f042 0204 	orr.w	r2, r2, #4
 800300a:	615a      	str	r2, [r3, #20]
	USART2_RX_STREAM->FCR |= (DMA_SxFCR_FTH_0 | DMA_SxFCR_FTH_1);
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	f042 0203 	orr.w	r2, r2, #3
 8003012:	615a      	str	r2, [r3, #20]
	USART2_RX_STREAM->CR |= DMA_SxCR_MINC;
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800301a:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->CR |= DMA_SxCR_TCIE;
 800301c:	681a      	ldr	r2, [r3, #0]

	/* Set number of data items */
	USART2_RX_STREAM->NDTR = MAX_BUFFER_LENGTH;
 800301e:	2414      	movs	r4, #20
	USART2_RX_STREAM->CR |= DMA_SxCR_TCIE;
 8003020:	f042 0210 	orr.w	r2, r2, #16
 8003024:	601a      	str	r2, [r3, #0]
	USART2_RX_STREAM->PAR = (uint32_t)&USART2->DR;
 8003026:	6098      	str	r0, [r3, #8]
	USART2_RX_STREAM->M0AR = (uint32_t)RxDMABuffer;
 8003028:	60d9      	str	r1, [r3, #12]
	USART2_RX_STREAM->NDTR = MAX_BUFFER_LENGTH;
 800302a:	605c      	str	r4, [r3, #4]

}
 800302c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800
 8003038:	40026088 	.word	0x40026088
 800303c:	40004404 	.word	0x40004404
 8003040:	2001f168 	.word	0x2001f168

08003044 <uPMU_UART_Init>:
	  RCC->AHB1ENR |= USART2_GPIO_RCC_AHB1ENR;
 8003044:	4929      	ldr	r1, [pc, #164]	; (80030ec <uPMU_UART_Init+0xa8>)
	/* Configure USART2 */
	/* Enable USART2 clock */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;

	/* Select OverSampling by 16 mode */
	USART2->CR1 &= ~USART_CR1_OVER8;
 8003046:	4a2a      	ldr	r2, [pc, #168]	; (80030f0 <uPMU_UART_Init+0xac>)
	  RCC->AHB1ENR |= USART2_GPIO_RCC_AHB1ENR;
 8003048:	6b08      	ldr	r0, [r1, #48]	; 0x30
void uPMU_UART_Init(void){
 800304a:	b538      	push	{r3, r4, r5, lr}
	  RCC->AHB1ENR |= USART2_GPIO_RCC_AHB1ENR;
 800304c:	f040 0001 	orr.w	r0, r0, #1
	  USART2_GPIO_PORT->MODER   &= ~((Mode_AN	<<tx_bit) | (Mode_AN	<<rx_bit));
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <uPMU_UART_Init+0xb0>)
	  RCC->AHB1ENR |= USART2_GPIO_RCC_AHB1ENR;
 8003052:	6308      	str	r0, [r1, #48]	; 0x30
	  USART2_GPIO_PORT->MODER   &= ~((Mode_AN	<<tx_bit) | (Mode_AN	<<rx_bit));
 8003054:	6818      	ldr	r0, [r3, #0]
	  (PERIPH_BITBAND(((uint32_t)(&USART2_GPIO_PORT->OTYPER)), (tx_bit/2))) = OTYPER_PP;
 8003056:	4c28      	ldr	r4, [pc, #160]	; (80030f8 <uPMU_UART_Init+0xb4>)
	  USART2_GPIO_PORT->MODER   &= ~((Mode_AN	<<tx_bit) | (Mode_AN	<<rx_bit));
 8003058:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 800305c:	6018      	str	r0, [r3, #0]
	  USART2_GPIO_PORT->MODER   |=   (Mode_AF	<<tx_bit) | (Mode_AF	<<rx_bit);
 800305e:	6818      	ldr	r0, [r3, #0]
	  (PERIPH_BITBAND(((uint32_t)(&USART2_GPIO_PORT->OTYPER)), (tx_bit/2))) = OTYPER_PP;
 8003060:	2500      	movs	r5, #0
	  USART2_GPIO_PORT->MODER   |=   (Mode_AF	<<tx_bit) | (Mode_AF	<<rx_bit);
 8003062:	f040 00a0 	orr.w	r0, r0, #160	; 0xa0
 8003066:	6018      	str	r0, [r3, #0]
	  (PERIPH_BITBAND(((uint32_t)(&USART2_GPIO_PORT->OTYPER)), (tx_bit/2))) = OTYPER_PP;
 8003068:	6025      	str	r5, [r4, #0]
	  USART2_GPIO_PORT->AFR[(tx_bit >> 4)] |= ((uint32_t)USART2_AF << (4 * ((tx_bit/2) & 0x7)));
 800306a:	6a18      	ldr	r0, [r3, #32]
 800306c:	f440 60e0 	orr.w	r0, r0, #1792	; 0x700
 8003070:	6218      	str	r0, [r3, #32]
	  USART2_GPIO_PORT->AFR[(rx_bit >> 4)] |= ((uint32_t)USART2_AF << (4 * ((rx_bit/2) & 0x7)));
 8003072:	6a18      	ldr	r0, [r3, #32]
 8003074:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
 8003078:	6218      	str	r0, [r3, #32]
	  USART2_GPIO_PORT->OSPEEDR &=~(OSPEEDR_VERY	<<tx_bit);
 800307a:	6898      	ldr	r0, [r3, #8]
 800307c:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8003080:	6098      	str	r0, [r3, #8]
	  USART2_GPIO_PORT->OSPEEDR |= (OSPEEDR_MEDIUM	<<tx_bit);
 8003082:	6898      	ldr	r0, [r3, #8]
 8003084:	f040 0010 	orr.w	r0, r0, #16
 8003088:	6098      	str	r0, [r3, #8]
	  USART2_GPIO_PORT->PUPDR   &= ~((PUPDR_RST	<<tx_bit) | (PUPDR_RST	<<rx_bit));
 800308a:	68d8      	ldr	r0, [r3, #12]
 800308c:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8003090:	60d8      	str	r0, [r3, #12]
	  USART2_GPIO_PORT->PUPDR   |=   (PUPDR_NO	<<tx_bit) | (PUPDR_NO	<<rx_bit);
 8003092:	68d8      	ldr	r0, [r3, #12]
 8003094:	60d8      	str	r0, [r3, #12]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8003096:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309c:	640b      	str	r3, [r1, #64]	; 0x40
	USART2->CR1 &= ~USART_CR1_OVER8;
 800309e:	8993      	ldrh	r3, [r2, #12]
 80030a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80030a4:	8193      	strh	r3, [r2, #12]
	/* Select 1 Start bit, 9 Data bits, n Stop bit */
	USART2->CR1 |=  USART_CR1_M;
 80030a6:	8993      	ldrh	r3, [r2, #12]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030ae:	8193      	strh	r3, [r2, #12]
	/* Select 1 stop bit */
	USART2->CR2 &= ~USART_CR2_STOP;
 80030b0:	8a13      	ldrh	r3, [r2, #16]
 80030b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	8213      	strh	r3, [r2, #16]
	/* Enable parity control */
	USART2->CR1 |= USART_CR1_PCE;
 80030bc:	8993      	ldrh	r3, [r2, #12]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030c4:	8193      	strh	r3, [r2, #12]
	/* Select odd parity */
	USART2->CR1 |= USART_CR1_PS;
 80030c6:	8993      	ldrh	r3, [r2, #12]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ce:	8193      	strh	r3, [r2, #12]

	/* Select one sample bit method */
	USART2->CR3 |= USART_CR3_ONEBIT;
 80030d0:	8a93      	ldrh	r3, [r2, #20]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	 * DIV_Fraction = 16 * 0.82 = 13.12 = 13 = 0xD
	 * DIV_Mantissa = 48 = 0x30
	 *
	 * BRR          = 0x30D */

	USART2->BRR  = (DIV_Mantissa << 4)  + DIV_Fraction;
 80030d8:	f240 116d 	movw	r1, #365	; 0x16d
	USART2->CR3 |= USART_CR3_ONEBIT;
 80030dc:	8293      	strh	r3, [r2, #20]
	USART2->BRR  = (DIV_Mantissa << 4)  + DIV_Fraction;
 80030de:	8111      	strh	r1, [r2, #8]
	USART2_TX_DMA_Config();
 80030e0:	f7ff ff1e 	bl	8002f20 <USART2_TX_DMA_Config>
}
 80030e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	USART2_RX_DMA_Config();
 80030e8:	f7ff bf60 	b.w	8002fac <USART2_RX_DMA_Config>
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40004400 	.word	0x40004400
 80030f4:	40020000 	.word	0x40020000
 80030f8:	42400088 	.word	0x42400088

080030fc <USART2_Enable>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** Enable USART2 transmitter and receiver **/
void USART2_Enable(void){

	/* Enable USART2 */
	USART2->CR1 |= USART_CR1_UE;
 80030fc:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <USART2_Enable+0x6c>)
	/* Enable DMA mode for transmitter and receiver */
	USART2->CR3 |= USART_CR3_DMAT;
	USART2->CR3 |= USART_CR3_DMAR;

    /* Clear all interrupt flags */
    USART2_DMA->HIFCR = USART2_RX_DMA_FLAGS;
 80030fe:	481b      	ldr	r0, [pc, #108]	; (800316c <USART2_Enable+0x70>)
	USART2->CR1 |= USART_CR1_UE;
 8003100:	899a      	ldrh	r2, [r3, #12]
    /* Enable DMA 2 stream 5 */
    USART2_RX_STREAM->CR |= DMA_SxCR_EN;
 8003102:	491b      	ldr	r1, [pc, #108]	; (8003170 <USART2_Enable+0x74>)
	USART2->CR1 |= USART_CR1_UE;
 8003104:	b292      	uxth	r2, r2
 8003106:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
void USART2_Enable(void){
 800310a:	b410      	push	{r4}
	USART2->CR1 |= USART_CR1_UE;
 800310c:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_TE;
 800310e:	899a      	ldrh	r2, [r3, #12]
 8003110:	b292      	uxth	r2, r2
 8003112:	f042 0208 	orr.w	r2, r2, #8
 8003116:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_RE;
 8003118:	899a      	ldrh	r2, [r3, #12]
 800311a:	b292      	uxth	r2, r2
 800311c:	f042 0204 	orr.w	r2, r2, #4
 8003120:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;
 8003122:	899a      	ldrh	r2, [r3, #12]
 8003124:	b292      	uxth	r2, r2
 8003126:	f042 0220 	orr.w	r2, r2, #32
 800312a:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_PEIE;
 800312c:	899a      	ldrh	r2, [r3, #12]
 800312e:	b292      	uxth	r2, r2
 8003130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003134:	819a      	strh	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_IDLEIE;
 8003136:	899a      	ldrh	r2, [r3, #12]
 8003138:	b292      	uxth	r2, r2
 800313a:	f042 0210 	orr.w	r2, r2, #16
 800313e:	819a      	strh	r2, [r3, #12]
	USART2->CR3 |= USART_CR3_DMAT;
 8003140:	8a9a      	ldrh	r2, [r3, #20]
 8003142:	b292      	uxth	r2, r2
 8003144:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003148:	829a      	strh	r2, [r3, #20]
	USART2->CR3 |= USART_CR3_DMAR;
 800314a:	8a9a      	ldrh	r2, [r3, #20]
 800314c:	b292      	uxth	r2, r2
    USART2_DMA->HIFCR = USART2_RX_DMA_FLAGS;
 800314e:	f44f 6474 	mov.w	r4, #3904	; 0xf40
	USART2->CR3 |= USART_CR3_DMAR;
 8003152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003156:	829a      	strh	r2, [r3, #20]
    USART2_DMA->HIFCR = USART2_RX_DMA_FLAGS;
 8003158:	60c4      	str	r4, [r0, #12]
    USART2_RX_STREAM->CR |= DMA_SxCR_EN;
 800315a:	680b      	ldr	r3, [r1, #0]

}
 800315c:	f85d 4b04 	ldr.w	r4, [sp], #4
    USART2_RX_STREAM->CR |= DMA_SxCR_EN;
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	600b      	str	r3, [r1, #0]
}
 8003166:	4770      	bx	lr
 8003168:	40004400 	.word	0x40004400
 800316c:	40026000 	.word	0x40026000
 8003170:	40026088 	.word	0x40026088

08003174 <USART2_IRQ_CallBack>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** IRQ callback function **/
void USART2_IRQ_CallBack(void){

	/* Check if parity error detected */
	if((USART2->SR & USART_SR_PE) == USART_SR_PE){
 8003174:	4a10      	ldr	r2, [pc, #64]	; (80031b8 <USART2_IRQ_CallBack+0x44>)
 8003176:	8813      	ldrh	r3, [r2, #0]
 8003178:	07d8      	lsls	r0, r3, #31
 800317a:	d40f      	bmi.n	800319c <USART2_IRQ_CallBack+0x28>
	    /* Disable DMA stream for RX */
		USART2_RX_STREAM->CR &= ~DMA_SxCR_EN;
	}

	/* Check USART receiver */
	if((USART2->SR & USART_SR_RXNE) == USART_SR_RXNE){
 800317c:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <USART2_IRQ_CallBack+0x44>)
 800317e:	881a      	ldrh	r2, [r3, #0]
 8003180:	0692      	lsls	r2, r2, #26
 8003182:	d50a      	bpl.n	800319a <USART2_IRQ_CallBack+0x26>

		/* Read character */
		RxChar = USART2->DR;
 8003184:	480d      	ldr	r0, [pc, #52]	; (80031bc <USART2_IRQ_CallBack+0x48>)
 8003186:	889b      	ldrh	r3, [r3, #4]

		/* Set IRQ status */
		currentIRQStatus = USART2_CHAR_RECEIVED;

	    /* Disable DMA stream for RX */
		USART2_RX_STREAM->CR &= ~DMA_SxCR_EN;
 8003188:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <USART2_IRQ_CallBack+0x4c>)
		currentIRQStatus = USART2_CHAR_RECEIVED;
 800318a:	490e      	ldr	r1, [pc, #56]	; (80031c4 <USART2_IRQ_CallBack+0x50>)
		RxChar = USART2->DR;
 800318c:	7003      	strb	r3, [r0, #0]
		currentIRQStatus = USART2_CHAR_RECEIVED;
 800318e:	2301      	movs	r3, #1
 8003190:	700b      	strb	r3, [r1, #0]
		USART2_RX_STREAM->CR &= ~DMA_SxCR_EN;
 8003192:	6813      	ldr	r3, [r2, #0]
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	4770      	bx	lr
		while((USART2->SR & USART_SR_RXNE) != USART_SR_RXNE);
 800319c:	8813      	ldrh	r3, [r2, #0]
 800319e:	0699      	lsls	r1, r3, #26
 80031a0:	d5fc      	bpl.n	800319c <USART2_IRQ_CallBack+0x28>
		currentIRQStatus = USART2_PARITY_ERROR;
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <USART2_IRQ_CallBack+0x50>)
		USART2_RX_STREAM->CR &= ~DMA_SxCR_EN;
 80031a4:	4906      	ldr	r1, [pc, #24]	; (80031c0 <USART2_IRQ_CallBack+0x4c>)
		USART2->DR;
 80031a6:	8892      	ldrh	r2, [r2, #4]
		currentIRQStatus = USART2_PARITY_ERROR;
 80031a8:	2202      	movs	r2, #2
 80031aa:	701a      	strb	r2, [r3, #0]
		USART2_RX_STREAM->CR &= ~DMA_SxCR_EN;
 80031ac:	680b      	ldr	r3, [r1, #0]
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	600b      	str	r3, [r1, #0]
 80031b4:	e7e2      	b.n	800317c <USART2_IRQ_CallBack+0x8>
 80031b6:	bf00      	nop
 80031b8:	40004400 	.word	0x40004400
 80031bc:	2001f165 	.word	0x2001f165
 80031c0:	40026088 	.word	0x40026088
 80031c4:	2001f17d 	.word	0x2001f17d

080031c8 <USART2_TX_DMA_IRQ_Callback>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** IRQ callback function **/
void USART2_TX_DMA_IRQ_Callback(void){

	/* Check transfer complete flag */
	if(USART2_TX_DMA_TCIF == (USART2_TX_DMA_TCIF & USART2_DMA->HISR)) {
 80031c8:	4b03      	ldr	r3, [pc, #12]	; (80031d8 <USART2_TX_DMA_IRQ_Callback+0x10>)
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	0292      	lsls	r2, r2, #10

		/* Clear all interrupt flags */
		USART2_DMA->HIFCR = USART2_TX_DMA_FLAGS;
 80031ce:	bf44      	itt	mi
 80031d0:	f44f 1274 	movmi.w	r2, #3997696	; 0x3d0000
 80031d4:	60da      	strmi	r2, [r3, #12]
 80031d6:	4770      	bx	lr
 80031d8:	40026000 	.word	0x40026000

080031dc <USART2_RX_DMA_IRQ_Callback>:
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** IRQ callback function **/
void USART2_RX_DMA_IRQ_Callback(void){
 80031dc:	b508      	push	{r3, lr}

	/* Check transfer complete flag */
	if(USART2_RX_DMA_TCIF == (USART2_RX_DMA_TCIF & USART2_DMA->HISR))
 80031de:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <USART2_RX_DMA_IRQ_Callback+0x38>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	051b      	lsls	r3, r3, #20
 80031e4:	d515      	bpl.n	8003212 <USART2_RX_DMA_IRQ_Callback+0x36>
	  {
	    /* Calculate amount of data received */
	    RxMessageLength = MAX_BUFFER_LENGTH - USART2_RX_STREAM->NDTR;
 80031e6:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <USART2_RX_DMA_IRQ_Callback+0x3c>)
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <USART2_RX_DMA_IRQ_Callback+0x40>)
 80031ea:	6852      	ldr	r2, [r2, #4]
 80031ec:	f1c2 0214 	rsb	r2, r2, #20
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]

	    /* Copy data into RX buffer */
	    for(int idx = 0; idx < RxMessageLength; idx++) {
 80031f4:	b11a      	cbz	r2, 80031fe <USART2_RX_DMA_IRQ_Callback+0x22>
 80031f6:	490a      	ldr	r1, [pc, #40]	; (8003220 <USART2_RX_DMA_IRQ_Callback+0x44>)
 80031f8:	480a      	ldr	r0, [pc, #40]	; (8003224 <USART2_RX_DMA_IRQ_Callback+0x48>)
 80031fa:	f000 f9cb 	bl	8003594 <memcpy>
	    	/* Error detected, discard the received data */
	    	RxMessageLength = 0;
	    }

	    /* Clear all interrupt flags */
	    USART2_DMA->HIFCR = USART2_RX_DMA_FLAGS;
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <USART2_RX_DMA_IRQ_Callback+0x38>)

	    /* Enable DMA 2 stream 5 */
	    USART2_RX_STREAM->CR |= DMA_SxCR_EN;
 8003200:	4a05      	ldr	r2, [pc, #20]	; (8003218 <USART2_RX_DMA_IRQ_Callback+0x3c>)
	    USART2_DMA->HIFCR = USART2_RX_DMA_FLAGS;
 8003202:	f44f 6174 	mov.w	r1, #3904	; 0xf40
 8003206:	60d9      	str	r1, [r3, #12]
	    USART2_RX_STREAM->CR |= DMA_SxCR_EN;
 8003208:	6813      	ldr	r3, [r2, #0]
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	bd08      	pop	{r3, pc}
 8003212:	bd08      	pop	{r3, pc}
 8003214:	40026000 	.word	0x40026000
 8003218:	40026088 	.word	0x40026088
 800321c:	2001f17c 	.word	0x2001f17c
 8003220:	2001f168 	.word	0x2001f168
 8003224:	2001f150 	.word	0x2001f150

08003228 <USART2_Tx_Str>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** String Transmission **/
void USART2_Tx_Str(const char* str, uint32_t size){

	/* Check null pointers */
	if(str != NULL) {
 8003228:	b168      	cbz	r0, 8003246 <USART2_Tx_Str+0x1e>

	    /* Wait until DMA USART2 TX STREAM is disabled */
	    while(DMA_SxCR_EN == (DMA_SxCR_EN & USART2_TX_STREAM->CR));
 800322a:	4a07      	ldr	r2, [pc, #28]	; (8003248 <USART2_Tx_Str+0x20>)
 800322c:	6813      	ldr	r3, [r2, #0]
 800322e:	07db      	lsls	r3, r3, #31
 8003230:	d4fc      	bmi.n	800322c <USART2_Tx_Str+0x4>

	    /* Set number of data items */
	    USART2_TX_STREAM->NDTR = size;

	    /* Clear all interrupt flags */
	    USART2_DMA->HIFCR = USART2_TX_DMA_FLAGS;
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <USART2_Tx_Str+0x24>)
	    USART2_TX_STREAM->M0AR = (uint32_t)str;
 8003234:	60d0      	str	r0, [r2, #12]
	    USART2_DMA->HIFCR = USART2_TX_DMA_FLAGS;
 8003236:	f44f 1074 	mov.w	r0, #3997696	; 0x3d0000
	    USART2_TX_STREAM->NDTR = size;
 800323a:	6051      	str	r1, [r2, #4]
	    USART2_DMA->HIFCR = USART2_TX_DMA_FLAGS;
 800323c:	60d8      	str	r0, [r3, #12]

	    /* Enable DMA1 stream 6 */
	    USART2_TX_STREAM->CR |= DMA_SxCR_EN;
 800323e:	6813      	ldr	r3, [r2, #0]
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4770      	bx	lr
 8003248:	400260a0 	.word	0x400260a0
 800324c:	40026000 	.word	0x40026000

08003250 <main>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/** main function */
int main(void) {

#if (__FPU_USED == 1)
    SCB->CPACR |= (3UL << 20) | (3UL << 22);
 8003250:	4a0d      	ldr	r2, [pc, #52]	; (8003288 <main+0x38>)
int main(void) {
 8003252:	b508      	push	{r3, lr}
    SCB->CPACR |= (3UL << 20) | (3UL << 22);
 8003254:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800325c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 8003260:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
 8003264:	f3bf 8f6f 	isb	sy
   __DSB();
   __ISB();
#endif

	SysTick_Init();
 8003268:	f7ff fe1a 	bl	8002ea0 <SysTick_Init>
	OnBoard_Init();
 800326c:	f7fe fa84 	bl	8001778 <OnBoard_Init>

	uPMU_GPIO_Init();
 8003270:	f7fe f980 	bl	8001574 <uPMU_GPIO_Init>
	uPMU_NVIC_Init();
 8003274:	f7fe fb82 	bl	800197c <uPMU_NVIC_Init>
	uPMU_UART_Init();
 8003278:	f7ff fee4 	bl	8003044 <uPMU_UART_Init>

	uPMU_Init_Process();
 800327c:	f7fe fbb6 	bl	80019ec <uPMU_Init_Process>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8003280:	b662      	cpsie	i

	/* Clear PRIMASK, enable IRQs */
	__enable_irq();
	USART2_Enable();
 8003282:	f7ff ff3b 	bl	80030fc <USART2_Enable>
 8003286:	e7fe      	b.n	8003286 <main+0x36>
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800328c:	f8df d038 	ldr.w	sp, [pc, #56]	; 80032c8 <LoopFillZerobss+0x16>

  /* Disable interrupt (set PRIMASK) */
  CPSID i
 8003290:	b672      	cpsid	i

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003292:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003294:	e003      	b.n	800329e <LoopCopyDataInit>

08003296 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003296:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8003298:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800329a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800329c:	3104      	adds	r1, #4

0800329e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800329e:	480c      	ldr	r0, [pc, #48]	; (80032d0 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 80032a2:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032a4:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032a6:	d3f6      	bcc.n	8003296 <CopyDataInit>
  ldr  r2, =_sbss
 80032a8:	4a0b      	ldr	r2, [pc, #44]	; (80032d8 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 80032aa:	e002      	b.n	80032b2 <LoopFillZerobss>

080032ac <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032ac:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032ae:	f842 3b04 	str.w	r3, [r2], #4

080032b2 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 80032b4:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032b6:	d3f9      	bcc.n	80032ac <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032b8:	f000 f888 	bl	80033cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032bc:	f000 f946 	bl	800354c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032c0:	f7ff ffc6 	bl	8003250 <main>
  bx  lr    
 80032c4:	4770      	bx	lr
 80032c6:	0000      	.short	0x0000
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032cc:	080048b8 	.word	0x080048b8
  ldr  r0, =_sdata
 80032d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032d4:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 80032d8:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 80032dc:	2001f2e0 	.word	0x2001f2e0

080032e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032e0:	e7fe      	b.n	80032e0 <ADC_IRQHandler>
	...

080032e4 <NMI_Handler>:
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop

080032e8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80032e8:	e7fe      	b.n	80032e8 <HardFault_Handler>
 80032ea:	bf00      	nop

080032ec <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80032ec:	e7fe      	b.n	80032ec <MemManage_Handler>
 80032ee:	bf00      	nop

080032f0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80032f0:	e7fe      	b.n	80032f0 <BusFault_Handler>
 80032f2:	bf00      	nop

080032f4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80032f4:	e7fe      	b.n	80032f4 <UsageFault_Handler>
 80032f6:	bf00      	nop

080032f8 <SVC_Handler>:
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop

080032fc <DebugMon_Handler>:
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop

08003300 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop

08003304 <SysTick_Handler>:
/**
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void){
 8003304:	b508      	push	{r3, lr}

	SysTick_IncrementTicks_CallBack();
 8003306:	f7ff fdeb 	bl	8002ee0 <SysTick_IncrementTicks_CallBack>

	/* Display Error Code */
	if(!(SysTick_GetCurrentTick() % SYSTICK_ERROR_CODE_DELAY)){
		//uPMU_Error_Code_Display();
	}
}
 800330a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if(!(SysTick_GetCurrentTick() % SYSTICK_ERROR_CODE_DELAY)){
 800330e:	f7ff be01 	b.w	8002f14 <SysTick_GetCurrentTick>
 8003312:	bf00      	nop

08003314 <EXTI0_IRQHandler>:

/* STM32F4xx Peripherals Interrupt Handlers */
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set EXTI0 interrupt handlers */
void EXTI0_IRQHandler(void) {
 8003314:	b508      	push	{r3, lr}

	static uint8_t count = 0;

	if(EXTI_Line_Check(BUTTON_USER_Line)){
 8003316:	2001      	movs	r0, #1
 8003318:	f7fe f910 	bl	800153c <EXTI_Line_Check>
 800331c:	b900      	cbnz	r0, 8003320 <EXTI0_IRQHandler+0xc>
 800331e:	bd08      	pop	{r3, pc}

		/* Do your stuff when EXTI Line 0 */
		uPMU_Set_Error_Code(++count);
 8003320:	4a06      	ldr	r2, [pc, #24]	; (800333c <EXTI0_IRQHandler+0x28>)
 8003322:	7813      	ldrb	r3, [r2, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	b2db      	uxtb	r3, r3
 8003328:	4618      	mov	r0, r3
 800332a:	7013      	strb	r3, [r2, #0]
 800332c:	f7fe fb20 	bl	8001970 <uPMU_Set_Error_Code>

	    /* Clear interrupt flag */
		EXTI_Clear_PendingBit(BUTTON_USER_Line);
 8003330:	2001      	movs	r0, #1
	}

}
 8003332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		EXTI_Clear_PendingBit(BUTTON_USER_Line);
 8003336:	f7fe b90f 	b.w	8001558 <EXTI_Clear_PendingBit>
 800333a:	bf00      	nop
 800333c:	2001f17e 	.word	0x2001f17e

08003340 <EXTI1_IRQHandler>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set EXTI1 interrupt handlers */
void EXTI1_IRQHandler(void) {
 8003340:	b508      	push	{r3, lr}

	if(EXTI_Line_Check(uPMU_PROCESS_Line)){
 8003342:	2002      	movs	r0, #2
 8003344:	f7fe f8fa 	bl	800153c <EXTI_Line_Check>
 8003348:	b900      	cbnz	r0, 800334c <EXTI1_IRQHandler+0xc>
 800334a:	bd08      	pop	{r3, pc}

		/* Do your stuff when EXTI Line 0 */
		uPMU_Str_Data();
 800334c:	f7fe fc44 	bl	8001bd8 <uPMU_Str_Data>
		uPMU_Send_Data();
 8003350:	f7ff fda0 	bl	8002e94 <uPMU_Send_Data>

	    /* Clear interrupt flag */
		EXTI_Clear_PendingBit(uPMU_PROCESS_Line);
 8003354:	2002      	movs	r0, #2
	}

}
 8003356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		EXTI_Clear_PendingBit(uPMU_PROCESS_Line);
 800335a:	f7fe b8fd 	b.w	8001558 <EXTI_Clear_PendingBit>
 800335e:	bf00      	nop

08003360 <EXTI15_10_IRQHandler>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set EXTI15_10 interrupt handlers */
void EXTI15_10_IRQHandler(void) {
 8003360:	b510      	push	{r4, lr}

 	if(EXTI_Line_Check(CON_ABUSY_Line) | EXTI_Line_Check(CON_BBUSY_Line)){
 8003362:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003366:	f7fe f8e9 	bl	800153c <EXTI_Line_Check>
 800336a:	4604      	mov	r4, r0
 800336c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003370:	f7fe f8e4 	bl	800153c <EXTI_Line_Check>
 8003374:	4320      	orrs	r0, r4
 8003376:	f010 0fff 	tst.w	r0, #255	; 0xff
 800337a:	d100      	bne.n	800337e <EXTI15_10_IRQHandler+0x1e>
 800337c:	bd10      	pop	{r4, pc}

		/* Do your stuff when EXTI Line 0 */
		uPMU_AD7606_Reading();
 800337e:	f7fe fb37 	bl	80019f0 <uPMU_AD7606_Reading>

	    /* Clear interrupt flag */
		EXTI_Clear_PendingBit(CON_ABUSY_Line);
 8003382:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003386:	f7fe f8e7 	bl	8001558 <EXTI_Clear_PendingBit>
		EXTI_Clear_PendingBit(CON_BBUSY_Line);
 800338a:	f44f 5080 	mov.w	r0, #4096	; 0x1000

	}

}
 800338e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		EXTI_Clear_PendingBit(CON_BBUSY_Line);
 8003392:	f7fe b8e1 	b.w	8001558 <EXTI_Clear_PendingBit>
 8003396:	bf00      	nop

08003398 <DMA2_Stream0_IRQHandler>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set DMA2_Stream0 interrupt handlers */
void DMA2_Stream0_IRQHandler(void){
 8003398:	b510      	push	{r4, lr}
	  /* Check transfer complete flag */
	  if(DMA_LISR_TCIF0 == (DMA_LISR_TCIF0 & DMA2->LISR))
 800339a:	4c08      	ldr	r4, [pc, #32]	; (80033bc <DMA2_Stream0_IRQHandler+0x24>)
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	069b      	lsls	r3, r3, #26
 80033a0:	d405      	bmi.n	80033ae <DMA2_Stream0_IRQHandler+0x16>
	    DMA2->LIFCR = DMA_LIFCR_CTCIF0;
	  }
	  else
	  {
	    /* Turn on red LED, this interrupt is not handled */
			GPIO_Write_LED(LED4, High);
 80033a2:	2101      	movs	r1, #1
 80033a4:	200c      	movs	r0, #12
	  }
}
 80033a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			GPIO_Write_LED(LED4, High);
 80033aa:	f7fe bac5 	b.w	8001938 <GPIO_Write_LED>
			GPIO_Write_LED(LED3, Low);
 80033ae:	2100      	movs	r1, #0
 80033b0:	200d      	movs	r0, #13
 80033b2:	f7fe fac1 	bl	8001938 <GPIO_Write_LED>
	    DMA2->LIFCR = DMA_LIFCR_CTCIF0;
 80033b6:	2320      	movs	r3, #32
 80033b8:	60a3      	str	r3, [r4, #8]
 80033ba:	bd10      	pop	{r4, pc}
 80033bc:	40026400 	.word	0x40026400

080033c0 <DMA1_Stream5_IRQHandler>:

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set DMA1_Stream5 interrupt handlers */
void DMA1_Stream5_IRQHandler(void) {
	USART2_RX_DMA_IRQ_Callback();
 80033c0:	f7ff bf0c 	b.w	80031dc <USART2_RX_DMA_IRQ_Callback>

080033c4 <DMA1_Stream6_IRQHandler>:
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set DMA1_Stream1 interrupt handlers */
void DMA1_Stream6_IRQHandler(void) {
	USART2_TX_DMA_IRQ_Callback();
 80033c4:	f7ff bf00 	b.w	80031c8 <USART2_TX_DMA_IRQ_Callback>

080033c8 <USART2_IRQHandler>:
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Set USART2 interrupt handlers */
void USART2_IRQHandler(void) {
	USART2_IRQ_CallBack();
 80033c8:	f7ff bed4 	b.w	8003174 <USART2_IRQ_CallBack>

080033cc <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80033cc:	4b3c      	ldr	r3, [pc, #240]	; (80034c0 <SystemInit+0xf4>)

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80033ce:	483d      	ldr	r0, [pc, #244]	; (80034c4 <SystemInit+0xf8>)
  RCC->CR |= (uint32_t)0x00000001;
 80033d0:	681a      	ldr	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80033d2:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80033da:	6099      	str	r1, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80033e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80033e6:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 80033e8:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80033ea:	681a      	ldr	r2, [r3, #0]
{
 80033ec:	b082      	sub	sp, #8
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80033ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033f2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80033f4:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80033f6:	9100      	str	r1, [sp, #0]
 80033f8:	9101      	str	r1, [sp, #4]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003400:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003402:	461a      	mov	r2, r3
 8003404:	e003      	b.n	800340e <SystemInit+0x42>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003406:	9b00      	ldr	r3, [sp, #0]
 8003408:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800340c:	d009      	beq.n	8003422 <SystemInit+0x56>
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800340e:	6813      	ldr	r3, [r2, #0]
 8003410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003414:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8003416:	9b00      	ldr	r3, [sp, #0]
 8003418:	3301      	adds	r3, #1
 800341a:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800341c:	9b01      	ldr	r3, [sp, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f1      	beq.n	8003406 <SystemInit+0x3a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003422:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <SystemInit+0xf4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 800342a:	bf18      	it	ne
 800342c:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800342e:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003430:	9b01      	ldr	r3, [sp, #4]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d014      	beq.n	8003460 <SystemInit+0x94>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8003436:	4a22      	ldr	r2, [pc, #136]	; (80034c0 <SystemInit+0xf4>)

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8003438:	4923      	ldr	r1, [pc, #140]	; (80034c8 <SystemInit+0xfc>)
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 800343a:	6893      	ldr	r3, [r2, #8]
 800343c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003440:	6093      	str	r3, [r2, #8]
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8003442:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8003446:	6813      	ldr	r3, [r2, #0]
 8003448:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800344c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 800344e:	6813      	ldr	r3, [r2, #0]
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	d5fc      	bpl.n	800344e <SystemInit+0x82>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <SystemInit+0x100>)
 8003456:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	b002      	add	sp, #8
 800345e:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003460:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <SystemInit+0xf4>)
    PWR->CR |= PWR_CR_PMODE;
 8003462:	491b      	ldr	r1, [pc, #108]	; (80034d0 <SystemInit+0x104>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003466:	481b      	ldr	r0, [pc, #108]	; (80034d4 <SystemInit+0x108>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003468:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;
 800346e:	680a      	ldr	r2, [r1, #0]
 8003470:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003474:	600a      	str	r2, [r1, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003480:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8003488:	609a      	str	r2, [r3, #8]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800348a:	6058      	str	r0, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003492:	601a      	str	r2, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	0192      	lsls	r2, r2, #6
 8003498:	d5fc      	bpl.n	8003494 <SystemInit+0xc8>
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800349a:	490f      	ldr	r1, [pc, #60]	; (80034d8 <SystemInit+0x10c>)
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800349c:	4a08      	ldr	r2, [pc, #32]	; (80034c0 <SystemInit+0xf4>)
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800349e:	f240 6005 	movw	r0, #1541	; 0x605
 80034a2:	6008      	str	r0, [r1, #0]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80034a4:	6899      	ldr	r1, [r3, #8]
 80034a6:	f021 0103 	bic.w	r1, r1, #3
 80034aa:	6099      	str	r1, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80034ac:	6899      	ldr	r1, [r3, #8]
 80034ae:	f041 0102 	orr.w	r1, r1, #2
 80034b2:	6099      	str	r1, [r3, #8]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80034b4:	6893      	ldr	r3, [r2, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d1fa      	bne.n	80034b4 <SystemInit+0xe8>
 80034be:	e7ba      	b.n	8003436 <SystemInit+0x6a>
 80034c0:	40023800 	.word	0x40023800
 80034c4:	24003010 	.word	0x24003010
 80034c8:	50003000 	.word	0x50003000
 80034cc:	e000ed00 	.word	0xe000ed00
 80034d0:	40007000 	.word	0x40007000
 80034d4:	07405408 	.word	0x07405408
 80034d8:	40023c00 	.word	0x40023c00

080034dc <SystemCoreClockUpdate>:
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80034dc:	4a16      	ldr	r2, [pc, #88]	; (8003538 <SystemCoreClockUpdate+0x5c>)
 80034de:	6893      	ldr	r3, [r2, #8]
 80034e0:	f003 030c 	and.w	r3, r3, #12
  switch (tmp)
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d024      	beq.n	8003532 <SystemCoreClockUpdate+0x56>
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d00a      	beq.n	8003502 <SystemCoreClockUpdate+0x26>
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <SystemCoreClockUpdate+0x60>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80034ee:	4a12      	ldr	r2, [pc, #72]	; (8003538 <SystemCoreClockUpdate+0x5c>)
 80034f0:	4813      	ldr	r0, [pc, #76]	; (8003540 <SystemCoreClockUpdate+0x64>)
 80034f2:	6892      	ldr	r2, [r2, #8]
  SystemCoreClock >>= tmp;
 80034f4:	4913      	ldr	r1, [pc, #76]	; (8003544 <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80034f6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80034fa:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 80034fc:	40d3      	lsrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
 8003500:	4770      	bx	lr
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003502:	6850      	ldr	r0, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003504:	6851      	ldr	r1, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003506:	6852      	ldr	r2, [r2, #4]
      if (pllsource != 0)
 8003508:	0243      	lsls	r3, r0, #9
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800350a:	f3c2 1288 	ubfx	r2, r2, #6, #9
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800350e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003512:	bf4c      	ite	mi
 8003514:	4b0c      	ldrmi	r3, [pc, #48]	; (8003548 <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003516:	4b09      	ldrpl	r3, [pc, #36]	; (800353c <SystemCoreClockUpdate+0x60>)
 8003518:	fbb3 f3f1 	udiv	r3, r3, r1
 800351c:	fb03 f302 	mul.w	r3, r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003520:	4a05      	ldr	r2, [pc, #20]	; (8003538 <SystemCoreClockUpdate+0x5c>)
 8003522:	6852      	ldr	r2, [r2, #4]
 8003524:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8003528:	3201      	adds	r2, #1
 800352a:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 800352c:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8003530:	e7dd      	b.n	80034ee <SystemCoreClockUpdate+0x12>
  switch (tmp)
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <SystemCoreClockUpdate+0x6c>)
 8003534:	e7db      	b.n	80034ee <SystemCoreClockUpdate+0x12>
 8003536:	bf00      	nop
 8003538:	40023800 	.word	0x40023800
 800353c:	00f42400 	.word	0x00f42400
 8003540:	20000000 	.word	0x20000000
 8003544:	20000010 	.word	0x20000010
 8003548:	007a1200 	.word	0x007a1200

0800354c <__libc_init_array>:
 800354c:	b570      	push	{r4, r5, r6, lr}
 800354e:	4e0d      	ldr	r6, [pc, #52]	; (8003584 <__libc_init_array+0x38>)
 8003550:	4c0d      	ldr	r4, [pc, #52]	; (8003588 <__libc_init_array+0x3c>)
 8003552:	1ba4      	subs	r4, r4, r6
 8003554:	10a4      	asrs	r4, r4, #2
 8003556:	2500      	movs	r5, #0
 8003558:	42a5      	cmp	r5, r4
 800355a:	d109      	bne.n	8003570 <__libc_init_array+0x24>
 800355c:	4e0b      	ldr	r6, [pc, #44]	; (800358c <__libc_init_array+0x40>)
 800355e:	4c0c      	ldr	r4, [pc, #48]	; (8003590 <__libc_init_array+0x44>)
 8003560:	f001 f8ae 	bl	80046c0 <_init>
 8003564:	1ba4      	subs	r4, r4, r6
 8003566:	10a4      	asrs	r4, r4, #2
 8003568:	2500      	movs	r5, #0
 800356a:	42a5      	cmp	r5, r4
 800356c:	d105      	bne.n	800357a <__libc_init_array+0x2e>
 800356e:	bd70      	pop	{r4, r5, r6, pc}
 8003570:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003574:	4798      	blx	r3
 8003576:	3501      	adds	r5, #1
 8003578:	e7ee      	b.n	8003558 <__libc_init_array+0xc>
 800357a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800357e:	4798      	blx	r3
 8003580:	3501      	adds	r5, #1
 8003582:	e7f2      	b.n	800356a <__libc_init_array+0x1e>
 8003584:	080048b0 	.word	0x080048b0
 8003588:	080048b0 	.word	0x080048b0
 800358c:	080048b0 	.word	0x080048b0
 8003590:	080048b4 	.word	0x080048b4

08003594 <memcpy>:
 8003594:	b510      	push	{r4, lr}
 8003596:	1e43      	subs	r3, r0, #1
 8003598:	440a      	add	r2, r1
 800359a:	4291      	cmp	r1, r2
 800359c:	d100      	bne.n	80035a0 <memcpy+0xc>
 800359e:	bd10      	pop	{r4, pc}
 80035a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035a8:	e7f7      	b.n	800359a <memcpy+0x6>
 80035aa:	0000      	movs	r0, r0
 80035ac:	0000      	movs	r0, r0
	...

080035b0 <cos>:
 80035b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80035b2:	ec51 0b10 	vmov	r0, r1, d0
 80035b6:	4a1e      	ldr	r2, [pc, #120]	; (8003630 <cos+0x80>)
 80035b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80035bc:	4293      	cmp	r3, r2
 80035be:	dc06      	bgt.n	80035ce <cos+0x1e>
 80035c0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8003628 <cos+0x78>
 80035c4:	f000 fa74 	bl	8003ab0 <__kernel_cos>
 80035c8:	ec51 0b10 	vmov	r0, r1, d0
 80035cc:	e007      	b.n	80035de <cos+0x2e>
 80035ce:	4a19      	ldr	r2, [pc, #100]	; (8003634 <cos+0x84>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	dd09      	ble.n	80035e8 <cos+0x38>
 80035d4:	ee10 2a10 	vmov	r2, s0
 80035d8:	460b      	mov	r3, r1
 80035da:	f7fc fdf9 	bl	80001d0 <__aeabi_dsub>
 80035de:	ec41 0b10 	vmov	d0, r0, r1
 80035e2:	b005      	add	sp, #20
 80035e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80035e8:	4668      	mov	r0, sp
 80035ea:	f000 f86d 	bl	80036c8 <__ieee754_rem_pio2>
 80035ee:	f000 0003 	and.w	r0, r0, #3
 80035f2:	2801      	cmp	r0, #1
 80035f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80035f8:	ed9d 0b00 	vldr	d0, [sp]
 80035fc:	d007      	beq.n	800360e <cos+0x5e>
 80035fe:	2802      	cmp	r0, #2
 8003600:	d00e      	beq.n	8003620 <cos+0x70>
 8003602:	2800      	cmp	r0, #0
 8003604:	d0de      	beq.n	80035c4 <cos+0x14>
 8003606:	2001      	movs	r0, #1
 8003608:	f000 fe8a 	bl	8004320 <__kernel_sin>
 800360c:	e7dc      	b.n	80035c8 <cos+0x18>
 800360e:	f000 fe87 	bl	8004320 <__kernel_sin>
 8003612:	ec53 2b10 	vmov	r2, r3, d0
 8003616:	ee10 0a10 	vmov	r0, s0
 800361a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800361e:	e7de      	b.n	80035de <cos+0x2e>
 8003620:	f000 fa46 	bl	8003ab0 <__kernel_cos>
 8003624:	e7f5      	b.n	8003612 <cos+0x62>
 8003626:	bf00      	nop
	...
 8003630:	3fe921fb 	.word	0x3fe921fb
 8003634:	7fefffff 	.word	0x7fefffff

08003638 <sin>:
 8003638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800363a:	ec51 0b10 	vmov	r0, r1, d0
 800363e:	4a20      	ldr	r2, [pc, #128]	; (80036c0 <sin+0x88>)
 8003640:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003644:	4293      	cmp	r3, r2
 8003646:	dc07      	bgt.n	8003658 <sin+0x20>
 8003648:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80036b8 <sin+0x80>
 800364c:	2000      	movs	r0, #0
 800364e:	f000 fe67 	bl	8004320 <__kernel_sin>
 8003652:	ec51 0b10 	vmov	r0, r1, d0
 8003656:	e007      	b.n	8003668 <sin+0x30>
 8003658:	4a1a      	ldr	r2, [pc, #104]	; (80036c4 <sin+0x8c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	dd09      	ble.n	8003672 <sin+0x3a>
 800365e:	ee10 2a10 	vmov	r2, s0
 8003662:	460b      	mov	r3, r1
 8003664:	f7fc fdb4 	bl	80001d0 <__aeabi_dsub>
 8003668:	ec41 0b10 	vmov	d0, r0, r1
 800366c:	b005      	add	sp, #20
 800366e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003672:	4668      	mov	r0, sp
 8003674:	f000 f828 	bl	80036c8 <__ieee754_rem_pio2>
 8003678:	f000 0003 	and.w	r0, r0, #3
 800367c:	2801      	cmp	r0, #1
 800367e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003682:	ed9d 0b00 	vldr	d0, [sp]
 8003686:	d004      	beq.n	8003692 <sin+0x5a>
 8003688:	2802      	cmp	r0, #2
 800368a:	d005      	beq.n	8003698 <sin+0x60>
 800368c:	b970      	cbnz	r0, 80036ac <sin+0x74>
 800368e:	2001      	movs	r0, #1
 8003690:	e7dd      	b.n	800364e <sin+0x16>
 8003692:	f000 fa0d 	bl	8003ab0 <__kernel_cos>
 8003696:	e7dc      	b.n	8003652 <sin+0x1a>
 8003698:	2001      	movs	r0, #1
 800369a:	f000 fe41 	bl	8004320 <__kernel_sin>
 800369e:	ec53 2b10 	vmov	r2, r3, d0
 80036a2:	ee10 0a10 	vmov	r0, s0
 80036a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80036aa:	e7dd      	b.n	8003668 <sin+0x30>
 80036ac:	f000 fa00 	bl	8003ab0 <__kernel_cos>
 80036b0:	e7f5      	b.n	800369e <sin+0x66>
 80036b2:	bf00      	nop
 80036b4:	f3af 8000 	nop.w
	...
 80036c0:	3fe921fb 	.word	0x3fe921fb
 80036c4:	7fefffff 	.word	0x7fefffff

080036c8 <__ieee754_rem_pio2>:
 80036c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036cc:	ec57 6b10 	vmov	r6, r7, d0
 80036d0:	4bc3      	ldr	r3, [pc, #780]	; (80039e0 <__ieee754_rem_pio2+0x318>)
 80036d2:	b08d      	sub	sp, #52	; 0x34
 80036d4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80036d8:	4598      	cmp	r8, r3
 80036da:	4604      	mov	r4, r0
 80036dc:	9704      	str	r7, [sp, #16]
 80036de:	dc07      	bgt.n	80036f0 <__ieee754_rem_pio2+0x28>
 80036e0:	2200      	movs	r2, #0
 80036e2:	2300      	movs	r3, #0
 80036e4:	ed84 0b00 	vstr	d0, [r4]
 80036e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80036ec:	2500      	movs	r5, #0
 80036ee:	e027      	b.n	8003740 <__ieee754_rem_pio2+0x78>
 80036f0:	4bbc      	ldr	r3, [pc, #752]	; (80039e4 <__ieee754_rem_pio2+0x31c>)
 80036f2:	4598      	cmp	r8, r3
 80036f4:	dc75      	bgt.n	80037e2 <__ieee754_rem_pio2+0x11a>
 80036f6:	9b04      	ldr	r3, [sp, #16]
 80036f8:	4dbb      	ldr	r5, [pc, #748]	; (80039e8 <__ieee754_rem_pio2+0x320>)
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	ee10 0a10 	vmov	r0, s0
 8003700:	a3a9      	add	r3, pc, #676	; (adr r3, 80039a8 <__ieee754_rem_pio2+0x2e0>)
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	4639      	mov	r1, r7
 8003708:	dd36      	ble.n	8003778 <__ieee754_rem_pio2+0xb0>
 800370a:	f7fc fd61 	bl	80001d0 <__aeabi_dsub>
 800370e:	45a8      	cmp	r8, r5
 8003710:	4606      	mov	r6, r0
 8003712:	460f      	mov	r7, r1
 8003714:	d018      	beq.n	8003748 <__ieee754_rem_pio2+0x80>
 8003716:	a3a6      	add	r3, pc, #664	; (adr r3, 80039b0 <__ieee754_rem_pio2+0x2e8>)
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	f7fc fd58 	bl	80001d0 <__aeabi_dsub>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	e9c4 2300 	strd	r2, r3, [r4]
 8003728:	4630      	mov	r0, r6
 800372a:	4639      	mov	r1, r7
 800372c:	f7fc fd50 	bl	80001d0 <__aeabi_dsub>
 8003730:	a39f      	add	r3, pc, #636	; (adr r3, 80039b0 <__ieee754_rem_pio2+0x2e8>)
 8003732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003736:	f7fc fd4b 	bl	80001d0 <__aeabi_dsub>
 800373a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800373e:	2501      	movs	r5, #1
 8003740:	4628      	mov	r0, r5
 8003742:	b00d      	add	sp, #52	; 0x34
 8003744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003748:	a39b      	add	r3, pc, #620	; (adr r3, 80039b8 <__ieee754_rem_pio2+0x2f0>)
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f7fc fd3f 	bl	80001d0 <__aeabi_dsub>
 8003752:	a39b      	add	r3, pc, #620	; (adr r3, 80039c0 <__ieee754_rem_pio2+0x2f8>)
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	4606      	mov	r6, r0
 800375a:	460f      	mov	r7, r1
 800375c:	f7fc fd38 	bl	80001d0 <__aeabi_dsub>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	e9c4 2300 	strd	r2, r3, [r4]
 8003768:	4630      	mov	r0, r6
 800376a:	4639      	mov	r1, r7
 800376c:	f7fc fd30 	bl	80001d0 <__aeabi_dsub>
 8003770:	a393      	add	r3, pc, #588	; (adr r3, 80039c0 <__ieee754_rem_pio2+0x2f8>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	e7de      	b.n	8003736 <__ieee754_rem_pio2+0x6e>
 8003778:	f7fc fd2c 	bl	80001d4 <__adddf3>
 800377c:	45a8      	cmp	r8, r5
 800377e:	4606      	mov	r6, r0
 8003780:	460f      	mov	r7, r1
 8003782:	d016      	beq.n	80037b2 <__ieee754_rem_pio2+0xea>
 8003784:	a38a      	add	r3, pc, #552	; (adr r3, 80039b0 <__ieee754_rem_pio2+0x2e8>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f7fc fd23 	bl	80001d4 <__adddf3>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	e9c4 2300 	strd	r2, r3, [r4]
 8003796:	4630      	mov	r0, r6
 8003798:	4639      	mov	r1, r7
 800379a:	f7fc fd19 	bl	80001d0 <__aeabi_dsub>
 800379e:	a384      	add	r3, pc, #528	; (adr r3, 80039b0 <__ieee754_rem_pio2+0x2e8>)
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	f7fc fd16 	bl	80001d4 <__adddf3>
 80037a8:	f04f 35ff 	mov.w	r5, #4294967295
 80037ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80037b0:	e7c6      	b.n	8003740 <__ieee754_rem_pio2+0x78>
 80037b2:	a381      	add	r3, pc, #516	; (adr r3, 80039b8 <__ieee754_rem_pio2+0x2f0>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f7fc fd0c 	bl	80001d4 <__adddf3>
 80037bc:	a380      	add	r3, pc, #512	; (adr r3, 80039c0 <__ieee754_rem_pio2+0x2f8>)
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	4606      	mov	r6, r0
 80037c4:	460f      	mov	r7, r1
 80037c6:	f7fc fd05 	bl	80001d4 <__adddf3>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	e9c4 2300 	strd	r2, r3, [r4]
 80037d2:	4630      	mov	r0, r6
 80037d4:	4639      	mov	r1, r7
 80037d6:	f7fc fcfb 	bl	80001d0 <__aeabi_dsub>
 80037da:	a379      	add	r3, pc, #484	; (adr r3, 80039c0 <__ieee754_rem_pio2+0x2f8>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	e7e0      	b.n	80037a4 <__ieee754_rem_pio2+0xdc>
 80037e2:	4b82      	ldr	r3, [pc, #520]	; (80039ec <__ieee754_rem_pio2+0x324>)
 80037e4:	4598      	cmp	r8, r3
 80037e6:	f300 80d0 	bgt.w	800398a <__ieee754_rem_pio2+0x2c2>
 80037ea:	f000 fe53 	bl	8004494 <fabs>
 80037ee:	ec57 6b10 	vmov	r6, r7, d0
 80037f2:	ee10 0a10 	vmov	r0, s0
 80037f6:	a374      	add	r3, pc, #464	; (adr r3, 80039c8 <__ieee754_rem_pio2+0x300>)
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	4639      	mov	r1, r7
 80037fe:	f7fc fe9b 	bl	8000538 <__aeabi_dmul>
 8003802:	2200      	movs	r2, #0
 8003804:	4b7a      	ldr	r3, [pc, #488]	; (80039f0 <__ieee754_rem_pio2+0x328>)
 8003806:	f7fc fce5 	bl	80001d4 <__adddf3>
 800380a:	f7fd f92f 	bl	8000a6c <__aeabi_d2iz>
 800380e:	4605      	mov	r5, r0
 8003810:	f7fc fe2c 	bl	800046c <__aeabi_i2d>
 8003814:	a364      	add	r3, pc, #400	; (adr r3, 80039a8 <__ieee754_rem_pio2+0x2e0>)
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800381e:	f7fc fe8b 	bl	8000538 <__aeabi_dmul>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4630      	mov	r0, r6
 8003828:	4639      	mov	r1, r7
 800382a:	f7fc fcd1 	bl	80001d0 <__aeabi_dsub>
 800382e:	a360      	add	r3, pc, #384	; (adr r3, 80039b0 <__ieee754_rem_pio2+0x2e8>)
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	4682      	mov	sl, r0
 8003836:	468b      	mov	fp, r1
 8003838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800383c:	f7fc fe7c 	bl	8000538 <__aeabi_dmul>
 8003840:	2d1f      	cmp	r5, #31
 8003842:	4606      	mov	r6, r0
 8003844:	460f      	mov	r7, r1
 8003846:	dc2a      	bgt.n	800389e <__ieee754_rem_pio2+0x1d6>
 8003848:	1e6a      	subs	r2, r5, #1
 800384a:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <__ieee754_rem_pio2+0x32c>)
 800384c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003850:	4598      	cmp	r8, r3
 8003852:	d024      	beq.n	800389e <__ieee754_rem_pio2+0x1d6>
 8003854:	4632      	mov	r2, r6
 8003856:	463b      	mov	r3, r7
 8003858:	4650      	mov	r0, sl
 800385a:	4659      	mov	r1, fp
 800385c:	f7fc fcb8 	bl	80001d0 <__aeabi_dsub>
 8003860:	e9c4 0100 	strd	r0, r1, [r4]
 8003864:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003868:	4650      	mov	r0, sl
 800386a:	4642      	mov	r2, r8
 800386c:	464b      	mov	r3, r9
 800386e:	4659      	mov	r1, fp
 8003870:	f7fc fcae 	bl	80001d0 <__aeabi_dsub>
 8003874:	463b      	mov	r3, r7
 8003876:	4632      	mov	r2, r6
 8003878:	f7fc fcaa 	bl	80001d0 <__aeabi_dsub>
 800387c:	9b04      	ldr	r3, [sp, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003884:	f6bf af5c 	bge.w	8003740 <__ieee754_rem_pio2+0x78>
 8003888:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800388c:	6063      	str	r3, [r4, #4]
 800388e:	f8c4 8000 	str.w	r8, [r4]
 8003892:	60a0      	str	r0, [r4, #8]
 8003894:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003898:	60e3      	str	r3, [r4, #12]
 800389a:	426d      	negs	r5, r5
 800389c:	e750      	b.n	8003740 <__ieee754_rem_pio2+0x78>
 800389e:	4632      	mov	r2, r6
 80038a0:	463b      	mov	r3, r7
 80038a2:	4650      	mov	r0, sl
 80038a4:	4659      	mov	r1, fp
 80038a6:	f7fc fc93 	bl	80001d0 <__aeabi_dsub>
 80038aa:	ea4f 5228 	mov.w	r2, r8, asr #20
 80038ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	e9c4 0100 	strd	r0, r1, [r4]
 80038ba:	9205      	str	r2, [sp, #20]
 80038bc:	ddd2      	ble.n	8003864 <__ieee754_rem_pio2+0x19c>
 80038be:	a33e      	add	r3, pc, #248	; (adr r3, 80039b8 <__ieee754_rem_pio2+0x2f0>)
 80038c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80038c8:	f7fc fe36 	bl	8000538 <__aeabi_dmul>
 80038cc:	4606      	mov	r6, r0
 80038ce:	460f      	mov	r7, r1
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4650      	mov	r0, sl
 80038d6:	4659      	mov	r1, fp
 80038d8:	f7fc fc7a 	bl	80001d0 <__aeabi_dsub>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4680      	mov	r8, r0
 80038e2:	4689      	mov	r9, r1
 80038e4:	4650      	mov	r0, sl
 80038e6:	4659      	mov	r1, fp
 80038e8:	f7fc fc72 	bl	80001d0 <__aeabi_dsub>
 80038ec:	4632      	mov	r2, r6
 80038ee:	463b      	mov	r3, r7
 80038f0:	f7fc fc6e 	bl	80001d0 <__aeabi_dsub>
 80038f4:	a332      	add	r3, pc, #200	; (adr r3, 80039c0 <__ieee754_rem_pio2+0x2f8>)
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	4606      	mov	r6, r0
 80038fc:	460f      	mov	r7, r1
 80038fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003902:	f7fc fe19 	bl	8000538 <__aeabi_dmul>
 8003906:	4632      	mov	r2, r6
 8003908:	463b      	mov	r3, r7
 800390a:	f7fc fc61 	bl	80001d0 <__aeabi_dsub>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4606      	mov	r6, r0
 8003914:	460f      	mov	r7, r1
 8003916:	4640      	mov	r0, r8
 8003918:	4649      	mov	r1, r9
 800391a:	f7fc fc59 	bl	80001d0 <__aeabi_dsub>
 800391e:	9a05      	ldr	r2, [sp, #20]
 8003920:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b31      	cmp	r3, #49	; 0x31
 8003928:	e9c4 0100 	strd	r0, r1, [r4]
 800392c:	dd2a      	ble.n	8003984 <__ieee754_rem_pio2+0x2bc>
 800392e:	a328      	add	r3, pc, #160	; (adr r3, 80039d0 <__ieee754_rem_pio2+0x308>)
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003938:	f7fc fdfe 	bl	8000538 <__aeabi_dmul>
 800393c:	4606      	mov	r6, r0
 800393e:	460f      	mov	r7, r1
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4640      	mov	r0, r8
 8003946:	4649      	mov	r1, r9
 8003948:	f7fc fc42 	bl	80001d0 <__aeabi_dsub>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4682      	mov	sl, r0
 8003952:	468b      	mov	fp, r1
 8003954:	4640      	mov	r0, r8
 8003956:	4649      	mov	r1, r9
 8003958:	f7fc fc3a 	bl	80001d0 <__aeabi_dsub>
 800395c:	4632      	mov	r2, r6
 800395e:	463b      	mov	r3, r7
 8003960:	f7fc fc36 	bl	80001d0 <__aeabi_dsub>
 8003964:	a31c      	add	r3, pc, #112	; (adr r3, 80039d8 <__ieee754_rem_pio2+0x310>)
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	4606      	mov	r6, r0
 800396c:	460f      	mov	r7, r1
 800396e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003972:	f7fc fde1 	bl	8000538 <__aeabi_dmul>
 8003976:	4632      	mov	r2, r6
 8003978:	463b      	mov	r3, r7
 800397a:	f7fc fc29 	bl	80001d0 <__aeabi_dsub>
 800397e:	4606      	mov	r6, r0
 8003980:	460f      	mov	r7, r1
 8003982:	e767      	b.n	8003854 <__ieee754_rem_pio2+0x18c>
 8003984:	46c2      	mov	sl, r8
 8003986:	46cb      	mov	fp, r9
 8003988:	e76c      	b.n	8003864 <__ieee754_rem_pio2+0x19c>
 800398a:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <__ieee754_rem_pio2+0x330>)
 800398c:	4598      	cmp	r8, r3
 800398e:	dd35      	ble.n	80039fc <__ieee754_rem_pio2+0x334>
 8003990:	ee10 2a10 	vmov	r2, s0
 8003994:	463b      	mov	r3, r7
 8003996:	4630      	mov	r0, r6
 8003998:	4639      	mov	r1, r7
 800399a:	f7fc fc19 	bl	80001d0 <__aeabi_dsub>
 800399e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80039a2:	e9c4 0100 	strd	r0, r1, [r4]
 80039a6:	e6a1      	b.n	80036ec <__ieee754_rem_pio2+0x24>
 80039a8:	54400000 	.word	0x54400000
 80039ac:	3ff921fb 	.word	0x3ff921fb
 80039b0:	1a626331 	.word	0x1a626331
 80039b4:	3dd0b461 	.word	0x3dd0b461
 80039b8:	1a600000 	.word	0x1a600000
 80039bc:	3dd0b461 	.word	0x3dd0b461
 80039c0:	2e037073 	.word	0x2e037073
 80039c4:	3ba3198a 	.word	0x3ba3198a
 80039c8:	6dc9c883 	.word	0x6dc9c883
 80039cc:	3fe45f30 	.word	0x3fe45f30
 80039d0:	2e000000 	.word	0x2e000000
 80039d4:	3ba3198a 	.word	0x3ba3198a
 80039d8:	252049c1 	.word	0x252049c1
 80039dc:	397b839a 	.word	0x397b839a
 80039e0:	3fe921fb 	.word	0x3fe921fb
 80039e4:	4002d97b 	.word	0x4002d97b
 80039e8:	3ff921fb 	.word	0x3ff921fb
 80039ec:	413921fb 	.word	0x413921fb
 80039f0:	3fe00000 	.word	0x3fe00000
 80039f4:	080046d8 	.word	0x080046d8
 80039f8:	7fefffff 	.word	0x7fefffff
 80039fc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003a00:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003a04:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003a08:	4630      	mov	r0, r6
 8003a0a:	460f      	mov	r7, r1
 8003a0c:	f7fd f82e 	bl	8000a6c <__aeabi_d2iz>
 8003a10:	f7fc fd2c 	bl	800046c <__aeabi_i2d>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4630      	mov	r0, r6
 8003a1a:	4639      	mov	r1, r7
 8003a1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003a20:	f7fc fbd6 	bl	80001d0 <__aeabi_dsub>
 8003a24:	2200      	movs	r2, #0
 8003a26:	4b1f      	ldr	r3, [pc, #124]	; (8003aa4 <__ieee754_rem_pio2+0x3dc>)
 8003a28:	f7fc fd86 	bl	8000538 <__aeabi_dmul>
 8003a2c:	460f      	mov	r7, r1
 8003a2e:	4606      	mov	r6, r0
 8003a30:	f7fd f81c 	bl	8000a6c <__aeabi_d2iz>
 8003a34:	f7fc fd1a 	bl	800046c <__aeabi_i2d>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	4639      	mov	r1, r7
 8003a40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003a44:	f7fc fbc4 	bl	80001d0 <__aeabi_dsub>
 8003a48:	2200      	movs	r2, #0
 8003a4a:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <__ieee754_rem_pio2+0x3dc>)
 8003a4c:	f7fc fd74 	bl	8000538 <__aeabi_dmul>
 8003a50:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003a54:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003a58:	f04f 0803 	mov.w	r8, #3
 8003a5c:	2600      	movs	r6, #0
 8003a5e:	2700      	movs	r7, #0
 8003a60:	4632      	mov	r2, r6
 8003a62:	463b      	mov	r3, r7
 8003a64:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8003a6c:	f7fc ffcc 	bl	8000a08 <__aeabi_dcmpeq>
 8003a70:	b9b0      	cbnz	r0, 8003aa0 <__ieee754_rem_pio2+0x3d8>
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <__ieee754_rem_pio2+0x3e0>)
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	2302      	movs	r3, #2
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	462a      	mov	r2, r5
 8003a7c:	4643      	mov	r3, r8
 8003a7e:	4621      	mov	r1, r4
 8003a80:	a806      	add	r0, sp, #24
 8003a82:	f000 f8fd 	bl	8003c80 <__kernel_rem_pio2>
 8003a86:	9b04      	ldr	r3, [sp, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	4605      	mov	r5, r0
 8003a8c:	f6bf ae58 	bge.w	8003740 <__ieee754_rem_pio2+0x78>
 8003a90:	6863      	ldr	r3, [r4, #4]
 8003a92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003a96:	6063      	str	r3, [r4, #4]
 8003a98:	68e3      	ldr	r3, [r4, #12]
 8003a9a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003a9e:	e6fb      	b.n	8003898 <__ieee754_rem_pio2+0x1d0>
 8003aa0:	46d0      	mov	r8, sl
 8003aa2:	e7dd      	b.n	8003a60 <__ieee754_rem_pio2+0x398>
 8003aa4:	41700000 	.word	0x41700000
 8003aa8:	08004758 	.word	0x08004758
 8003aac:	00000000 	.word	0x00000000

08003ab0 <__kernel_cos>:
 8003ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab4:	ec59 8b10 	vmov	r8, r9, d0
 8003ab8:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8003abc:	b085      	sub	sp, #20
 8003abe:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8003ac2:	ed8d 1b00 	vstr	d1, [sp]
 8003ac6:	da07      	bge.n	8003ad8 <__kernel_cos+0x28>
 8003ac8:	ee10 0a10 	vmov	r0, s0
 8003acc:	4649      	mov	r1, r9
 8003ace:	f7fc ffcd 	bl	8000a6c <__aeabi_d2iz>
 8003ad2:	2800      	cmp	r0, #0
 8003ad4:	f000 80aa 	beq.w	8003c2c <__kernel_cos+0x17c>
 8003ad8:	4642      	mov	r2, r8
 8003ada:	464b      	mov	r3, r9
 8003adc:	4640      	mov	r0, r8
 8003ade:	4649      	mov	r1, r9
 8003ae0:	f7fc fd2a 	bl	8000538 <__aeabi_dmul>
 8003ae4:	a359      	add	r3, pc, #356	; (adr r3, 8003c4c <__kernel_cos+0x19c>)
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	4604      	mov	r4, r0
 8003aec:	460d      	mov	r5, r1
 8003aee:	f7fc fd23 	bl	8000538 <__aeabi_dmul>
 8003af2:	a358      	add	r3, pc, #352	; (adr r3, 8003c54 <__kernel_cos+0x1a4>)
 8003af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af8:	f7fc fb6c 	bl	80001d4 <__adddf3>
 8003afc:	4622      	mov	r2, r4
 8003afe:	462b      	mov	r3, r5
 8003b00:	f7fc fd1a 	bl	8000538 <__aeabi_dmul>
 8003b04:	a355      	add	r3, pc, #340	; (adr r3, 8003c5c <__kernel_cos+0x1ac>)
 8003b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0a:	f7fc fb61 	bl	80001d0 <__aeabi_dsub>
 8003b0e:	4622      	mov	r2, r4
 8003b10:	462b      	mov	r3, r5
 8003b12:	f7fc fd11 	bl	8000538 <__aeabi_dmul>
 8003b16:	a353      	add	r3, pc, #332	; (adr r3, 8003c64 <__kernel_cos+0x1b4>)
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f7fc fb5a 	bl	80001d4 <__adddf3>
 8003b20:	4622      	mov	r2, r4
 8003b22:	462b      	mov	r3, r5
 8003b24:	f7fc fd08 	bl	8000538 <__aeabi_dmul>
 8003b28:	a350      	add	r3, pc, #320	; (adr r3, 8003c6c <__kernel_cos+0x1bc>)
 8003b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2e:	f7fc fb4f 	bl	80001d0 <__aeabi_dsub>
 8003b32:	4622      	mov	r2, r4
 8003b34:	462b      	mov	r3, r5
 8003b36:	f7fc fcff 	bl	8000538 <__aeabi_dmul>
 8003b3a:	a34e      	add	r3, pc, #312	; (adr r3, 8003c74 <__kernel_cos+0x1c4>)
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f7fc fb48 	bl	80001d4 <__adddf3>
 8003b44:	462b      	mov	r3, r5
 8003b46:	4622      	mov	r2, r4
 8003b48:	f7fc fcf6 	bl	8000538 <__aeabi_dmul>
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <__kernel_cos+0x188>)
 8003b4e:	429f      	cmp	r7, r3
 8003b50:	4682      	mov	sl, r0
 8003b52:	468b      	mov	fp, r1
 8003b54:	dc2c      	bgt.n	8003bb0 <__kernel_cos+0x100>
 8003b56:	2200      	movs	r2, #0
 8003b58:	4b38      	ldr	r3, [pc, #224]	; (8003c3c <__kernel_cos+0x18c>)
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	f7fc fceb 	bl	8000538 <__aeabi_dmul>
 8003b62:	4652      	mov	r2, sl
 8003b64:	4606      	mov	r6, r0
 8003b66:	460f      	mov	r7, r1
 8003b68:	465b      	mov	r3, fp
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	f7fc fce3 	bl	8000538 <__aeabi_dmul>
 8003b72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b76:	4604      	mov	r4, r0
 8003b78:	460d      	mov	r5, r1
 8003b7a:	4640      	mov	r0, r8
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	f7fc fcdb 	bl	8000538 <__aeabi_dmul>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4620      	mov	r0, r4
 8003b88:	4629      	mov	r1, r5
 8003b8a:	f7fc fb21 	bl	80001d0 <__aeabi_dsub>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4630      	mov	r0, r6
 8003b94:	4639      	mov	r1, r7
 8003b96:	f7fc fb1b 	bl	80001d0 <__aeabi_dsub>
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4928      	ldr	r1, [pc, #160]	; (8003c40 <__kernel_cos+0x190>)
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f7fc fb15 	bl	80001d0 <__aeabi_dsub>
 8003ba6:	ec41 0b10 	vmov	d0, r0, r1
 8003baa:	b005      	add	sp, #20
 8003bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb0:	4b24      	ldr	r3, [pc, #144]	; (8003c44 <__kernel_cos+0x194>)
 8003bb2:	4923      	ldr	r1, [pc, #140]	; (8003c40 <__kernel_cos+0x190>)
 8003bb4:	429f      	cmp	r7, r3
 8003bb6:	bfd7      	itett	le
 8003bb8:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8003bbc:	4f22      	ldrgt	r7, [pc, #136]	; (8003c48 <__kernel_cos+0x198>)
 8003bbe:	2200      	movle	r2, #0
 8003bc0:	4616      	movle	r6, r2
 8003bc2:	bfd4      	ite	le
 8003bc4:	461f      	movle	r7, r3
 8003bc6:	2600      	movgt	r6, #0
 8003bc8:	4632      	mov	r2, r6
 8003bca:	463b      	mov	r3, r7
 8003bcc:	2000      	movs	r0, #0
 8003bce:	f7fc faff 	bl	80001d0 <__aeabi_dsub>
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bd8:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <__kernel_cos+0x18c>)
 8003bda:	4620      	mov	r0, r4
 8003bdc:	4629      	mov	r1, r5
 8003bde:	f7fc fcab 	bl	8000538 <__aeabi_dmul>
 8003be2:	4632      	mov	r2, r6
 8003be4:	463b      	mov	r3, r7
 8003be6:	f7fc faf3 	bl	80001d0 <__aeabi_dsub>
 8003bea:	4652      	mov	r2, sl
 8003bec:	4606      	mov	r6, r0
 8003bee:	460f      	mov	r7, r1
 8003bf0:	465b      	mov	r3, fp
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f7fc fc9f 	bl	8000538 <__aeabi_dmul>
 8003bfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003bfe:	4604      	mov	r4, r0
 8003c00:	460d      	mov	r5, r1
 8003c02:	4640      	mov	r0, r8
 8003c04:	4649      	mov	r1, r9
 8003c06:	f7fc fc97 	bl	8000538 <__aeabi_dmul>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4620      	mov	r0, r4
 8003c10:	4629      	mov	r1, r5
 8003c12:	f7fc fadd 	bl	80001d0 <__aeabi_dsub>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4630      	mov	r0, r6
 8003c1c:	4639      	mov	r1, r7
 8003c1e:	f7fc fad7 	bl	80001d0 <__aeabi_dsub>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c2a:	e7ba      	b.n	8003ba2 <__kernel_cos+0xf2>
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	4904      	ldr	r1, [pc, #16]	; (8003c40 <__kernel_cos+0x190>)
 8003c30:	e7b9      	b.n	8003ba6 <__kernel_cos+0xf6>
 8003c32:	bf00      	nop
 8003c34:	f3af 8000 	nop.w
 8003c38:	3fd33332 	.word	0x3fd33332
 8003c3c:	3fe00000 	.word	0x3fe00000
 8003c40:	3ff00000 	.word	0x3ff00000
 8003c44:	3fe90000 	.word	0x3fe90000
 8003c48:	3fd20000 	.word	0x3fd20000
 8003c4c:	be8838d4 	.word	0xbe8838d4
 8003c50:	bda8fae9 	.word	0xbda8fae9
 8003c54:	bdb4b1c4 	.word	0xbdb4b1c4
 8003c58:	3e21ee9e 	.word	0x3e21ee9e
 8003c5c:	809c52ad 	.word	0x809c52ad
 8003c60:	3e927e4f 	.word	0x3e927e4f
 8003c64:	19cb1590 	.word	0x19cb1590
 8003c68:	3efa01a0 	.word	0x3efa01a0
 8003c6c:	16c15177 	.word	0x16c15177
 8003c70:	3f56c16c 	.word	0x3f56c16c
 8003c74:	5555554c 	.word	0x5555554c
 8003c78:	3fa55555 	.word	0x3fa55555
 8003c7c:	00000000 	.word	0x00000000

08003c80 <__kernel_rem_pio2>:
 8003c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c84:	ed2d 8b02 	vpush	{d8}
 8003c88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003c8c:	1ed4      	subs	r4, r2, #3
 8003c8e:	9306      	str	r3, [sp, #24]
 8003c90:	9102      	str	r1, [sp, #8]
 8003c92:	4bc3      	ldr	r3, [pc, #780]	; (8003fa0 <__kernel_rem_pio2+0x320>)
 8003c94:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003c96:	9009      	str	r0, [sp, #36]	; 0x24
 8003c98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	9b06      	ldr	r3, [sp, #24]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	9304      	str	r3, [sp, #16]
 8003ca4:	2318      	movs	r3, #24
 8003ca6:	fb94 f4f3 	sdiv	r4, r4, r3
 8003caa:	f06f 0317 	mvn.w	r3, #23
 8003cae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8003cb2:	fb04 3303 	mla	r3, r4, r3, r3
 8003cb6:	eb03 0a02 	add.w	sl, r3, r2
 8003cba:	9b00      	ldr	r3, [sp, #0]
 8003cbc:	9a04      	ldr	r2, [sp, #16]
 8003cbe:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8003f90 <__kernel_rem_pio2+0x310>
 8003cc2:	eb03 0802 	add.w	r8, r3, r2
 8003cc6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003cc8:	1aa7      	subs	r7, r4, r2
 8003cca:	ae20      	add	r6, sp, #128	; 0x80
 8003ccc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003cd0:	2500      	movs	r5, #0
 8003cd2:	4545      	cmp	r5, r8
 8003cd4:	dd13      	ble.n	8003cfe <__kernel_rem_pio2+0x7e>
 8003cd6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8003f90 <__kernel_rem_pio2+0x310>
 8003cda:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8003cde:	2600      	movs	r6, #0
 8003ce0:	9b00      	ldr	r3, [sp, #0]
 8003ce2:	429e      	cmp	r6, r3
 8003ce4:	dc32      	bgt.n	8003d4c <__kernel_rem_pio2+0xcc>
 8003ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce8:	9303      	str	r3, [sp, #12]
 8003cea:	9b06      	ldr	r3, [sp, #24]
 8003cec:	199d      	adds	r5, r3, r6
 8003cee:	ab20      	add	r3, sp, #128	; 0x80
 8003cf0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003cf4:	9308      	str	r3, [sp, #32]
 8003cf6:	ec59 8b18 	vmov	r8, r9, d8
 8003cfa:	2700      	movs	r7, #0
 8003cfc:	e01f      	b.n	8003d3e <__kernel_rem_pio2+0xbe>
 8003cfe:	42ef      	cmn	r7, r5
 8003d00:	d407      	bmi.n	8003d12 <__kernel_rem_pio2+0x92>
 8003d02:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003d06:	f7fc fbb1 	bl	800046c <__aeabi_i2d>
 8003d0a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003d0e:	3501      	adds	r5, #1
 8003d10:	e7df      	b.n	8003cd2 <__kernel_rem_pio2+0x52>
 8003d12:	ec51 0b18 	vmov	r0, r1, d8
 8003d16:	e7f8      	b.n	8003d0a <__kernel_rem_pio2+0x8a>
 8003d18:	9908      	ldr	r1, [sp, #32]
 8003d1a:	9d03      	ldr	r5, [sp, #12]
 8003d1c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003d20:	9108      	str	r1, [sp, #32]
 8003d22:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8003d26:	9503      	str	r5, [sp, #12]
 8003d28:	f7fc fc06 	bl	8000538 <__aeabi_dmul>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4640      	mov	r0, r8
 8003d32:	4649      	mov	r1, r9
 8003d34:	f7fc fa4e 	bl	80001d4 <__adddf3>
 8003d38:	3701      	adds	r7, #1
 8003d3a:	4680      	mov	r8, r0
 8003d3c:	4689      	mov	r9, r1
 8003d3e:	9b04      	ldr	r3, [sp, #16]
 8003d40:	429f      	cmp	r7, r3
 8003d42:	dde9      	ble.n	8003d18 <__kernel_rem_pio2+0x98>
 8003d44:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003d48:	3601      	adds	r6, #1
 8003d4a:	e7c9      	b.n	8003ce0 <__kernel_rem_pio2+0x60>
 8003d4c:	9b00      	ldr	r3, [sp, #0]
 8003d4e:	9f00      	ldr	r7, [sp, #0]
 8003d50:	aa0c      	add	r2, sp, #48	; 0x30
 8003d52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003d56:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d58:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003d5a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8003d60:	ab98      	add	r3, sp, #608	; 0x260
 8003d62:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8003d66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003d6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003d6e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8003d72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d76:	9308      	str	r3, [sp, #32]
 8003d78:	9a08      	ldr	r2, [sp, #32]
 8003d7a:	ab98      	add	r3, sp, #608	; 0x260
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8003d82:	2600      	movs	r6, #0
 8003d84:	1bbb      	subs	r3, r7, r6
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	dc77      	bgt.n	8003e7a <__kernel_rem_pio2+0x1fa>
 8003d8a:	ec49 8b10 	vmov	d0, r8, r9
 8003d8e:	4650      	mov	r0, sl
 8003d90:	f000 fc0e 	bl	80045b0 <scalbn>
 8003d94:	ec55 4b10 	vmov	r4, r5, d0
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003d9e:	ee10 0a10 	vmov	r0, s0
 8003da2:	4629      	mov	r1, r5
 8003da4:	f7fc fbc8 	bl	8000538 <__aeabi_dmul>
 8003da8:	ec41 0b10 	vmov	d0, r0, r1
 8003dac:	f000 fb7c 	bl	80044a8 <floor>
 8003db0:	2200      	movs	r2, #0
 8003db2:	ec51 0b10 	vmov	r0, r1, d0
 8003db6:	4b7b      	ldr	r3, [pc, #492]	; (8003fa4 <__kernel_rem_pio2+0x324>)
 8003db8:	f7fc fbbe 	bl	8000538 <__aeabi_dmul>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	4629      	mov	r1, r5
 8003dc4:	f7fc fa04 	bl	80001d0 <__aeabi_dsub>
 8003dc8:	460d      	mov	r5, r1
 8003dca:	4604      	mov	r4, r0
 8003dcc:	f7fc fe4e 	bl	8000a6c <__aeabi_d2iz>
 8003dd0:	9003      	str	r0, [sp, #12]
 8003dd2:	f7fc fb4b 	bl	800046c <__aeabi_i2d>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4620      	mov	r0, r4
 8003ddc:	4629      	mov	r1, r5
 8003dde:	f7fc f9f7 	bl	80001d0 <__aeabi_dsub>
 8003de2:	f1ba 0f00 	cmp.w	sl, #0
 8003de6:	4680      	mov	r8, r0
 8003de8:	4689      	mov	r9, r1
 8003dea:	dd6b      	ble.n	8003ec4 <__kernel_rem_pio2+0x244>
 8003dec:	1e7a      	subs	r2, r7, #1
 8003dee:	ab0c      	add	r3, sp, #48	; 0x30
 8003df0:	f1ca 0118 	rsb	r1, sl, #24
 8003df4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003df8:	9c03      	ldr	r4, [sp, #12]
 8003dfa:	fa40 f301 	asr.w	r3, r0, r1
 8003dfe:	441c      	add	r4, r3
 8003e00:	408b      	lsls	r3, r1
 8003e02:	1ac0      	subs	r0, r0, r3
 8003e04:	ab0c      	add	r3, sp, #48	; 0x30
 8003e06:	9403      	str	r4, [sp, #12]
 8003e08:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8003e0c:	f1ca 0317 	rsb	r3, sl, #23
 8003e10:	fa40 fb03 	asr.w	fp, r0, r3
 8003e14:	f1bb 0f00 	cmp.w	fp, #0
 8003e18:	dd62      	ble.n	8003ee0 <__kernel_rem_pio2+0x260>
 8003e1a:	9b03      	ldr	r3, [sp, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	3301      	adds	r3, #1
 8003e20:	9303      	str	r3, [sp, #12]
 8003e22:	4614      	mov	r4, r2
 8003e24:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003e28:	4297      	cmp	r7, r2
 8003e2a:	f300 8089 	bgt.w	8003f40 <__kernel_rem_pio2+0x2c0>
 8003e2e:	f1ba 0f00 	cmp.w	sl, #0
 8003e32:	dd07      	ble.n	8003e44 <__kernel_rem_pio2+0x1c4>
 8003e34:	f1ba 0f01 	cmp.w	sl, #1
 8003e38:	f000 8096 	beq.w	8003f68 <__kernel_rem_pio2+0x2e8>
 8003e3c:	f1ba 0f02 	cmp.w	sl, #2
 8003e40:	f000 809c 	beq.w	8003f7c <__kernel_rem_pio2+0x2fc>
 8003e44:	f1bb 0f02 	cmp.w	fp, #2
 8003e48:	d14a      	bne.n	8003ee0 <__kernel_rem_pio2+0x260>
 8003e4a:	4642      	mov	r2, r8
 8003e4c:	464b      	mov	r3, r9
 8003e4e:	2000      	movs	r0, #0
 8003e50:	4955      	ldr	r1, [pc, #340]	; (8003fa8 <__kernel_rem_pio2+0x328>)
 8003e52:	f7fc f9bd 	bl	80001d0 <__aeabi_dsub>
 8003e56:	4680      	mov	r8, r0
 8003e58:	4689      	mov	r9, r1
 8003e5a:	2c00      	cmp	r4, #0
 8003e5c:	d040      	beq.n	8003ee0 <__kernel_rem_pio2+0x260>
 8003e5e:	4650      	mov	r0, sl
 8003e60:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8003f98 <__kernel_rem_pio2+0x318>
 8003e64:	f000 fba4 	bl	80045b0 <scalbn>
 8003e68:	4640      	mov	r0, r8
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	ec53 2b10 	vmov	r2, r3, d0
 8003e70:	f7fc f9ae 	bl	80001d0 <__aeabi_dsub>
 8003e74:	4680      	mov	r8, r0
 8003e76:	4689      	mov	r9, r1
 8003e78:	e032      	b.n	8003ee0 <__kernel_rem_pio2+0x260>
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	4b4b      	ldr	r3, [pc, #300]	; (8003fac <__kernel_rem_pio2+0x32c>)
 8003e7e:	4640      	mov	r0, r8
 8003e80:	4649      	mov	r1, r9
 8003e82:	f7fc fb59 	bl	8000538 <__aeabi_dmul>
 8003e86:	f7fc fdf1 	bl	8000a6c <__aeabi_d2iz>
 8003e8a:	f7fc faef 	bl	800046c <__aeabi_i2d>
 8003e8e:	2200      	movs	r2, #0
 8003e90:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <__kernel_rem_pio2+0x330>)
 8003e92:	4604      	mov	r4, r0
 8003e94:	460d      	mov	r5, r1
 8003e96:	f7fc fb4f 	bl	8000538 <__aeabi_dmul>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4640      	mov	r0, r8
 8003ea0:	4649      	mov	r1, r9
 8003ea2:	f7fc f995 	bl	80001d0 <__aeabi_dsub>
 8003ea6:	f7fc fde1 	bl	8000a6c <__aeabi_d2iz>
 8003eaa:	ab0c      	add	r3, sp, #48	; 0x30
 8003eac:	4629      	mov	r1, r5
 8003eae:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8003eb2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7fc f98c 	bl	80001d4 <__adddf3>
 8003ebc:	3601      	adds	r6, #1
 8003ebe:	4680      	mov	r8, r0
 8003ec0:	4689      	mov	r9, r1
 8003ec2:	e75f      	b.n	8003d84 <__kernel_rem_pio2+0x104>
 8003ec4:	d106      	bne.n	8003ed4 <__kernel_rem_pio2+0x254>
 8003ec6:	1e7b      	subs	r3, r7, #1
 8003ec8:	aa0c      	add	r2, sp, #48	; 0x30
 8003eca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ece:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8003ed2:	e79f      	b.n	8003e14 <__kernel_rem_pio2+0x194>
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	4b37      	ldr	r3, [pc, #220]	; (8003fb4 <__kernel_rem_pio2+0x334>)
 8003ed8:	f7fc fdb4 	bl	8000a44 <__aeabi_dcmpge>
 8003edc:	bb68      	cbnz	r0, 8003f3a <__kernel_rem_pio2+0x2ba>
 8003ede:	4683      	mov	fp, r0
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	4640      	mov	r0, r8
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	f7fc fd8e 	bl	8000a08 <__aeabi_dcmpeq>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	f000 80c1 	beq.w	8004074 <__kernel_rem_pio2+0x3f4>
 8003ef2:	1e7c      	subs	r4, r7, #1
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	9900      	ldr	r1, [sp, #0]
 8003efa:	428b      	cmp	r3, r1
 8003efc:	da5c      	bge.n	8003fb8 <__kernel_rem_pio2+0x338>
 8003efe:	2a00      	cmp	r2, #0
 8003f00:	f040 808b 	bne.w	800401a <__kernel_rem_pio2+0x39a>
 8003f04:	2401      	movs	r4, #1
 8003f06:	f06f 0203 	mvn.w	r2, #3
 8003f0a:	fb02 f304 	mul.w	r3, r2, r4
 8003f0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003f10:	58cb      	ldr	r3, [r1, r3]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d056      	beq.n	8003fc4 <__kernel_rem_pio2+0x344>
 8003f16:	9b08      	ldr	r3, [sp, #32]
 8003f18:	aa98      	add	r2, sp, #608	; 0x260
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8003f20:	9b06      	ldr	r3, [sp, #24]
 8003f22:	19dd      	adds	r5, r3, r7
 8003f24:	ab20      	add	r3, sp, #128	; 0x80
 8003f26:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003f2a:	19e3      	adds	r3, r4, r7
 8003f2c:	1c7e      	adds	r6, r7, #1
 8003f2e:	9303      	str	r3, [sp, #12]
 8003f30:	9b03      	ldr	r3, [sp, #12]
 8003f32:	429e      	cmp	r6, r3
 8003f34:	dd48      	ble.n	8003fc8 <__kernel_rem_pio2+0x348>
 8003f36:	461f      	mov	r7, r3
 8003f38:	e712      	b.n	8003d60 <__kernel_rem_pio2+0xe0>
 8003f3a:	f04f 0b02 	mov.w	fp, #2
 8003f3e:	e76c      	b.n	8003e1a <__kernel_rem_pio2+0x19a>
 8003f40:	ab0c      	add	r3, sp, #48	; 0x30
 8003f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f46:	b94c      	cbnz	r4, 8003f5c <__kernel_rem_pio2+0x2dc>
 8003f48:	b12b      	cbz	r3, 8003f56 <__kernel_rem_pio2+0x2d6>
 8003f4a:	a80c      	add	r0, sp, #48	; 0x30
 8003f4c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003f50:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003f54:	2301      	movs	r3, #1
 8003f56:	3201      	adds	r2, #1
 8003f58:	461c      	mov	r4, r3
 8003f5a:	e765      	b.n	8003e28 <__kernel_rem_pio2+0x1a8>
 8003f5c:	a80c      	add	r0, sp, #48	; 0x30
 8003f5e:	1acb      	subs	r3, r1, r3
 8003f60:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8003f64:	4623      	mov	r3, r4
 8003f66:	e7f6      	b.n	8003f56 <__kernel_rem_pio2+0x2d6>
 8003f68:	1e7a      	subs	r2, r7, #1
 8003f6a:	ab0c      	add	r3, sp, #48	; 0x30
 8003f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f70:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003f74:	a90c      	add	r1, sp, #48	; 0x30
 8003f76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003f7a:	e763      	b.n	8003e44 <__kernel_rem_pio2+0x1c4>
 8003f7c:	1e7a      	subs	r2, r7, #1
 8003f7e:	ab0c      	add	r3, sp, #48	; 0x30
 8003f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003f88:	e7f4      	b.n	8003f74 <__kernel_rem_pio2+0x2f4>
 8003f8a:	bf00      	nop
 8003f8c:	f3af 8000 	nop.w
	...
 8003f9c:	3ff00000 	.word	0x3ff00000
 8003fa0:	080048a0 	.word	0x080048a0
 8003fa4:	40200000 	.word	0x40200000
 8003fa8:	3ff00000 	.word	0x3ff00000
 8003fac:	3e700000 	.word	0x3e700000
 8003fb0:	41700000 	.word	0x41700000
 8003fb4:	3fe00000 	.word	0x3fe00000
 8003fb8:	a90c      	add	r1, sp, #48	; 0x30
 8003fba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	430a      	orrs	r2, r1
 8003fc2:	e799      	b.n	8003ef8 <__kernel_rem_pio2+0x278>
 8003fc4:	3401      	adds	r4, #1
 8003fc6:	e7a0      	b.n	8003f0a <__kernel_rem_pio2+0x28a>
 8003fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003fce:	f7fc fa4d 	bl	800046c <__aeabi_i2d>
 8003fd2:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fd8:	9508      	str	r5, [sp, #32]
 8003fda:	461c      	mov	r4, r3
 8003fdc:	2700      	movs	r7, #0
 8003fde:	f04f 0800 	mov.w	r8, #0
 8003fe2:	f04f 0900 	mov.w	r9, #0
 8003fe6:	9b04      	ldr	r3, [sp, #16]
 8003fe8:	429f      	cmp	r7, r3
 8003fea:	dd03      	ble.n	8003ff4 <__kernel_rem_pio2+0x374>
 8003fec:	e8eb 8902 	strd	r8, r9, [fp], #8
 8003ff0:	3601      	adds	r6, #1
 8003ff2:	e79d      	b.n	8003f30 <__kernel_rem_pio2+0x2b0>
 8003ff4:	9908      	ldr	r1, [sp, #32]
 8003ff6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8003ffa:	9108      	str	r1, [sp, #32]
 8003ffc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004000:	f7fc fa9a 	bl	8000538 <__aeabi_dmul>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4640      	mov	r0, r8
 800400a:	4649      	mov	r1, r9
 800400c:	f7fc f8e2 	bl	80001d4 <__adddf3>
 8004010:	3701      	adds	r7, #1
 8004012:	4680      	mov	r8, r0
 8004014:	4689      	mov	r9, r1
 8004016:	e7e6      	b.n	8003fe6 <__kernel_rem_pio2+0x366>
 8004018:	3c01      	subs	r4, #1
 800401a:	ab0c      	add	r3, sp, #48	; 0x30
 800401c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004020:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0f7      	beq.n	8004018 <__kernel_rem_pio2+0x398>
 8004028:	4650      	mov	r0, sl
 800402a:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8004300 <__kernel_rem_pio2+0x680>
 800402e:	f000 fabf 	bl	80045b0 <scalbn>
 8004032:	00e5      	lsls	r5, r4, #3
 8004034:	ab98      	add	r3, sp, #608	; 0x260
 8004036:	eb03 0905 	add.w	r9, r3, r5
 800403a:	ec57 6b10 	vmov	r6, r7, d0
 800403e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8004042:	46a0      	mov	r8, r4
 8004044:	f1b8 0f00 	cmp.w	r8, #0
 8004048:	da4d      	bge.n	80040e6 <__kernel_rem_pio2+0x466>
 800404a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8004308 <__kernel_rem_pio2+0x688>
 800404e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8004052:	2300      	movs	r3, #0
 8004054:	9304      	str	r3, [sp, #16]
 8004056:	4657      	mov	r7, sl
 8004058:	9b04      	ldr	r3, [sp, #16]
 800405a:	ebb4 0903 	subs.w	r9, r4, r3
 800405e:	d476      	bmi.n	800414e <__kernel_rem_pio2+0x4ce>
 8004060:	4bab      	ldr	r3, [pc, #684]	; (8004310 <__kernel_rem_pio2+0x690>)
 8004062:	461e      	mov	r6, r3
 8004064:	ab70      	add	r3, sp, #448	; 0x1c0
 8004066:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800406a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800406e:	f04f 0800 	mov.w	r8, #0
 8004072:	e05e      	b.n	8004132 <__kernel_rem_pio2+0x4b2>
 8004074:	f1ca 0000 	rsb	r0, sl, #0
 8004078:	ec49 8b10 	vmov	d0, r8, r9
 800407c:	f000 fa98 	bl	80045b0 <scalbn>
 8004080:	ec55 4b10 	vmov	r4, r5, d0
 8004084:	2200      	movs	r2, #0
 8004086:	4ba3      	ldr	r3, [pc, #652]	; (8004314 <__kernel_rem_pio2+0x694>)
 8004088:	ee10 0a10 	vmov	r0, s0
 800408c:	4629      	mov	r1, r5
 800408e:	f7fc fcd9 	bl	8000a44 <__aeabi_dcmpge>
 8004092:	b1f8      	cbz	r0, 80040d4 <__kernel_rem_pio2+0x454>
 8004094:	2200      	movs	r2, #0
 8004096:	4ba0      	ldr	r3, [pc, #640]	; (8004318 <__kernel_rem_pio2+0x698>)
 8004098:	4620      	mov	r0, r4
 800409a:	4629      	mov	r1, r5
 800409c:	f7fc fa4c 	bl	8000538 <__aeabi_dmul>
 80040a0:	f7fc fce4 	bl	8000a6c <__aeabi_d2iz>
 80040a4:	4606      	mov	r6, r0
 80040a6:	f7fc f9e1 	bl	800046c <__aeabi_i2d>
 80040aa:	2200      	movs	r2, #0
 80040ac:	4b99      	ldr	r3, [pc, #612]	; (8004314 <__kernel_rem_pio2+0x694>)
 80040ae:	f7fc fa43 	bl	8000538 <__aeabi_dmul>
 80040b2:	460b      	mov	r3, r1
 80040b4:	4602      	mov	r2, r0
 80040b6:	4629      	mov	r1, r5
 80040b8:	4620      	mov	r0, r4
 80040ba:	f7fc f889 	bl	80001d0 <__aeabi_dsub>
 80040be:	f7fc fcd5 	bl	8000a6c <__aeabi_d2iz>
 80040c2:	1c7c      	adds	r4, r7, #1
 80040c4:	ab0c      	add	r3, sp, #48	; 0x30
 80040c6:	f10a 0a18 	add.w	sl, sl, #24
 80040ca:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80040ce:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80040d2:	e7a9      	b.n	8004028 <__kernel_rem_pio2+0x3a8>
 80040d4:	4620      	mov	r0, r4
 80040d6:	4629      	mov	r1, r5
 80040d8:	f7fc fcc8 	bl	8000a6c <__aeabi_d2iz>
 80040dc:	ab0c      	add	r3, sp, #48	; 0x30
 80040de:	463c      	mov	r4, r7
 80040e0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80040e4:	e7a0      	b.n	8004028 <__kernel_rem_pio2+0x3a8>
 80040e6:	ab0c      	add	r3, sp, #48	; 0x30
 80040e8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80040ec:	f7fc f9be 	bl	800046c <__aeabi_i2d>
 80040f0:	4632      	mov	r2, r6
 80040f2:	463b      	mov	r3, r7
 80040f4:	f7fc fa20 	bl	8000538 <__aeabi_dmul>
 80040f8:	2200      	movs	r2, #0
 80040fa:	e969 0102 	strd	r0, r1, [r9, #-8]!
 80040fe:	4b86      	ldr	r3, [pc, #536]	; (8004318 <__kernel_rem_pio2+0x698>)
 8004100:	4630      	mov	r0, r6
 8004102:	4639      	mov	r1, r7
 8004104:	f7fc fa18 	bl	8000538 <__aeabi_dmul>
 8004108:	f108 38ff 	add.w	r8, r8, #4294967295
 800410c:	4606      	mov	r6, r0
 800410e:	460f      	mov	r7, r1
 8004110:	e798      	b.n	8004044 <__kernel_rem_pio2+0x3c4>
 8004112:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004116:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800411a:	f7fc fa0d 	bl	8000538 <__aeabi_dmul>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004126:	f7fc f855 	bl	80001d4 <__adddf3>
 800412a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800412e:	f108 0801 	add.w	r8, r8, #1
 8004132:	9b00      	ldr	r3, [sp, #0]
 8004134:	4598      	cmp	r8, r3
 8004136:	dc02      	bgt.n	800413e <__kernel_rem_pio2+0x4be>
 8004138:	9b04      	ldr	r3, [sp, #16]
 800413a:	4598      	cmp	r8, r3
 800413c:	dde9      	ble.n	8004112 <__kernel_rem_pio2+0x492>
 800413e:	9b04      	ldr	r3, [sp, #16]
 8004140:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004144:	3301      	adds	r3, #1
 8004146:	ecaa 7b02 	vstmia	sl!, {d7}
 800414a:	9304      	str	r3, [sp, #16]
 800414c:	e784      	b.n	8004058 <__kernel_rem_pio2+0x3d8>
 800414e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004150:	2b03      	cmp	r3, #3
 8004152:	d85d      	bhi.n	8004210 <__kernel_rem_pio2+0x590>
 8004154:	e8df f003 	tbb	[pc, r3]
 8004158:	0226264b 	.word	0x0226264b
 800415c:	ab98      	add	r3, sp, #608	; 0x260
 800415e:	441d      	add	r5, r3
 8004160:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8004164:	462e      	mov	r6, r5
 8004166:	46a2      	mov	sl, r4
 8004168:	f1ba 0f00 	cmp.w	sl, #0
 800416c:	dc6e      	bgt.n	800424c <__kernel_rem_pio2+0x5cc>
 800416e:	462e      	mov	r6, r5
 8004170:	46a2      	mov	sl, r4
 8004172:	f1ba 0f01 	cmp.w	sl, #1
 8004176:	f300 808a 	bgt.w	800428e <__kernel_rem_pio2+0x60e>
 800417a:	2000      	movs	r0, #0
 800417c:	2100      	movs	r1, #0
 800417e:	2c01      	cmp	r4, #1
 8004180:	f300 80a6 	bgt.w	80042d0 <__kernel_rem_pio2+0x650>
 8004184:	f1bb 0f00 	cmp.w	fp, #0
 8004188:	f040 80a8 	bne.w	80042dc <__kernel_rem_pio2+0x65c>
 800418c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8004190:	9c02      	ldr	r4, [sp, #8]
 8004192:	e9c4 2300 	strd	r2, r3, [r4]
 8004196:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800419a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800419e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80041a2:	e035      	b.n	8004210 <__kernel_rem_pio2+0x590>
 80041a4:	3508      	adds	r5, #8
 80041a6:	ab48      	add	r3, sp, #288	; 0x120
 80041a8:	441d      	add	r5, r3
 80041aa:	4626      	mov	r6, r4
 80041ac:	2000      	movs	r0, #0
 80041ae:	2100      	movs	r1, #0
 80041b0:	2e00      	cmp	r6, #0
 80041b2:	da3c      	bge.n	800422e <__kernel_rem_pio2+0x5ae>
 80041b4:	f1bb 0f00 	cmp.w	fp, #0
 80041b8:	d03f      	beq.n	800423a <__kernel_rem_pio2+0x5ba>
 80041ba:	4602      	mov	r2, r0
 80041bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80041c0:	9d02      	ldr	r5, [sp, #8]
 80041c2:	e9c5 2300 	strd	r2, r3, [r5]
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80041ce:	f7fb ffff 	bl	80001d0 <__aeabi_dsub>
 80041d2:	ae4a      	add	r6, sp, #296	; 0x128
 80041d4:	2501      	movs	r5, #1
 80041d6:	42ac      	cmp	r4, r5
 80041d8:	da32      	bge.n	8004240 <__kernel_rem_pio2+0x5c0>
 80041da:	f1bb 0f00 	cmp.w	fp, #0
 80041de:	d002      	beq.n	80041e6 <__kernel_rem_pio2+0x566>
 80041e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80041e4:	4619      	mov	r1, r3
 80041e6:	9b02      	ldr	r3, [sp, #8]
 80041e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80041ec:	e010      	b.n	8004210 <__kernel_rem_pio2+0x590>
 80041ee:	ab98      	add	r3, sp, #608	; 0x260
 80041f0:	441d      	add	r5, r3
 80041f2:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80041f6:	2000      	movs	r0, #0
 80041f8:	2100      	movs	r1, #0
 80041fa:	2c00      	cmp	r4, #0
 80041fc:	da11      	bge.n	8004222 <__kernel_rem_pio2+0x5a2>
 80041fe:	f1bb 0f00 	cmp.w	fp, #0
 8004202:	d002      	beq.n	800420a <__kernel_rem_pio2+0x58a>
 8004204:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004208:	4619      	mov	r1, r3
 800420a:	9b02      	ldr	r3, [sp, #8]
 800420c:	e9c3 0100 	strd	r0, r1, [r3]
 8004210:	9b03      	ldr	r3, [sp, #12]
 8004212:	f003 0007 	and.w	r0, r3, #7
 8004216:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800421a:	ecbd 8b02 	vpop	{d8}
 800421e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004222:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004226:	f7fb ffd5 	bl	80001d4 <__adddf3>
 800422a:	3c01      	subs	r4, #1
 800422c:	e7e5      	b.n	80041fa <__kernel_rem_pio2+0x57a>
 800422e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004232:	f7fb ffcf 	bl	80001d4 <__adddf3>
 8004236:	3e01      	subs	r6, #1
 8004238:	e7ba      	b.n	80041b0 <__kernel_rem_pio2+0x530>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	e7bf      	b.n	80041c0 <__kernel_rem_pio2+0x540>
 8004240:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004244:	f7fb ffc6 	bl	80001d4 <__adddf3>
 8004248:	3501      	adds	r5, #1
 800424a:	e7c4      	b.n	80041d6 <__kernel_rem_pio2+0x556>
 800424c:	ed16 7b02 	vldr	d7, [r6, #-8]
 8004250:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8004254:	ec53 2b17 	vmov	r2, r3, d7
 8004258:	4640      	mov	r0, r8
 800425a:	4649      	mov	r1, r9
 800425c:	ed8d 7b00 	vstr	d7, [sp]
 8004260:	f7fb ffb8 	bl	80001d4 <__adddf3>
 8004264:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4640      	mov	r0, r8
 800426e:	4649      	mov	r1, r9
 8004270:	f7fb ffae 	bl	80001d0 <__aeabi_dsub>
 8004274:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004278:	f7fb ffac 	bl	80001d4 <__adddf3>
 800427c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004280:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8004284:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004288:	ed06 7b02 	vstr	d7, [r6, #-8]
 800428c:	e76c      	b.n	8004168 <__kernel_rem_pio2+0x4e8>
 800428e:	ed16 7b02 	vldr	d7, [r6, #-8]
 8004292:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8004296:	ec53 2b17 	vmov	r2, r3, d7
 800429a:	4640      	mov	r0, r8
 800429c:	4649      	mov	r1, r9
 800429e:	ed8d 7b00 	vstr	d7, [sp]
 80042a2:	f7fb ff97 	bl	80001d4 <__adddf3>
 80042a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4640      	mov	r0, r8
 80042b0:	4649      	mov	r1, r9
 80042b2:	f7fb ff8d 	bl	80001d0 <__aeabi_dsub>
 80042b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042ba:	f7fb ff8b 	bl	80001d4 <__adddf3>
 80042be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80042c2:	e966 0102 	strd	r0, r1, [r6, #-8]!
 80042c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042ca:	ed06 7b02 	vstr	d7, [r6, #-8]
 80042ce:	e750      	b.n	8004172 <__kernel_rem_pio2+0x4f2>
 80042d0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80042d4:	f7fb ff7e 	bl	80001d4 <__adddf3>
 80042d8:	3c01      	subs	r4, #1
 80042da:	e750      	b.n	800417e <__kernel_rem_pio2+0x4fe>
 80042dc:	9a02      	ldr	r2, [sp, #8]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6110      	str	r0, [r2, #16]
 80042e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80042ea:	6053      	str	r3, [r2, #4]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6093      	str	r3, [r2, #8]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80042f6:	60d3      	str	r3, [r2, #12]
 80042f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042fc:	6153      	str	r3, [r2, #20]
 80042fe:	e787      	b.n	8004210 <__kernel_rem_pio2+0x590>
 8004300:	00000000 	.word	0x00000000
 8004304:	3ff00000 	.word	0x3ff00000
	...
 8004310:	08004860 	.word	0x08004860
 8004314:	41700000 	.word	0x41700000
 8004318:	3e700000 	.word	0x3e700000
 800431c:	00000000 	.word	0x00000000

08004320 <__kernel_sin>:
 8004320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004324:	ec55 4b10 	vmov	r4, r5, d0
 8004328:	b085      	sub	sp, #20
 800432a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800432e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004332:	ed8d 1b00 	vstr	d1, [sp]
 8004336:	9002      	str	r0, [sp, #8]
 8004338:	da06      	bge.n	8004348 <__kernel_sin+0x28>
 800433a:	ee10 0a10 	vmov	r0, s0
 800433e:	4629      	mov	r1, r5
 8004340:	f7fc fb94 	bl	8000a6c <__aeabi_d2iz>
 8004344:	2800      	cmp	r0, #0
 8004346:	d051      	beq.n	80043ec <__kernel_sin+0xcc>
 8004348:	4622      	mov	r2, r4
 800434a:	462b      	mov	r3, r5
 800434c:	4620      	mov	r0, r4
 800434e:	4629      	mov	r1, r5
 8004350:	f7fc f8f2 	bl	8000538 <__aeabi_dmul>
 8004354:	4682      	mov	sl, r0
 8004356:	468b      	mov	fp, r1
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4620      	mov	r0, r4
 800435e:	4629      	mov	r1, r5
 8004360:	f7fc f8ea 	bl	8000538 <__aeabi_dmul>
 8004364:	a341      	add	r3, pc, #260	; (adr r3, 800446c <__kernel_sin+0x14c>)
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	4680      	mov	r8, r0
 800436c:	4689      	mov	r9, r1
 800436e:	4650      	mov	r0, sl
 8004370:	4659      	mov	r1, fp
 8004372:	f7fc f8e1 	bl	8000538 <__aeabi_dmul>
 8004376:	a33f      	add	r3, pc, #252	; (adr r3, 8004474 <__kernel_sin+0x154>)
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f7fb ff28 	bl	80001d0 <__aeabi_dsub>
 8004380:	4652      	mov	r2, sl
 8004382:	465b      	mov	r3, fp
 8004384:	f7fc f8d8 	bl	8000538 <__aeabi_dmul>
 8004388:	a33c      	add	r3, pc, #240	; (adr r3, 800447c <__kernel_sin+0x15c>)
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f7fb ff21 	bl	80001d4 <__adddf3>
 8004392:	4652      	mov	r2, sl
 8004394:	465b      	mov	r3, fp
 8004396:	f7fc f8cf 	bl	8000538 <__aeabi_dmul>
 800439a:	a33a      	add	r3, pc, #232	; (adr r3, 8004484 <__kernel_sin+0x164>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fb ff16 	bl	80001d0 <__aeabi_dsub>
 80043a4:	4652      	mov	r2, sl
 80043a6:	465b      	mov	r3, fp
 80043a8:	f7fc f8c6 	bl	8000538 <__aeabi_dmul>
 80043ac:	a337      	add	r3, pc, #220	; (adr r3, 800448c <__kernel_sin+0x16c>)
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f7fb ff0f 	bl	80001d4 <__adddf3>
 80043b6:	9b02      	ldr	r3, [sp, #8]
 80043b8:	4606      	mov	r6, r0
 80043ba:	460f      	mov	r7, r1
 80043bc:	b9db      	cbnz	r3, 80043f6 <__kernel_sin+0xd6>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4650      	mov	r0, sl
 80043c4:	4659      	mov	r1, fp
 80043c6:	f7fc f8b7 	bl	8000538 <__aeabi_dmul>
 80043ca:	a325      	add	r3, pc, #148	; (adr r3, 8004460 <__kernel_sin+0x140>)
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f7fb fefe 	bl	80001d0 <__aeabi_dsub>
 80043d4:	4642      	mov	r2, r8
 80043d6:	464b      	mov	r3, r9
 80043d8:	f7fc f8ae 	bl	8000538 <__aeabi_dmul>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4620      	mov	r0, r4
 80043e2:	4629      	mov	r1, r5
 80043e4:	f7fb fef6 	bl	80001d4 <__adddf3>
 80043e8:	4604      	mov	r4, r0
 80043ea:	460d      	mov	r5, r1
 80043ec:	ec45 4b10 	vmov	d0, r4, r5
 80043f0:	b005      	add	sp, #20
 80043f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f6:	2200      	movs	r2, #0
 80043f8:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <__kernel_sin+0x148>)
 80043fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043fe:	f7fc f89b 	bl	8000538 <__aeabi_dmul>
 8004402:	4632      	mov	r2, r6
 8004404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004408:	463b      	mov	r3, r7
 800440a:	4640      	mov	r0, r8
 800440c:	4649      	mov	r1, r9
 800440e:	f7fc f893 	bl	8000538 <__aeabi_dmul>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800441a:	f7fb fed9 	bl	80001d0 <__aeabi_dsub>
 800441e:	4652      	mov	r2, sl
 8004420:	465b      	mov	r3, fp
 8004422:	f7fc f889 	bl	8000538 <__aeabi_dmul>
 8004426:	e9dd 2300 	ldrd	r2, r3, [sp]
 800442a:	f7fb fed1 	bl	80001d0 <__aeabi_dsub>
 800442e:	a30c      	add	r3, pc, #48	; (adr r3, 8004460 <__kernel_sin+0x140>)
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	4606      	mov	r6, r0
 8004436:	460f      	mov	r7, r1
 8004438:	4640      	mov	r0, r8
 800443a:	4649      	mov	r1, r9
 800443c:	f7fc f87c 	bl	8000538 <__aeabi_dmul>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4630      	mov	r0, r6
 8004446:	4639      	mov	r1, r7
 8004448:	f7fb fec4 	bl	80001d4 <__adddf3>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4620      	mov	r0, r4
 8004452:	4629      	mov	r1, r5
 8004454:	f7fb febc 	bl	80001d0 <__aeabi_dsub>
 8004458:	e7c6      	b.n	80043e8 <__kernel_sin+0xc8>
 800445a:	bf00      	nop
 800445c:	f3af 8000 	nop.w
 8004460:	55555549 	.word	0x55555549
 8004464:	3fc55555 	.word	0x3fc55555
 8004468:	3fe00000 	.word	0x3fe00000
 800446c:	5acfd57c 	.word	0x5acfd57c
 8004470:	3de5d93a 	.word	0x3de5d93a
 8004474:	8a2b9ceb 	.word	0x8a2b9ceb
 8004478:	3e5ae5e6 	.word	0x3e5ae5e6
 800447c:	57b1fe7d 	.word	0x57b1fe7d
 8004480:	3ec71de3 	.word	0x3ec71de3
 8004484:	19c161d5 	.word	0x19c161d5
 8004488:	3f2a01a0 	.word	0x3f2a01a0
 800448c:	1110f8a6 	.word	0x1110f8a6
 8004490:	3f811111 	.word	0x3f811111

08004494 <fabs>:
 8004494:	ec53 2b10 	vmov	r2, r3, d0
 8004498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800449c:	ec43 2b10 	vmov	d0, r2, r3
 80044a0:	4770      	bx	lr
 80044a2:	0000      	movs	r0, r0
 80044a4:	0000      	movs	r0, r0
	...

080044a8 <floor>:
 80044a8:	ec51 0b10 	vmov	r0, r1, d0
 80044ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80044b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80044b8:	2e13      	cmp	r6, #19
 80044ba:	ee10 8a10 	vmov	r8, s0
 80044be:	460c      	mov	r4, r1
 80044c0:	ee10 5a10 	vmov	r5, s0
 80044c4:	dc35      	bgt.n	8004532 <floor+0x8a>
 80044c6:	2e00      	cmp	r6, #0
 80044c8:	da17      	bge.n	80044fa <floor+0x52>
 80044ca:	a335      	add	r3, pc, #212	; (adr r3, 80045a0 <floor+0xf8>)
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f7fb fe80 	bl	80001d4 <__adddf3>
 80044d4:	2200      	movs	r2, #0
 80044d6:	2300      	movs	r3, #0
 80044d8:	f7fc fabe 	bl	8000a58 <__aeabi_dcmpgt>
 80044dc:	b150      	cbz	r0, 80044f4 <floor+0x4c>
 80044de:	2c00      	cmp	r4, #0
 80044e0:	da5a      	bge.n	8004598 <floor+0xf0>
 80044e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80044e6:	ea53 0308 	orrs.w	r3, r3, r8
 80044ea:	4b2f      	ldr	r3, [pc, #188]	; (80045a8 <floor+0x100>)
 80044ec:	f04f 0500 	mov.w	r5, #0
 80044f0:	bf18      	it	ne
 80044f2:	461c      	movne	r4, r3
 80044f4:	4621      	mov	r1, r4
 80044f6:	4628      	mov	r0, r5
 80044f8:	e025      	b.n	8004546 <floor+0x9e>
 80044fa:	4f2c      	ldr	r7, [pc, #176]	; (80045ac <floor+0x104>)
 80044fc:	4137      	asrs	r7, r6
 80044fe:	ea01 0307 	and.w	r3, r1, r7
 8004502:	4303      	orrs	r3, r0
 8004504:	d01f      	beq.n	8004546 <floor+0x9e>
 8004506:	a326      	add	r3, pc, #152	; (adr r3, 80045a0 <floor+0xf8>)
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f7fb fe62 	bl	80001d4 <__adddf3>
 8004510:	2200      	movs	r2, #0
 8004512:	2300      	movs	r3, #0
 8004514:	f7fc faa0 	bl	8000a58 <__aeabi_dcmpgt>
 8004518:	2800      	cmp	r0, #0
 800451a:	d0eb      	beq.n	80044f4 <floor+0x4c>
 800451c:	2c00      	cmp	r4, #0
 800451e:	bfbe      	ittt	lt
 8004520:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004524:	fa43 f606 	asrlt.w	r6, r3, r6
 8004528:	19a4      	addlt	r4, r4, r6
 800452a:	ea24 0407 	bic.w	r4, r4, r7
 800452e:	2500      	movs	r5, #0
 8004530:	e7e0      	b.n	80044f4 <floor+0x4c>
 8004532:	2e33      	cmp	r6, #51	; 0x33
 8004534:	dd0b      	ble.n	800454e <floor+0xa6>
 8004536:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800453a:	d104      	bne.n	8004546 <floor+0x9e>
 800453c:	ee10 2a10 	vmov	r2, s0
 8004540:	460b      	mov	r3, r1
 8004542:	f7fb fe47 	bl	80001d4 <__adddf3>
 8004546:	ec41 0b10 	vmov	d0, r0, r1
 800454a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800454e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004552:	f04f 33ff 	mov.w	r3, #4294967295
 8004556:	fa23 f707 	lsr.w	r7, r3, r7
 800455a:	4238      	tst	r0, r7
 800455c:	d0f3      	beq.n	8004546 <floor+0x9e>
 800455e:	a310      	add	r3, pc, #64	; (adr r3, 80045a0 <floor+0xf8>)
 8004560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004564:	f7fb fe36 	bl	80001d4 <__adddf3>
 8004568:	2200      	movs	r2, #0
 800456a:	2300      	movs	r3, #0
 800456c:	f7fc fa74 	bl	8000a58 <__aeabi_dcmpgt>
 8004570:	2800      	cmp	r0, #0
 8004572:	d0bf      	beq.n	80044f4 <floor+0x4c>
 8004574:	2c00      	cmp	r4, #0
 8004576:	da02      	bge.n	800457e <floor+0xd6>
 8004578:	2e14      	cmp	r6, #20
 800457a:	d103      	bne.n	8004584 <floor+0xdc>
 800457c:	3401      	adds	r4, #1
 800457e:	ea25 0507 	bic.w	r5, r5, r7
 8004582:	e7b7      	b.n	80044f4 <floor+0x4c>
 8004584:	2301      	movs	r3, #1
 8004586:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800458a:	fa03 f606 	lsl.w	r6, r3, r6
 800458e:	4435      	add	r5, r6
 8004590:	45a8      	cmp	r8, r5
 8004592:	bf88      	it	hi
 8004594:	18e4      	addhi	r4, r4, r3
 8004596:	e7f2      	b.n	800457e <floor+0xd6>
 8004598:	2500      	movs	r5, #0
 800459a:	462c      	mov	r4, r5
 800459c:	e7aa      	b.n	80044f4 <floor+0x4c>
 800459e:	bf00      	nop
 80045a0:	8800759c 	.word	0x8800759c
 80045a4:	7e37e43c 	.word	0x7e37e43c
 80045a8:	bff00000 	.word	0xbff00000
 80045ac:	000fffff 	.word	0x000fffff

080045b0 <scalbn>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	ec55 4b10 	vmov	r4, r5, d0
 80045b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80045ba:	4606      	mov	r6, r0
 80045bc:	462b      	mov	r3, r5
 80045be:	b9b2      	cbnz	r2, 80045ee <scalbn+0x3e>
 80045c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80045c4:	4323      	orrs	r3, r4
 80045c6:	d03c      	beq.n	8004642 <scalbn+0x92>
 80045c8:	2200      	movs	r2, #0
 80045ca:	4b33      	ldr	r3, [pc, #204]	; (8004698 <scalbn+0xe8>)
 80045cc:	4629      	mov	r1, r5
 80045ce:	ee10 0a10 	vmov	r0, s0
 80045d2:	f7fb ffb1 	bl	8000538 <__aeabi_dmul>
 80045d6:	4a31      	ldr	r2, [pc, #196]	; (800469c <scalbn+0xec>)
 80045d8:	4296      	cmp	r6, r2
 80045da:	4604      	mov	r4, r0
 80045dc:	460d      	mov	r5, r1
 80045de:	460b      	mov	r3, r1
 80045e0:	da13      	bge.n	800460a <scalbn+0x5a>
 80045e2:	a329      	add	r3, pc, #164	; (adr r3, 8004688 <scalbn+0xd8>)
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f7fb ffa6 	bl	8000538 <__aeabi_dmul>
 80045ec:	e00a      	b.n	8004604 <scalbn+0x54>
 80045ee:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80045f2:	428a      	cmp	r2, r1
 80045f4:	d10c      	bne.n	8004610 <scalbn+0x60>
 80045f6:	ee10 2a10 	vmov	r2, s0
 80045fa:	462b      	mov	r3, r5
 80045fc:	4620      	mov	r0, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	f7fb fde8 	bl	80001d4 <__adddf3>
 8004604:	4604      	mov	r4, r0
 8004606:	460d      	mov	r5, r1
 8004608:	e01b      	b.n	8004642 <scalbn+0x92>
 800460a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800460e:	3a36      	subs	r2, #54	; 0x36
 8004610:	4432      	add	r2, r6
 8004612:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004616:	428a      	cmp	r2, r1
 8004618:	dd0b      	ble.n	8004632 <scalbn+0x82>
 800461a:	ec45 4b11 	vmov	d1, r4, r5
 800461e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004690 <scalbn+0xe0>
 8004622:	f000 f83f 	bl	80046a4 <copysign>
 8004626:	a31a      	add	r3, pc, #104	; (adr r3, 8004690 <scalbn+0xe0>)
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	ec51 0b10 	vmov	r0, r1, d0
 8004630:	e7da      	b.n	80045e8 <scalbn+0x38>
 8004632:	2a00      	cmp	r2, #0
 8004634:	dd08      	ble.n	8004648 <scalbn+0x98>
 8004636:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800463a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800463e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004642:	ec45 4b10 	vmov	d0, r4, r5
 8004646:	bd70      	pop	{r4, r5, r6, pc}
 8004648:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800464c:	da0d      	bge.n	800466a <scalbn+0xba>
 800464e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004652:	429e      	cmp	r6, r3
 8004654:	ec45 4b11 	vmov	d1, r4, r5
 8004658:	dce1      	bgt.n	800461e <scalbn+0x6e>
 800465a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8004688 <scalbn+0xd8>
 800465e:	f000 f821 	bl	80046a4 <copysign>
 8004662:	a309      	add	r3, pc, #36	; (adr r3, 8004688 <scalbn+0xd8>)
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	e7e0      	b.n	800462c <scalbn+0x7c>
 800466a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800466e:	3236      	adds	r2, #54	; 0x36
 8004670:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004674:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004678:	4620      	mov	r0, r4
 800467a:	4629      	mov	r1, r5
 800467c:	2200      	movs	r2, #0
 800467e:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <scalbn+0xf0>)
 8004680:	e7b2      	b.n	80045e8 <scalbn+0x38>
 8004682:	bf00      	nop
 8004684:	f3af 8000 	nop.w
 8004688:	c2f8f359 	.word	0xc2f8f359
 800468c:	01a56e1f 	.word	0x01a56e1f
 8004690:	8800759c 	.word	0x8800759c
 8004694:	7e37e43c 	.word	0x7e37e43c
 8004698:	43500000 	.word	0x43500000
 800469c:	ffff3cb0 	.word	0xffff3cb0
 80046a0:	3c900000 	.word	0x3c900000

080046a4 <copysign>:
 80046a4:	ec53 2b10 	vmov	r2, r3, d0
 80046a8:	ee11 0a90 	vmov	r0, s3
 80046ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80046b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80046b4:	ea41 0300 	orr.w	r3, r1, r0
 80046b8:	ec43 2b10 	vmov	d0, r2, r3
 80046bc:	4770      	bx	lr
	...

080046c0 <_init>:
 80046c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c2:	bf00      	nop
 80046c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c6:	bc08      	pop	{r3}
 80046c8:	469e      	mov	lr, r3
 80046ca:	4770      	bx	lr

080046cc <_fini>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr
