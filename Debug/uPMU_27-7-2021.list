
uPMU_27-7-2021.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001074  08001074  00011074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800108c  0800108c  0001108c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001090  08001090  00011090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08001094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .bss          000000a0  20000028  20000028  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000c8  200000c8  00020028  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   000060ab  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001594  00000000  00000000  00026103  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007c8  00000000  00000000  00027698  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006e0  00000000  00000000  00027e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002caa  00000000  00000000  00028540  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000283e  00000000  00000000  0002b1ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002da28  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ec4  00000000  00000000  0002daa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002f968  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000028 	.word	0x20000028
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800105c 	.word	0x0800105c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	0800105c 	.word	0x0800105c

080001c8 <init>:

#include "init.h"

uint8_t style = 0x00;
uint8_t LEDS[4] = {LED3,LED5,LED6,LED4};
void init(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

	  /* TODO - Add your application code here */

	  /* Initialize LEDs */
	  STM_EVAL_LEDInit(LED3);
 80001cc:	2001      	movs	r0, #1
 80001ce:	f000 fa73 	bl	80006b8 <STM_EVAL_LEDInit>
	  STM_EVAL_LEDInit(LED4);
 80001d2:	2000      	movs	r0, #0
 80001d4:	f000 fa70 	bl	80006b8 <STM_EVAL_LEDInit>
	  STM_EVAL_LEDInit(LED5);
 80001d8:	2002      	movs	r0, #2
 80001da:	f000 fa6d 	bl	80006b8 <STM_EVAL_LEDInit>
	  STM_EVAL_LEDInit(LED6);
 80001de:	2003      	movs	r0, #3
 80001e0:	f000 fa6a 	bl	80006b8 <STM_EVAL_LEDInit>
	  STM_EVAL_PBInit(BUTTON_USER, BUTTON_MODE_EXTI);
 80001e4:	2101      	movs	r1, #1
 80001e6:	2000      	movs	r0, #0
 80001e8:	f000 fac4 	bl	8000774 <STM_EVAL_PBInit>

}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <play>:

void play(void){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0

	static uint8_t i = 0;
	/* Turn on LEDs */
	//STM_EVAL_LEDToggle(LEDS[i%4]);

	switch(style % 4){
 80001f4:	4b50      	ldr	r3, [pc, #320]	; (8000338 <play+0x148>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	f003 0303 	and.w	r3, r3, #3
 80001fc:	2b03      	cmp	r3, #3
 80001fe:	f200 8099 	bhi.w	8000334 <play+0x144>
 8000202:	a201      	add	r2, pc, #4	; (adr r2, 8000208 <play+0x18>)
 8000204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000208:	08000219 	.word	0x08000219
 800020c:	0800024b 	.word	0x0800024b
 8000210:	080002a7 	.word	0x080002a7
 8000214:	080002d9 	.word	0x080002d9
	case 0:
		  STM_EVAL_LEDOff(LEDS[  i%4]);
 8000218:	4b48      	ldr	r3, [pc, #288]	; (800033c <play+0x14c>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	f003 0303 	and.w	r3, r3, #3
 8000220:	4a47      	ldr	r2, [pc, #284]	; (8000340 <play+0x150>)
 8000222:	5cd3      	ldrb	r3, [r2, r3]
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fa8d 	bl	8000744 <STM_EVAL_LEDOff>
		  STM_EVAL_LEDOn (LEDS[++i%4]);
 800022a:	4b44      	ldr	r3, [pc, #272]	; (800033c <play+0x14c>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	3301      	adds	r3, #1
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4b42      	ldr	r3, [pc, #264]	; (800033c <play+0x14c>)
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	4b41      	ldr	r3, [pc, #260]	; (800033c <play+0x14c>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	f003 0303 	and.w	r3, r3, #3
 800023e:	4a40      	ldr	r2, [pc, #256]	; (8000340 <play+0x150>)
 8000240:	5cd3      	ldrb	r3, [r2, r3]
 8000242:	4618      	mov	r0, r3
 8000244:	f000 fa66 	bl	8000714 <STM_EVAL_LEDOn>
		break;
 8000248:	e074      	b.n	8000334 <play+0x144>
	case 1:
		  STM_EVAL_LEDOff(LEDS[--i%4]);
 800024a:	4b3c      	ldr	r3, [pc, #240]	; (800033c <play+0x14c>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	3b01      	subs	r3, #1
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4b3a      	ldr	r3, [pc, #232]	; (800033c <play+0x14c>)
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	4b39      	ldr	r3, [pc, #228]	; (800033c <play+0x14c>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	f003 0303 	and.w	r3, r3, #3
 800025e:	4a38      	ldr	r2, [pc, #224]	; (8000340 <play+0x150>)
 8000260:	5cd3      	ldrb	r3, [r2, r3]
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fa6e 	bl	8000744 <STM_EVAL_LEDOff>
		  STM_EVAL_LEDOn (LEDS[++i%4]);
 8000268:	4b34      	ldr	r3, [pc, #208]	; (800033c <play+0x14c>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	3301      	adds	r3, #1
 800026e:	b2da      	uxtb	r2, r3
 8000270:	4b32      	ldr	r3, [pc, #200]	; (800033c <play+0x14c>)
 8000272:	701a      	strb	r2, [r3, #0]
 8000274:	4b31      	ldr	r3, [pc, #196]	; (800033c <play+0x14c>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	f003 0303 	and.w	r3, r3, #3
 800027c:	4a30      	ldr	r2, [pc, #192]	; (8000340 <play+0x150>)
 800027e:	5cd3      	ldrb	r3, [r2, r3]
 8000280:	4618      	mov	r0, r3
 8000282:	f000 fa47 	bl	8000714 <STM_EVAL_LEDOn>
		  STM_EVAL_LEDOn (LEDS[++i%4]);
 8000286:	4b2d      	ldr	r3, [pc, #180]	; (800033c <play+0x14c>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	3301      	adds	r3, #1
 800028c:	b2da      	uxtb	r2, r3
 800028e:	4b2b      	ldr	r3, [pc, #172]	; (800033c <play+0x14c>)
 8000290:	701a      	strb	r2, [r3, #0]
 8000292:	4b2a      	ldr	r3, [pc, #168]	; (800033c <play+0x14c>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	f003 0303 	and.w	r3, r3, #3
 800029a:	4a29      	ldr	r2, [pc, #164]	; (8000340 <play+0x150>)
 800029c:	5cd3      	ldrb	r3, [r2, r3]
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fa38 	bl	8000714 <STM_EVAL_LEDOn>
		break;
 80002a4:	e046      	b.n	8000334 <play+0x144>
	case 2:
		  STM_EVAL_LEDOn (LEDS[  i%4]);
 80002a6:	4b25      	ldr	r3, [pc, #148]	; (800033c <play+0x14c>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	f003 0303 	and.w	r3, r3, #3
 80002ae:	4a24      	ldr	r2, [pc, #144]	; (8000340 <play+0x150>)
 80002b0:	5cd3      	ldrb	r3, [r2, r3]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fa2e 	bl	8000714 <STM_EVAL_LEDOn>
		  STM_EVAL_LEDOff(LEDS[++i%4]);
 80002b8:	4b20      	ldr	r3, [pc, #128]	; (800033c <play+0x14c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	3301      	adds	r3, #1
 80002be:	b2da      	uxtb	r2, r3
 80002c0:	4b1e      	ldr	r3, [pc, #120]	; (800033c <play+0x14c>)
 80002c2:	701a      	strb	r2, [r3, #0]
 80002c4:	4b1d      	ldr	r3, [pc, #116]	; (800033c <play+0x14c>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	f003 0303 	and.w	r3, r3, #3
 80002cc:	4a1c      	ldr	r2, [pc, #112]	; (8000340 <play+0x150>)
 80002ce:	5cd3      	ldrb	r3, [r2, r3]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fa37 	bl	8000744 <STM_EVAL_LEDOff>
		break;
 80002d6:	e02d      	b.n	8000334 <play+0x144>
	case 3:
		  STM_EVAL_LEDOn (LEDS[--i%4]);
 80002d8:	4b18      	ldr	r3, [pc, #96]	; (800033c <play+0x14c>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	3b01      	subs	r3, #1
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <play+0x14c>)
 80002e2:	701a      	strb	r2, [r3, #0]
 80002e4:	4b15      	ldr	r3, [pc, #84]	; (800033c <play+0x14c>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	f003 0303 	and.w	r3, r3, #3
 80002ec:	4a14      	ldr	r2, [pc, #80]	; (8000340 <play+0x150>)
 80002ee:	5cd3      	ldrb	r3, [r2, r3]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 fa0f 	bl	8000714 <STM_EVAL_LEDOn>
		  STM_EVAL_LEDOff(LEDS[++i%4]);
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <play+0x14c>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	3301      	adds	r3, #1
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <play+0x14c>)
 8000300:	701a      	strb	r2, [r3, #0]
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <play+0x14c>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	f003 0303 	and.w	r3, r3, #3
 800030a:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <play+0x150>)
 800030c:	5cd3      	ldrb	r3, [r2, r3]
 800030e:	4618      	mov	r0, r3
 8000310:	f000 fa18 	bl	8000744 <STM_EVAL_LEDOff>
		  STM_EVAL_LEDOff(LEDS[++i%4]);
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <play+0x14c>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	3301      	adds	r3, #1
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <play+0x14c>)
 800031e:	701a      	strb	r2, [r3, #0]
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <play+0x14c>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	f003 0303 	and.w	r3, r3, #3
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <play+0x150>)
 800032a:	5cd3      	ldrb	r3, [r2, r3]
 800032c:	4618      	mov	r0, r3
 800032e:	f000 fa09 	bl	8000744 <STM_EVAL_LEDOff>
		break;
 8000332:	bf00      	nop
	}
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000044 	.word	0x20000044
 800033c:	20000045 	.word	0x20000045
 8000340:	20000000 	.word	0x20000000

08000344 <EXTI0_IRQHandler>:

/* Set interrupt handlers */
/* Handle PD0 interrupt */
void EXTI0_IRQHandler(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
    /* Make sure that interrupt flag is set */
    if (EXTI_GetITStatus(EXTI_Line0) != RESET) {
 8000348:	2001      	movs	r0, #1
 800034a:	f000 fcf3 	bl	8000d34 <EXTI_GetITStatus>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI0_IRQHandler+0x22>
        /* Do your stuff when PD0 is changed */
        ++style;
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <EXTI0_IRQHandler+0x28>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b03      	ldr	r3, [pc, #12]	; (800036c <EXTI0_IRQHandler+0x28>)
 800035e:	701a      	strb	r2, [r3, #0]

        /* Clear interrupt flag */
        EXTI_ClearITPendingBit(EXTI_Line0);
 8000360:	2001      	movs	r0, #1
 8000362:	f000 fd0b 	bl	8000d7c <EXTI_ClearITPendingBit>
    }
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000044 	.word	0x20000044

08000370 <delay_ms>:

void delay_ms(uint32_t ms){
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	uint32_t now = get_counter();
 8000378:	f000 f8e0 	bl	800053c <get_counter>
 800037c:	4603      	mov	r3, r0
 800037e:	60fb      	str	r3, [r7, #12]
	while(((get_counter()- now) < ms));
 8000380:	bf00      	nop
 8000382:	f000 f8db 	bl	800053c <get_counter>
 8000386:	4603      	mov	r3, r0
 8000388:	461a      	mov	r2, r3
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	1ad2      	subs	r2, r2, r3
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	429a      	cmp	r2, r3
 8000392:	d3f6      	bcc.n	8000382 <delay_ms+0x12>
}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	6039      	str	r1, [r7, #0]
 80003a6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80003a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	da0b      	bge.n	80003c8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80003b0:	490d      	ldr	r1, [pc, #52]	; (80003e8 <NVIC_SetPriority+0x4c>)
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	3b04      	subs	r3, #4
 80003ba:	683a      	ldr	r2, [r7, #0]
 80003bc:	b2d2      	uxtb	r2, r2
 80003be:	0112      	lsls	r2, r2, #4
 80003c0:	b2d2      	uxtb	r2, r2
 80003c2:	440b      	add	r3, r1
 80003c4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80003c6:	e009      	b.n	80003dc <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80003c8:	4908      	ldr	r1, [pc, #32]	; (80003ec <NVIC_SetPriority+0x50>)
 80003ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ce:	683a      	ldr	r2, [r7, #0]
 80003d0:	b2d2      	uxtb	r2, r2
 80003d2:	0112      	lsls	r2, r2, #4
 80003d4:	b2d2      	uxtb	r2, r2
 80003d6:	440b      	add	r3, r1
 80003d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	e000ed00 	.word	0xe000ed00
 80003ec:	e000e100 	.word	0xe000e100

080003f0 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003fe:	d301      	bcc.n	8000404 <SysTick_Config+0x14>
 8000400:	2301      	movs	r3, #1
 8000402:	e011      	b.n	8000428 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000404:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <SysTick_Config+0x40>)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800040c:	3b01      	subs	r3, #1
 800040e:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000410:	210f      	movs	r1, #15
 8000412:	f04f 30ff 	mov.w	r0, #4294967295
 8000416:	f7ff ffc1 	bl	800039c <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800041a:	4b05      	ldr	r3, [pc, #20]	; (8000430 <SysTick_Config+0x40>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000420:	4b03      	ldr	r3, [pc, #12]	; (8000430 <SysTick_Config+0x40>)
 8000422:	2207      	movs	r2, #7
 8000424:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000426:	2300      	movs	r3, #0
}
 8000428:	4618      	mov	r0, r3
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	e000e010 	.word	0xe000e010

08000434 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  *  Otherwise the interrupt table located in flash will be used.
  *  See also the <system_*.c> file and how the SystemInit() function updates 
  *  SCB->VTOR register.  
  *  E.g.  SCB->VTOR = 0x20000000;  
  */
  SysTick_Config((uint32_t) 168000);
 8000438:	4805      	ldr	r0, [pc, #20]	; (8000450 <main+0x1c>)
 800043a:	f7ff ffd9 	bl	80003f0 <SysTick_Config>
  init();
 800043e:	f7ff fec3 	bl	80001c8 <init>

  /* Infinite loop */
  while (1)
  {
	  //for(uint32_t j=0;j<1000000;j++);
	  delay_ms(200);
 8000442:	20c8      	movs	r0, #200	; 0xc8
 8000444:	f7ff ff94 	bl	8000370 <delay_ms>
	  play();
 8000448:	f7ff fed2 	bl	80001f0 <play>
	  delay_ms(200);
 800044c:	e7f9      	b.n	8000442 <main+0xe>
 800044e:	bf00      	nop
 8000450:	00029040 	.word	0x00029040

08000454 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800045e:	bf00      	nop
}
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000472:	4618      	mov	r0, r3
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800047c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000480:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000482:	e003      	b.n	800048c <LoopCopyDataInit>

08000484 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000486:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000488:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800048a:	3104      	adds	r1, #4

0800048c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800048c:	480b      	ldr	r0, [pc, #44]	; (80004bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000490:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000492:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000494:	d3f6      	bcc.n	8000484 <CopyDataInit>
  ldr  r2, =_sbss
 8000496:	4a0b      	ldr	r2, [pc, #44]	; (80004c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000498:	e002      	b.n	80004a0 <LoopFillZerobss>

0800049a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800049a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800049c:	f842 3b04 	str.w	r3, [r2], #4

080004a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004a4:	d3f9      	bcc.n	800049a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004a6:	f000 f855 	bl	8000554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004aa:	f000 fdb3 	bl	8001014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ae:	f7ff ffc1 	bl	8000434 <main>
  bx  lr    
 80004b2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004b8:	08001094 	.word	0x08001094
  ldr  r0, =_sdata
 80004bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004c0:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 80004c4:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 80004c8:	200000c8 	.word	0x200000c8

080004cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC_IRQHandler>

080004ce <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80004ce:	b480      	push	{r7}
 80004d0:	af00      	add	r7, sp, #0
}
 80004d2:	bf00      	nop
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <HardFault_Handler+0x4>

080004e2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <MemManage_Handler+0x4>

080004e8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <BusFault_Handler+0x4>

080004ee <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <UsageFault_Handler+0x4>

080004f4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
uint32_t counter;
void SysTick_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
	++counter;
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <SysTick_Handler+0x18>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	4a03      	ldr	r2, [pc, #12]	; (8000538 <SysTick_Handler+0x18>)
 800052c:	6013      	str	r3, [r2, #0]
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000048 	.word	0x20000048

0800053c <get_counter>:
uint32_t get_counter(void){
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	return counter;
 8000540:	4b03      	ldr	r3, [pc, #12]	; (8000550 <get_counter+0x14>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	20000048 	.word	0x20000048

08000554 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000558:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <SystemInit+0x60>)
 800055a:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <SystemInit+0x60>)
 800055c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000568:	4a13      	ldr	r2, [pc, #76]	; (80005b8 <SystemInit+0x64>)
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <SystemInit+0x64>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000574:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <SystemInit+0x64>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <SystemInit+0x64>)
 800057c:	4b0e      	ldr	r3, [pc, #56]	; (80005b8 <SystemInit+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000588:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800058a:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <SystemInit+0x64>)
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <SystemInit+0x68>)
 800058e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000590:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <SystemInit+0x64>)
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <SystemInit+0x64>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800059a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <SystemInit+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80005a2:	f000 f80d 	bl	80005c0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005a6:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <SystemInit+0x60>)
 80005a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ac:	609a      	str	r2, [r3, #8]
#endif
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	e000ed00 	.word	0xe000ed00
 80005b8:	40023800 	.word	0x40023800
 80005bc:	24003010 	.word	0x24003010

080005c0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	2300      	movs	r3, #0
 80005cc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80005ce:	4a36      	ldr	r2, [pc, #216]	; (80006a8 <SetSysClock+0xe8>)
 80005d0:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <SetSysClock+0xe8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005d8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80005da:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <SetSysClock+0xe8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3301      	adds	r3, #1
 80005e8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d103      	bne.n	80005f8 <SetSysClock+0x38>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005f6:	d1f0      	bne.n	80005da <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80005f8:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <SetSysClock+0xe8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000600:	2b00      	cmp	r3, #0
 8000602:	d002      	beq.n	800060a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000604:	2301      	movs	r3, #1
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	e001      	b.n	800060e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d142      	bne.n	800069a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000614:	4a24      	ldr	r2, [pc, #144]	; (80006a8 <SetSysClock+0xe8>)
 8000616:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <SetSysClock+0xe8>)
 8000618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000620:	4a22      	ldr	r2, [pc, #136]	; (80006ac <SetSysClock+0xec>)
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <SetSysClock+0xec>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800062c:	4a1e      	ldr	r2, [pc, #120]	; (80006a8 <SetSysClock+0xe8>)
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <SetSysClock+0xe8>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000634:	4a1c      	ldr	r2, [pc, #112]	; (80006a8 <SetSysClock+0xe8>)
 8000636:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <SetSysClock+0xe8>)
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800063e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000640:	4a19      	ldr	r2, [pc, #100]	; (80006a8 <SetSysClock+0xe8>)
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <SetSysClock+0xe8>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800064a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <SetSysClock+0xe8>)
 800064e:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <SetSysClock+0xf0>)
 8000650:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <SetSysClock+0xe8>)
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <SetSysClock+0xe8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800065c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800065e:	bf00      	nop
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <SetSysClock+0xe8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0f9      	beq.n	8000660 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <SetSysClock+0xf4>)
 800066e:	f240 6205 	movw	r2, #1541	; 0x605
 8000672:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000674:	4a0c      	ldr	r2, [pc, #48]	; (80006a8 <SetSysClock+0xe8>)
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <SetSysClock+0xe8>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	f023 0303 	bic.w	r3, r3, #3
 800067e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000680:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <SetSysClock+0xe8>)
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <SetSysClock+0xe8>)
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	f043 0302 	orr.w	r3, r3, #2
 800068a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800068c:	bf00      	nop
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <SetSysClock+0xe8>)
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	f003 030c 	and.w	r3, r3, #12
 8000696:	2b08      	cmp	r3, #8
 8000698:	d1f9      	bne.n	800068e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000
 80006b0:	07405408 	.word	0x07405408
 80006b4:	40023c00 	.word	0x40023c00

080006b8 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	4a10      	ldr	r2, [pc, #64]	; (8000708 <STM_EVAL_LEDInit+0x50>)
 80006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ca:	2101      	movs	r1, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fbf3 	bl	8000eb8 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <STM_EVAL_LEDInit+0x54>)
 80006d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80006dc:	2301      	movs	r3, #1
 80006de:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80006e8:	2302      	movs	r3, #2
 80006ea:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <STM_EVAL_LEDInit+0x58>)
 80006f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f4:	f107 0208 	add.w	r2, r7, #8
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fb4e 	bl	8000d9c <GPIO_Init>
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	0800107c 	.word	0x0800107c
 800070c:	08001074 	.word	0x08001074
 8000710:	20000004 	.word	0x20000004

08000714 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <STM_EVAL_LEDOn+0x28>)
 8000722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	4905      	ldr	r1, [pc, #20]	; (8000740 <STM_EVAL_LEDOn+0x2c>)
 800072a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800072e:	831a      	strh	r2, [r3, #24]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	20000004 	.word	0x20000004
 8000740:	08001074 	.word	0x08001074

08000744 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <STM_EVAL_LEDOff+0x28>)
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	79fa      	ldrb	r2, [r7, #7]
 8000758:	4905      	ldr	r1, [pc, #20]	; (8000770 <STM_EVAL_LEDOff+0x2c>)
 800075a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800075e:	835a      	strh	r2, [r3, #26]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	20000004 	.word	0x20000004
 8000770:	08001074 	.word	0x08001074

08000774 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8000784:	2301      	movs	r3, #1
 8000786:	2101      	movs	r1, #1
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fb95 	bl	8000eb8 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800078e:	2101      	movs	r1, #1
 8000790:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000794:	f000 fbb0 	bl	8000ef8 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000798:	2300      	movs	r3, #0
 800079a:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 80007a0:	2301      	movs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <STM_EVAL_PBInit+0x94>)
 80007a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ac:	f107 0218 	add.w	r2, r7, #24
 80007b0:	4611      	mov	r1, r2
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 faf2 	bl	8000d9c <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 80007b8:	79bb      	ldrb	r3, [r7, #6]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d11f      	bne.n	80007fe <STM_EVAL_PBInit+0x8a>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 80007be:	2300      	movs	r3, #0
 80007c0:	2200      	movs	r2, #0
 80007c2:	4611      	mov	r1, r2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fbe3 	bl	8000f90 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 80007ca:	2301      	movs	r3, #1
 80007cc:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80007ce:	2300      	movs	r3, #0
 80007d0:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 80007d2:	2308      	movs	r3, #8
 80007d4:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80007d6:	2301      	movs	r3, #1
 80007d8:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 80007da:	f107 0310 	add.w	r3, r7, #16
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 fa36 	bl	8000c50 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 80007e4:	2306      	movs	r3, #6
 80007e6:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 80007e8:	230f      	movs	r3, #15
 80007ea:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 80007ec:	230f      	movs	r3, #15
 80007ee:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80007f0:	2301      	movs	r3, #1
 80007f2:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f8b5 	bl	8000968 <NVIC_Init>
  }
}
 80007fe:	bf00      	nop
 8000800:	3720      	adds	r7, #32
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000014 	.word	0x20000014

0800080c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000810:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <Audio_MAL_IRQHandler+0xe8>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <Audio_MAL_IRQHandler+0xec>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	4610      	mov	r0, r2
 800081c:	f000 f9ae 	bl	8000b7c <DMA_GetFlagStatus>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d064      	beq.n	80008f0 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000826:	4b35      	ldr	r3, [pc, #212]	; (80008fc <Audio_MAL_IRQHandler+0xf0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d04c      	beq.n	80008c8 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 800082e:	bf00      	nop
 8000830:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <Audio_MAL_IRQHandler+0xe8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f989 	bl	8000b4c <DMA_GetCmdStatus>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f7      	bne.n	8000830 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000840:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <Audio_MAL_IRQHandler+0xe8>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <Audio_MAL_IRQHandler+0xec>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4619      	mov	r1, r3
 800084a:	4610      	mov	r0, r2
 800084c:	f000 f9d2 	bl	8000bf4 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000850:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <Audio_MAL_IRQHandler+0xf4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <Audio_MAL_IRQHandler+0xf8>)
 8000858:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <Audio_MAL_IRQHandler+0xf0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000862:	4293      	cmp	r3, r2
 8000864:	bf28      	it	cs
 8000866:	4613      	movcs	r3, r2
 8000868:	4a26      	ldr	r2, [pc, #152]	; (8000904 <Audio_MAL_IRQHandler+0xf8>)
 800086a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <Audio_MAL_IRQHandler+0xe8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4924      	ldr	r1, [pc, #144]	; (8000904 <Audio_MAL_IRQHandler+0xf8>)
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f8f6 	bl	8000a64 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <Audio_MAL_IRQHandler+0xe8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2101      	movs	r1, #1
 800087e:	4618      	mov	r0, r3
 8000880:	f000 f948 	bl	8000b14 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <Audio_MAL_IRQHandler+0xf4>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <Audio_MAL_IRQHandler+0xf0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000890:	d203      	bcs.n	800089a <Audio_MAL_IRQHandler+0x8e>
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <Audio_MAL_IRQHandler+0xf0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	e000      	b.n	800089c <Audio_MAL_IRQHandler+0x90>
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <Audio_MAL_IRQHandler+0xfc>)
 800089c:	4413      	add	r3, r2
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <Audio_MAL_IRQHandler+0xf4>)
 80008a0:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <Audio_MAL_IRQHandler+0xf0>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <Audio_MAL_IRQHandler+0xf0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008ae:	428b      	cmp	r3, r1
 80008b0:	bf28      	it	cs
 80008b2:	460b      	movcs	r3, r1
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <Audio_MAL_IRQHandler+0xf0>)
 80008b8:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <Audio_MAL_IRQHandler+0xe8>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	2101      	movs	r1, #1
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f927 	bl	8000b14 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80008c6:	e013      	b.n	80008f0 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <Audio_MAL_IRQHandler+0xe8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f920 	bl	8000b14 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <Audio_MAL_IRQHandler+0xe8>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <Audio_MAL_IRQHandler+0xec>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4619      	mov	r1, r3
 80008de:	4610      	mov	r0, r2
 80008e0:	f000 f988 	bl	8000bf4 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <Audio_MAL_IRQHandler+0xf4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fdb2 	bl	8000454 <EVAL_AUDIO_TransferComplete_CallBack>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000020 	.word	0x20000020
 80008f8:	20000024 	.word	0x20000024
 80008fc:	20000018 	.word	0x20000018
 8000900:	2000004c 	.word	0x2000004c
 8000904:	2000008c 	.word	0x2000008c
 8000908:	0001fffe 	.word	0x0001fffe

0800090c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000910:	f7ff ff7c 	bl	800080c <Audio_MAL_IRQHandler>
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 800091c:	f7ff ff76 	bl	800080c <Audio_MAL_IRQHandler>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000928:	2102      	movs	r1, #2
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <SPI3_IRQHandler+0x3c>)
 800092c:	f000 fb13 	bl	8000f56 <SPI_I2S_GetFlagStatus>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d011      	beq.n	800095a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <SPI3_IRQHandler+0x40>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d106      	bne.n	800094c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 800093e:	f7ff fd94 	bl	800046a <EVAL_AUDIO_GetSampleCallBack>
 8000942:	4603      	mov	r3, r0
 8000944:	4619      	mov	r1, r3
 8000946:	2004      	movs	r0, #4
 8000948:	f000 f870 	bl	8000a2c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 800094c:	f7ff fd8d 	bl	800046a <EVAL_AUDIO_GetSampleCallBack>
 8000950:	4603      	mov	r3, r0
 8000952:	4619      	mov	r1, r3
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <SPI3_IRQHandler+0x3c>)
 8000956:	f000 faef 	bl	8000f38 <SPI_I2S_SendData>
  }
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40003c00 	.word	0x40003c00
 8000964:	2000001c 	.word	0x2000001c

08000968 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000970:	2300      	movs	r3, #0
 8000972:	73fb      	strb	r3, [r7, #15]
 8000974:	2300      	movs	r3, #0
 8000976:	73bb      	strb	r3, [r7, #14]
 8000978:	230f      	movs	r3, #15
 800097a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	78db      	ldrb	r3, [r3, #3]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d039      	beq.n	80009f8 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <NVIC_Init+0xbc>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	43db      	mvns	r3, r3
 800098a:	0a1b      	lsrs	r3, r3, #8
 800098c:	b2db      	uxtb	r3, r3
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000994:	7bfb      	ldrb	r3, [r7, #15]
 8000996:	f1c3 0304 	rsb	r3, r3, #4
 800099a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800099c:	7b7a      	ldrb	r2, [r7, #13]
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	fa42 f303 	asr.w	r3, r2, r3
 80009a4:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	785b      	ldrb	r3, [r3, #1]
 80009aa:	461a      	mov	r2, r3
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	789a      	ldrb	r2, [r3, #2]
 80009b8:	7b7b      	ldrb	r3, [r7, #13]
 80009ba:	4013      	ands	r3, r2
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	7bfb      	ldrb	r3, [r7, #15]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	011b      	lsls	r3, r3, #4
 80009c8:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <NVIC_Init+0xc0>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4413      	add	r3, r2
 80009d2:	7bfa      	ldrb	r2, [r7, #15]
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009d8:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <NVIC_Init+0xc0>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	f003 031f 	and.w	r3, r3, #31
 80009ec:	2101      	movs	r1, #1
 80009ee:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009f2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80009f6:	e00f      	b.n	8000a18 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009f8:	490b      	ldr	r1, [pc, #44]	; (8000a28 <NVIC_Init+0xc0>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	f003 031f 	and.w	r3, r3, #31
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a10:	f100 0320 	add.w	r3, r0, #32
 8000a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <DAC_SetChannel1Data+0x34>)
 8000a3e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	3308      	adds	r3, #8
 8000a48:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	887b      	ldrh	r3, [r7, #2]
 8000a50:	6013      	str	r3, [r2, #0]
}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	40007400 	.word	0x40007400

08000a64 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <DMA_Init+0xac>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a8e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a9a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	6a1b      	ldr	r3, [r3, #32]
 8000aa0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000aa6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ab2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ab8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f023 0307 	bic.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	4313      	orrs	r3, r2
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	691a      	ldr	r2, [r3, #16]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685a      	ldr	r2, [r3, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60da      	str	r2, [r3, #12]
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	f01c803f 	.word	0xf01c803f

08000b14 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b20:	78fb      	ldrb	r3, [r7, #3]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d006      	beq.n	8000b34 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f043 0201 	orr.w	r2, r3, #1
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000b32:	e005      	b.n	8000b40 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f023 0201 	bic.w	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	601a      	str	r2, [r3, #0]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e001      	b.n	8000b6e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <DMA_GetFlagStatus+0x6c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d802      	bhi.n	8000b9c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <DMA_GetFlagStatus+0x70>)
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	e001      	b.n	8000ba0 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <DMA_GetFlagStatus+0x74>)
 8000b9e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	e002      	b.n	8000bb8 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000bbe:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000bc2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	75fb      	strb	r3, [r7, #23]
 8000bd2:	e001      	b.n	8000bd8 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	4002640f 	.word	0x4002640f
 8000bec:	40026000 	.word	0x40026000
 8000bf0:	40026400 	.word	0x40026400

08000bf4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <DMA_ClearFlag+0x50>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d802      	bhi.n	8000c0c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <DMA_ClearFlag+0x54>)
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	e001      	b.n	8000c10 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <DMA_ClearFlag+0x58>)
 8000c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d007      	beq.n	8000c2a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000c20:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000c28:	e006      	b.n	8000c38 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000c30:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	6093      	str	r3, [r2, #8]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	4002640f 	.word	0x4002640f
 8000c48:	40026000 	.word	0x40026000
 8000c4c:	40026400 	.word	0x40026400

08000c50 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000c5c:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <EXTI_Init+0xe0>)
 8000c5e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	799b      	ldrb	r3, [r3, #6]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d04f      	beq.n	8000d08 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000c68:	4931      	ldr	r1, [pc, #196]	; (8000d30 <EXTI_Init+0xe0>)
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <EXTI_Init+0xe0>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	4013      	ands	r3, r2
 8000c76:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000c78:	492d      	ldr	r1, [pc, #180]	; (8000d30 <EXTI_Init+0xe0>)
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <EXTI_Init+0xe0>)
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	4013      	ands	r3, r2
 8000c86:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	791b      	ldrb	r3, [r3, #4]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4413      	add	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	6811      	ldr	r1, [r2, #0]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	6812      	ldr	r2, [r2, #0]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000ca2:	4923      	ldr	r1, [pc, #140]	; (8000d30 <EXTI_Init+0xe0>)
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <EXTI_Init+0xe0>)
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4013      	ands	r3, r2
 8000cb0:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000cb2:	491f      	ldr	r1, [pc, #124]	; (8000d30 <EXTI_Init+0xe0>)
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <EXTI_Init+0xe0>)
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	795b      	ldrb	r3, [r3, #5]
 8000cc6:	2b10      	cmp	r3, #16
 8000cc8:	d10e      	bne.n	8000ce8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000cca:	4919      	ldr	r1, [pc, #100]	; (8000d30 <EXTI_Init+0xe0>)
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <EXTI_Init+0xe0>)
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000cd8:	4915      	ldr	r1, [pc, #84]	; (8000d30 <EXTI_Init+0xe0>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <EXTI_Init+0xe0>)
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000ce6:	e01d      	b.n	8000d24 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <EXTI_Init+0xe0>)
 8000cea:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	795b      	ldrb	r3, [r3, #5]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	6811      	ldr	r1, [r2, #0]
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	430a      	orrs	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]
}
 8000d06:	e00d      	b.n	8000d24 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	791b      	ldrb	r3, [r3, #4]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4413      	add	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	6811      	ldr	r1, [r2, #0]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	6812      	ldr	r2, [r2, #0]
 8000d1e:	43d2      	mvns	r2, r2
 8000d20:	400a      	ands	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	40013c00 	.word	0x40013c00

08000d34 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <EXTI_GetITStatus+0x44>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <EXTI_GetITStatus+0x44>)
 8000d50:	695a      	ldr	r2, [r3, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4013      	ands	r3, r2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d005      	beq.n	8000d66 <EXTI_GetITStatus+0x32>
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d002      	beq.n	8000d66 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e001      	b.n	8000d6a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40013c00 	.word	0x40013c00

08000d7c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <EXTI_ClearITPendingBit+0x1c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6153      	str	r3, [r2, #20]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40013c00 	.word	0x40013c00

08000d9c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b087      	sub	sp, #28
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	e076      	b.n	8000ea6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000db8:	2201      	movs	r2, #1
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d165      	bne.n	8000ea0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2103      	movs	r1, #3
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	401a      	ands	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	791b      	ldrb	r3, [r3, #4]
 8000df2:	4619      	mov	r1, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	791b      	ldrb	r3, [r3, #4]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d003      	beq.n	8000e12 <GPIO_Init+0x76>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	791b      	ldrb	r3, [r3, #4]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d12e      	bne.n	8000e70 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	401a      	ands	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	795b      	ldrb	r3, [r3, #5]
 8000e30:	4619      	mov	r1, r3
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	401a      	ands	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	7992      	ldrb	r2, [r2, #6]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fa01 f202 	lsl.w	r2, r1, r2
 8000e68:	b292      	uxth	r2, r2
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2103      	movs	r1, #3
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	401a      	ands	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	79db      	ldrb	r3, [r3, #7]
 8000e90:	4619      	mov	r1, r3
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d985      	bls.n	8000db8 <GPIO_Init+0x1c>
    }
  }
}
 8000eac:	bf00      	nop
 8000eae:	371c      	adds	r7, #28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000eca:	490a      	ldr	r1, [pc, #40]	; (8000ef4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ecc:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000ed6:	e006      	b.n	8000ee6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000f0a:	490a      	ldr	r1, [pc, #40]	; (8000f34 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000f16:	e006      	b.n	8000f26 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000f18:	4906      	ldr	r1, [pc, #24]	; (8000f34 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	4013      	ands	r3, r2
 8000f24:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800

08000f38 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	819a      	strh	r2, [r3, #12]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b085      	sub	sp, #20
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	891b      	ldrh	r3, [r3, #8]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000f76:	2301      	movs	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	e001      	b.n	8000f80 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000f90:	b490      	push	{r4, r7}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	460a      	mov	r2, r1
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000fb4:	4916      	ldr	r1, [pc, #88]	; (8001010 <SYSCFG_EXTILineConfig+0x80>)
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	4a14      	ldr	r2, [pc, #80]	; (8001010 <SYSCFG_EXTILineConfig+0x80>)
 8000fc0:	79bb      	ldrb	r3, [r7, #6]
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	1c83      	adds	r3, r0, #2
 8000fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <SYSCFG_EXTILineConfig+0x80>)
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461c      	mov	r4, r3
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <SYSCFG_EXTILineConfig+0x80>)
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3302      	adds	r3, #2
 8000fec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ff0:	79f9      	ldrb	r1, [r7, #7]
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	431a      	orrs	r2, r3
 8001000:	1ca3      	adds	r3, r4, #2
 8001002:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bc90      	pop	{r4, r7}
 800100e:	4770      	bx	lr
 8001010:	40013800 	.word	0x40013800

08001014 <__libc_init_array>:
 8001014:	b570      	push	{r4, r5, r6, lr}
 8001016:	4e0d      	ldr	r6, [pc, #52]	; (800104c <__libc_init_array+0x38>)
 8001018:	4c0d      	ldr	r4, [pc, #52]	; (8001050 <__libc_init_array+0x3c>)
 800101a:	1ba4      	subs	r4, r4, r6
 800101c:	10a4      	asrs	r4, r4, #2
 800101e:	2500      	movs	r5, #0
 8001020:	42a5      	cmp	r5, r4
 8001022:	d109      	bne.n	8001038 <__libc_init_array+0x24>
 8001024:	4e0b      	ldr	r6, [pc, #44]	; (8001054 <__libc_init_array+0x40>)
 8001026:	4c0c      	ldr	r4, [pc, #48]	; (8001058 <__libc_init_array+0x44>)
 8001028:	f000 f818 	bl	800105c <_init>
 800102c:	1ba4      	subs	r4, r4, r6
 800102e:	10a4      	asrs	r4, r4, #2
 8001030:	2500      	movs	r5, #0
 8001032:	42a5      	cmp	r5, r4
 8001034:	d105      	bne.n	8001042 <__libc_init_array+0x2e>
 8001036:	bd70      	pop	{r4, r5, r6, pc}
 8001038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800103c:	4798      	blx	r3
 800103e:	3501      	adds	r5, #1
 8001040:	e7ee      	b.n	8001020 <__libc_init_array+0xc>
 8001042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001046:	4798      	blx	r3
 8001048:	3501      	adds	r5, #1
 800104a:	e7f2      	b.n	8001032 <__libc_init_array+0x1e>
 800104c:	0800108c 	.word	0x0800108c
 8001050:	0800108c 	.word	0x0800108c
 8001054:	0800108c 	.word	0x0800108c
 8001058:	08001090 	.word	0x08001090

0800105c <_init>:
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	bf00      	nop
 8001060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001062:	bc08      	pop	{r3}
 8001064:	469e      	mov	lr, r3
 8001066:	4770      	bx	lr

08001068 <_fini>:
 8001068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106a:	bf00      	nop
 800106c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106e:	bc08      	pop	{r3}
 8001070:	469e      	mov	lr, r3
 8001072:	4770      	bx	lr
